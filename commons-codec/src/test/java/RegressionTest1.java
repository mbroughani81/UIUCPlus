import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384;
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException(throwable0);
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException();
        decoderException1.addSuppressed((java.lang.Throwable) encoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException(throwable8);
        org.apache.commons.codec.EncoderException encoderException10 = new org.apache.commons.codec.EncoderException();
        decoderException9.addSuppressed((java.lang.Throwable) encoderException10);
        encoderException6.addSuppressed((java.lang.Throwable) encoderException10);
        java.lang.Throwable[] throwableArray13 = encoderException6.getSuppressed();
        encoderException2.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable[] throwableArray15 = encoderException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList0 = null;
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList1 = new org.apache.commons.codec.language.bm.Rule.PhonemeList(phonemeList0);
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList2 = phonemeList1.getPhonemes();
        java.lang.Iterable<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeIterable3 = phonemeList1.getPhonemes();
        org.junit.Assert.assertNull(phonemeList2);
        org.junit.Assert.assertNull(phonemeIterable3);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("SHA-384");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms2 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet3, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms2, byteArray7);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        javax.crypto.Mac mac21 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms2, byteArray14);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        byte[] byteArray23 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray1, byteArray14);
        javax.crypto.Mac mac24 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray23);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[99, 38, -77, 37, -76, -88, -70, 75, 36, -86, -100, 50, 57, -117, -62, 68, 1, -19, 53, -38, 39, -22, -16, -23, -121, -47, 25, -17, -125, -93, -84, -21]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms2 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms2.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-70, 124, 33, -58, 101, -103, -8, -99, 90, -32, 14, 8, 25, -89, 14, 100, -19, 5, -81, 65, -123, -19, 0, -80, -124, -34, 38, 116, 100, 63, -61, -41, -27, -65, 107, -15, -40, 88, -38, -102, 74, -116, -121, 119, -41, 75, 90, -91, 109, 38, 44, 22, -24, 49, -7, -60, 63, 13, -24, -39, -40, -96, 108, 115]");
        org.junit.Assert.assertNotNull(mac24);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray6);
        org.apache.commons.codec.net.PercentCodec percentCodec12 = new org.apache.commons.codec.net.PercentCodec(byteArray6, false);
        org.apache.commons.codec.language.Metaphone metaphone13 = new org.apache.commons.codec.language.Metaphone();
        java.lang.Object obj15 = metaphone13.encode((java.lang.Object) "$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = percentCodec12.decode((java.lang.Object) "$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type java.lang.String cannot be Percent decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "PRSK" + "'", obj15, "PRSK");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("828213832432323283231");
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str20 = org.apache.commons.codec.digest.Crypt.crypt(byteArray13, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec22 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        byte[] byteArray28 = uRLCodec22.encode(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray13, byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = base64InputStream5.read(byteArray30, 0, 1164493051);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str7, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0Acd8L3u4hVxI" + "'", str20, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str29, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        int int1 = org.apache.commons.codec.digest.MurmurHash2.hash32("a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3527094 + "'", int1 == 3527094);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec("kBAwnYFpJm7aQ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: kBAwnYFpJm7aQ");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream3 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream4 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0);
        boolean boolean5 = base16OutputStream4.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray8);
        java.lang.String str10 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, byteArray8);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isBase64(byteArray8);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\000\ufffd" + "'", str9, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str10, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset("9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.lang.String str34 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray30, "$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray30, inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3." + "'", str34, "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray1 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(0);
        byte[] byteArray3 = base32_1.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        boolean boolean4 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[9, 1, -30, 104, -102, -9, 66, 29, 115, -102, -7, 127, -19, -113, 100, 31, -55, -67, -8, 63, -25, -75, -95, 20, -98, -41, -123]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha512("d2789eba1651444e3ee6cb80db8900fa", "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-48, 110, 87, -2, -45, 103, 53, 103, 40, 90, -19, -96, 43, 45, -40, 58, 47, -115, -104, 11, -79, 42, -95, 30, -76, -30, -9, 76, 91, 49, 22, 89, 31, 16, 41, -15, 16, 23, 41, -35, 40, 26, -83, 17, -110, 41, -100, 35, 72, 82, 75, -121, -75, 75, -46, 80, -36, -109, -5, -76, 8, -116, -18, 86]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac1 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac1 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        java.lang.String str3 = refinedSoundex1.encode("AAAAAAA");
        int int6 = refinedSoundex1.difference("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "A6" + "'", str3, "A6");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        int int27 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray25);
        byte[] byteArray28 = quotedPrintableCodec1.encode(byteArray25);
        java.lang.String str30 = quotedPrintableCodec1.encode("\u42f9\u0892\u952a\ub7ae\ua633\u8e61\uf18c\ud06d\u8bd7\u0336\u064f\u36cd\u22c8\u5b3c");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = quotedPrintableCodec1.decode("073743|073753", "ash");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ash");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-690116322) + "'", int27 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC" + "'", str30, "=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-53, 95, 109, -66, 85, 45, 81, 21, -63, 93, -75, 124, 99, 39, 72, 48, 30, -39, -43, -112]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "CB5F6DBE552D5115C15DB57C632748301ED9D590");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "CB5F6DBE552D5115C15DB57C632748301ED9D590");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[C, B, 5, F, 6, D, B, E, 5, 5, 2, D, 5, 1, 1, 5, C, 1, 5, D, B, 5, 7, C, 6, 3, 2, 7, 4, 8, 3, 0, 1, E, D, 9, D, 5, 9, 0]");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        org.apache.commons.codec.digest.XXHash32 xXHash32_3 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray7);
        xXHash32_3.update(byteArray9, (int) (byte) 10, (-690116322));
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream14 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, inputStream14);
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray9, inputStream14);
        byte[] byteArray17 = hex2.decode(byteArray9);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "79d351ca4f5462d2eb5f2595220e0863" + "'", str16, "79d351ca4f5462d2eb5f2595220e0863");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 16, 1, 0]");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.security.MessageDigest messageDigest0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.lang.String str5 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, inputStream4);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream6);
        java.lang.String str9 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, inputStream6);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.shaHex(inputStream6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str5, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str7, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str8, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str9, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str10, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.Blake3.hash(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1" + "'", str10, "$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        long long1 = pureJavaCrc32_0.getValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        int int1 = incrementalHash32x86_0.end();
        incrementalHash32x86_0.start(0);
        org.apache.commons.codec.net.URLCodec uRLCodec5 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet6 = null;
        byte[] byteArray8 = new byte[] { (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet6, byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray9);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray9);
        byte[] byteArray12 = uRLCodec5.decode(byteArray9);
        byte[] byteArray13 = null;
        byte[] byteArray14 = uRLCodec5.decode(byteArray13);
        java.lang.String str15 = uRLCodec5.getDefaultCharset();
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray19);
        byte[] byteArray22 = uRLCodec5.encode(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            incrementalHash32x86_0.add(byteArray19, 1164493051, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1164493051 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str11, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str21, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        org.apache.commons.codec.net.URLCodec uRLCodec11 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        byte[] byteArray17 = uRLCodec11.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray5, (-488200341), 104729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -488200342 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250" + "'", str18, "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern0 = org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;
        boolean boolean2 = rPattern0.isMatch((java.lang.CharSequence) "d41d8cd98f00b204e9800998ecf8427e");
        boolean boolean4 = rPattern0.isMatch((java.lang.CharSequence) "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6");
        org.junit.Assert.assertNotNull(rPattern0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("MD2");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-114, -20, -16, -46, 61, 36, -117, 14, 98, 35, -72, -95, 13, -37, -15, -27]");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        char[] charArray3 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex5 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex6 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = refinedSoundex6.difference("ISO-8859-1", "00001010000011010110100001000001010100010110000101000001011001110100011101000001");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 8 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, #, a]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C9 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C9.reset();
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray14 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray13);
        pureJavaCrc32C9.update(byteArray13, (-690116322), (-1612190696));
        byte[] byteArray20 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        pureJavaCrc32C9.update(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray28, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray33 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray20, byteArray28);
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray37 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet34, byteArray36);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray20, byteArray36);
        java.lang.String str40 = hmacUtils8.hmacHex(byteArray39);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str15, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str29, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str31, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AAAAAAA" + "'", str32, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str38, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "517d4818c9f39a1b0c116f2f92e779215855f3e9919b72efa23357df" + "'", str40, "517d4818c9f39a1b0c116f2f92e779215855f3e9919b72efa23357df");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset("CBDAFA");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: CBDAFA");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.NameType nameType10 = phoneticEngine4.getNameType();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(nameType10);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream21 = new org.apache.commons.codec.binary.Base32InputStream(inputStream16);
        boolean boolean22 = base32InputStream21.markSupported();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec10 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray16);
        java.lang.Object obj23 = quotedPrintableCodec10.decode((java.lang.Object) byteArray16);
        org.apache.commons.codec.digest.HmacUtils hmacUtils24 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray16);
        byte[] byteArray26 = hmacUtils24.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        byte[] byteArray28 = hmacUtils24.hmac("E99B98");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AAAAAAA" + "'", str20, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str21, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str22, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-12, 93, -49, 17, -103, 67, 92, -1, -23, 2, -103, 20, 20, 31, -14, -34, 8, 44, -47, -108, 7, -93, 58, -124, -99, -107, -50, -35]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[69, 32, 1, -72, 86, -97, 68, 83, -48, -122, -23, 104, 6, -94, 125, 61, 15, -58, -124, -74, 110, 104, -46, 7, -58, 99, 85, -92]");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        long long1 = org.apache.commons.codec.digest.MurmurHash2.hash64("01230120022455012623010202");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-8357321264474462205L) + "'", long1 == (-8357321264474462205L));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy4 = base64_3.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_5 = new org.apache.commons.codec.binary.Base16(true, codecPolicy4);
        org.apache.commons.codec.binary.Base16 base16_6 = new org.apache.commons.codec.binary.Base16(true, codecPolicy4);
        boolean boolean8 = base16_6.isInAlphabet("6brp3ObrccRZI");
        org.junit.Assert.assertTrue("'" + codecPolicy4 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy4.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 8196844538399943790L + "'", long1 == 8196844538399943790L);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.Lang lang8 = phoneticEngine4.getLang();
        org.apache.commons.codec.language.bm.Lang lang9 = phoneticEngine4.getLang();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(lang8);
        org.junit.Assert.assertNull(lang9);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) 64, (long) (-1612190696), 1971526657);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1534769883) + "'", int3 == (-1534769883));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec8 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        java.lang.Object obj21 = quotedPrintableCodec8.decode((java.lang.Object) byteArray14);
        java.nio.charset.Charset charset23 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str24 = quotedPrintableCodec8.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset23);
        org.apache.commons.codec.net.URLCodec uRLCodec26 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = new byte[] { (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet27, byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray30);
        java.lang.String str32 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray30);
        byte[] byteArray33 = uRLCodec26.decode(byteArray30);
        byte[] byteArray34 = null;
        byte[] byteArray35 = uRLCodec26.decode(byteArray34);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_45 = new org.apache.commons.codec.binary.Base16();
        boolean boolean47 = base16_45.isInAlphabet("AAAAAAA");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str53 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray51, true);
        java.lang.String str54 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray51);
        boolean boolean56 = base16_45.isInAlphabet(byteArray51, true);
        byte[] byteArray57 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray41, byteArray51);
        byte[] byteArray58 = uRLCodec26.encode(byteArray57);
        byte[] byteArray59 = quotedPrintableCodec8.decode(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = base64InputStream5.readNBytes(byteArray58, 1971526657, 3527094);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [1971526657, 1971526657 + 3527094) out of bounds for length 80");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str24, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str32, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ffffff" + "'", str53, "ffffff");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str54, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((-8350299967407043051L), (long) (byte) 0, (-237789309));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 436110042 + "'", int3 == 436110042);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = quotedPrintableCodec1.encode("$6$HIyitacR$s..1d7kYdutz7yj1ys5UgyfWToa2qSrJ26F3Qs7AfOYqjDl3.IXcXUwRUF4sYW5vDE9lyJ/qX.n6B65SQRvHl.", "Ae3f");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Ae3f");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest3);
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest3);
        org.apache.commons.codec.net.URLCodec uRLCodec7 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet8 = null;
        byte[] byteArray10 = new byte[] { (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet8, byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray11);
        byte[] byteArray13 = uRLCodec7.encode(byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray12);
        byte[] byteArray15 = digestUtils5.digest(byteArray12);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[31, 6, 114, 42, -75, 17, 64, -65, 19, 105, 114, -11, 44, -32, 88, 77, -28, -55, 34, -17, 85, -19, -7, -49, 45, -66, -98, 0, 112, 8, -108, -5, 115, -126, -39, -37, 121, 43, -84, 8, -57, 43, -70, -1, 121, 108, -76, 79, -118, 46, -105, -63, 111, 92, 95, -95, -122, 11, -65, -50, -78, 2, -82, -120]");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90");
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils("t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg== MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        long long24 = base64InputStream17.skip(0L);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = caverphone0.encode((java.lang.Object) byteArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.ISO_8859_1;
        org.apache.commons.codec.net.BCodec bCodec1 = new org.apache.commons.codec.net.BCodec(charset0);
        org.junit.Assert.assertNotNull(charset0);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("b2Aup9HxaW1JY");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2a19f01583f35572ae07990bd23d0b8062321b36" + "'", str1, "2a19f01583f35572ae07990bd23d0b8062321b36");
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset1);
        java.lang.String str3 = bCodec2.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = bCodec2.encode("$6$olhAUVh0$fd2xFXNNKWOX3fOQQkKu1dEDI7AbqooFENR8NKmzvt.XIdWUUedSG7/qxn3Dclg4nox0CeFSDyFw9Aey9WMN30", "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: =000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=??1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=??=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=??1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=??=000=000=000=000=000=001");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        java.nio.charset.Charset charset7 = bCodec2.getCharset();
        boolean boolean8 = bCodec2.isStrictDecoding();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = bCodec2.decode("HmacSHA224");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray10, false);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, byteArray10);
        char[] charArray15 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray10);
        boolean boolean17 = base64_1.isInAlphabet(byteArray10, true);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base64_1.decode((java.lang.Object) messageDigest20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0A01640101" + "'", str13, "0A01640101");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str14, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.codec.binary.Base16 base16_0 = new org.apache.commons.codec.binary.Base16();
        boolean boolean2 = base16_0.isInAlphabet("AAAAAAA");
        boolean boolean4 = base16_0.isInAlphabet((byte) 1);
        java.util.BitSet bitSet5 = null;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str18 = org.apache.commons.codec.digest.Crypt.crypt(byteArray11, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray11, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray11);
        byte[] byteArray29 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray28);
        java.lang.String str30 = base16_0.encodeAsString(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0Acd8L3u4hVxI" + "'", str18, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str27, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0000000000" + "'", str30, "0000000000");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65, 65, 65, 65, 65, 65, 61]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        java.nio.charset.Charset charset7 = bCodec2.getCharset();
        java.lang.String str8 = bCodec2.getDefaultCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        boolean boolean10 = base32_3.isInAlphabet(byteArray8, false);
        int int11 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray8);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray1, byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyedHash(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-690116322) + "'", int11 == (-690116322));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16fd67a8bb44f961f07f53972686acb3" + "'", str12, "16fd67a8bb44f961f07f53972686acb3");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("AKPKKMNSKT");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_512("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[11, 116, 33, -82, 37, -65, -74, -75, 15, -124, 10, 56, -96, 63, 58, -128, 92, -36, 95, 122, -59, 72, -41, -81, 39, -5, -39, -89, 91, 74, -73, -122, -81, -120, -57, 14, -108, -122, -11, 10, -121, 2, -41, 116, -64, 23, 110, -8, -36, -82, 74, -48, 31, -77, -112, -102, 60, 65, 7, 87, 33, -46, -117, -4]");
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str2 = org.apache.commons.codec.binary.StringUtils.newStringUtf16(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset3 = null;
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.binary.Hex hex5 = new org.apache.commons.codec.binary.Hex(charset4);
        java.lang.String str6 = hex5.toString();
        java.io.OutputStream outputStream7 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream8 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream7);
        byte[] byteArray11 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream8.write(byteArray11);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str16 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray11, byteArray15);
        byte[] byteArray18 = hex5.encode(byteArray11);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64InputStream base64InputStream20 = new org.apache.commons.codec.binary.Base64InputStream(inputStream0, true, 4, byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [e6a7fd7c03456c9e55d31c24977856441d459f0aff2b823e02532b8d45ad043f]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(outputStream7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000\ufffd" + "'", str16, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str17, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[101, 54, 97, 55, 102, 100, 55, 99, 48, 51, 52, 53, 54, 99, 57, 101, 53, 53, 100, 51, 49, 99, 50, 52, 57, 55, 55, 56, 53, 54, 52, 52, 49, 100, 52, 53, 57, 102, 48, 97, 102, 102, 50, 98, 56, 50, 51, 101, 48, 50, 53, 51, 50, 98, 56, 100, 52, 53, 97, 100, 48, 52, 51, 102]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3" + "'", str19, "9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (byte) 100, (-965378730));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-679748572) + "'", int2 == (-679748572));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        char[] charArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        java.lang.Object obj15 = percentCodec0.decode((java.lang.Object) byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray9, (int) ' ', 1650246903, (-488200341));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.nio.charset.Charset charset1 = null;
        java.nio.charset.Charset charset2 = org.apache.commons.codec.Charsets.toCharset(charset1);
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex(charset2);
        java.lang.String str4 = hex3.toString();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        byte[] byteArray12 = hex3.decode(byteArray7);
        java.lang.Object obj13 = binaryCodec0.decode((java.lang.Object) byteArray12);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C14 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C14.reset();
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray19 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet16, byteArray18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray18);
        pureJavaCrc32C14.update(byteArray18, (-690116322), (-1612190696));
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        pureJavaCrc32C14.update(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray33, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        byte[] byteArray38 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray25, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray39 = org.apache.commons.codec.digest.Blake3.keyedHash(byteArray12, byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str20, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str36, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AAAAAAA" + "'", str37, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet5, byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray8);
        boolean boolean11 = base32_4.isInAlphabet(byteArray9, false);
        int int12 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray9);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray2, byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-690116322) + "'", int12 == (-690116322));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "16fd67a8bb44f961f07f53972686acb3" + "'", str13, "16fd67a8bb44f961f07f53972686acb3");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-54, -69, -16, 3, -100, 82, 83, 31, -51, -20, -126, -115, -115, 23, 57, -53, -46, 73, -104, 90, -113, -3, 9, 73, -64, 125, -121, -95]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("AAAAAAA");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-7, -78, -122, -99, -26, -52, -110, 38, -71, -112, -40, 63, -128, 94, -56, 57, 21, -52, -100, -123]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1787795390 + "'", int2 == 1787795390);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray2);
        int int5 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-965378730) + "'", int5 == (-965378730));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 8196844538399943790L + "'", long1 == 8196844538399943790L);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils("78fdcba5ae892b088edbc0748cc2e854ff72cc2a6ea008870b1da380", "SHA3-224");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm 78fdcba5ae892b088edbc0748cc2e854ff72cc2a6ea008870b1da380 not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray0, 1971526657, (int) (short) -1, (int) '-');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUnchecked("B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: : java.io.UnsupportedEncodingException: ");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.codec.binary.Hex hex0 = new org.apache.commons.codec.binary.Hex();
        java.nio.charset.Charset charset1 = null;
        java.nio.charset.Charset charset2 = org.apache.commons.codec.Charsets.toCharset(charset1);
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex(charset2);
        java.lang.String str4 = hex3.toString();
        java.io.OutputStream outputStream5 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream6 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream5);
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream6.write(byteArray9);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str14 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray9, byteArray13);
        byte[] byteArray16 = hex3.encode(byteArray9);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray16);
        java.lang.Object obj18 = hex0.decode((java.lang.Object) byteArray16);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(outputStream5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\000\ufffd" + "'", str14, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str15, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[101, 54, 97, 55, 102, 100, 55, 99, 48, 51, 52, 53, 54, 99, 57, 101, 53, 53, 100, 51, 49, 99, 50, 52, 57, 55, 55, 56, 53, 54, 52, 52, 49, 100, 52, 53, 57, 102, 48, 97, 102, 102, 50, 98, 56, 50, 51, 101, 48, 50, 53, 51, 50, 98, 56, 100, 52, 53, 97, 100, 48, 52, 51, 102]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3" + "'", str17, "9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3");
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray5);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        boolean boolean21 = base32_14.isInAlphabet(byteArray19, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str24 = base32_14.encodeAsString(byteArray23);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest26, inputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream27);
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest25, inputStream27);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray23, inputStream27);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream27);
        java.lang.String str34 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray5, inputStream27);
        byte[] byteArray36 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        java.io.InputStream inputStream38 = java.io.InputStream.nullInputStream();
        java.lang.String str39 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray37, inputStream38);
        byte[] byteArray40 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream38);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000\000\000\000\000" + "'", str12, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ABUAA2IAEE======" + "'", str24, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str32, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str34, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str39, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream21);
        java.lang.Object obj25 = quotedPrintableCodec1.encode((java.lang.Object) byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.codec.digest.MurmurHash2.hash64(byteArray18, 76, 1797466354);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str22, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray6, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray6);
        byte[] byteArray24 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray23);
        long long25 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0Acd8L3u4hVxI" + "'", str13, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str22, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-4882430424691764007L) + "'", long25 == (-4882430424691764007L));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(3254930474243051180L, (long) (-488200341));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1254840318 + "'", int2 == 1254840318);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        java.util.BitSet bitSet1 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms2 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet3, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms2, byteArray7);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        javax.crypto.Mac mac21 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms2, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet24 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet24, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        boolean boolean30 = base32_23.isInAlphabet(byteArray28, false);
        byte[] byteArray32 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str33 = base32_23.encodeAsString(byteArray32);
        org.apache.commons.codec.digest.HmacUtils hmacUtils34 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms2, byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet1, byteArray32);
        pureJavaCrc32C0.update(byteArray35, 1164493051, (-690116322));
        org.junit.Assert.assertTrue("'" + hmacAlgorithms2 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms2.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ABUAA2IAEE======" + "'", str33, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.nio.charset.Charset charset1 = null;
        java.nio.charset.Charset charset2 = org.apache.commons.codec.Charsets.toCharset(charset1);
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex(charset2);
        java.lang.String str4 = hex3.toString();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        byte[] byteArray12 = hex3.decode(byteArray7);
        java.lang.Object obj13 = binaryCodec0.decode((java.lang.Object) byteArray12);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray12, byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        long long1 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.update((-64519185));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        char[] charArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        java.lang.Object obj15 = percentCodec0.decode((java.lang.Object) byteArray9);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest20);
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest20);
        java.io.OutputStream outputStream23 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream24 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream23);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec28 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray34);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray34);
        java.lang.Object obj41 = quotedPrintableCodec28.decode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream42 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream24, true, 1, byteArray34);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, false, 1757052779);
        byte[] byteArray47 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest20, byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray48 = percentCodec0.decode(byteArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Invalid URL encoding: not a valid digit (radix 16): 12");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream23);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AAAAAAA" + "'", str38, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str39, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str40, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream18 = new org.apache.commons.codec.binary.Base64InputStream(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray8, (java.io.InputStream) base64InputStream18);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, inputStream21);
        byte[] byteArray24 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray25, inputStream26);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream28 = new org.apache.commons.codec.binary.Base64InputStream(inputStream26);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream28);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream28);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream28);
        byte[] byteArray33 = base64InputStream28.readNBytes((int) ' ');
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest20, (java.io.InputStream) base64InputStream28);
        int int35 = base64InputStream18.read(byteArray34);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str27, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str29, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str30, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex("bcce83622206284126038d877e184c2a80a54c5eae29897917b64bcda570c827dd2e7d0f195a31c1018fe15da1f37d47a1affa6445ab0f7d2fc7ebc0c64e7b46");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25" + "'", str1, "ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.CharSequence charSequence0 = null;
        boolean boolean2 = org.apache.commons.codec.binary.StringUtils.equals(charSequence0, (java.lang.CharSequence) "'\004\2071\361\266(\233\342p\345\322\312LZ\211\272g\003\247{\201\007\223'S,*");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        char[] charArray3 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex5 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        java.lang.String str7 = refinedSoundex5.encode("01360240043788015936020505");
        java.io.OutputStream outputStream8 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream12 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream8, (org.apache.commons.codec.binary.BaseNCodec) base16_10, false);
        baseNCodecOutputStream12.eof();
        org.apache.commons.codec.binary.Base16 base16_15 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream17 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream12, (org.apache.commons.codec.binary.BaseNCodec) base16_15, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream20 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream17, true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = refinedSoundex5.encode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to RefinedSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, #, a]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(outputStream8);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream19);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream23 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream21, false);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream2, false);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream2);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream6);
        java.lang.Object obj8 = binaryCodec0.decode((java.lang.Object) str7);
        org.apache.commons.codec.net.URLCodec uRLCodec10 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray14);
        byte[] byteArray17 = uRLCodec10.decode(byteArray14);
        byte[] byteArray18 = null;
        byte[] byteArray19 = uRLCodec10.decode(byteArray18);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray25, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_29 = new org.apache.commons.codec.binary.Base16();
        boolean boolean31 = base16_29.isInAlphabet("AAAAAAA");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str37 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray35, true);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray35);
        boolean boolean40 = base16_29.isInAlphabet(byteArray35, true);
        byte[] byteArray41 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray25, byteArray35);
        byte[] byteArray42 = uRLCodec10.encode(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = binaryCodec0.decode((java.lang.Object) uRLCodec10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str16, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str28, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ffffff" + "'", str37, "ffffff");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str38, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.codec.EncoderException encoderException1 = new org.apache.commons.codec.EncoderException("=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(4);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        java.lang.String str3 = refinedSoundex1.encode("AAAAAAA");
        java.lang.Object obj5 = refinedSoundex1.encode((java.lang.Object) "d");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "A6" + "'", str3, "A6");
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "D0" + "'", obj5, "D0");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.Blake3.hash(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0Acd8L3u4hVxI");
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray5, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0Ac7cg1i0oNqE" + "'", str11, "0Ac7cg1i0oNqE");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("D0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518" + "'", str1, "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        char[] charArray3 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex5 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = refinedSoundex5.difference("663b90c899fa25a111067be0c22ffc64dcf581c2", "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, #, a]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        java.lang.String str3 = refinedSoundex1.encode("AAAAAAA");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = refinedSoundex1.encode((java.lang.Object) 1254840318);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to RefinedSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "A6" + "'", str3, "A6");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -71, -20, 113, -13, 85, 125, -85, -105, -45, 25, -6, 7, 28, -4, -54, 26, 118, -50, 96, 126, -92, 117, 32, 53, 51, -80, -85, -69, -86, 103, -30]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "1110001001100111101010101011101110101011101100000011001100110101001000000111010110100100011111100110000011001110011101100001101011001010111111000001110000000111111110100001100111010011100101111010101101111101010101011111001101110001111011001011100110100010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "1110001001100111101010101011101110101011101100000011001100110101001000000111010110100100011111100110000011001110011101100001101011001010111111000001110000000111111110100001100111010011100101111010101101111101010101011111001101110001111011001011100110100010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0]");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.apache.commons.codec.binary.Base16 base16_0 = new org.apache.commons.codec.binary.Base16();
        boolean boolean2 = base16_0.isInAlphabet((byte) 100);
        byte[] byteArray3 = null;
        byte[] byteArray4 = base16_0.decode(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream0);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str2, "d41d8cd98f00b204e9800998ecf8427e");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("041312381228231821282818232313", "eed8cdc400dfd4ec85dff70a170066b7");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-128, -7, 59, 23, -80, -90, 77, -53, -53, -65, -85, -36, -31, 46, -55, 24, 103, -46, -94, -51, 75, -8, -109, -61, -10, -119, -103, 119, 40, 104, -56, -59]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        xXHash32_0.reset();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer5 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, byteBuffer5);
        xXHash32_0.update(byteBuffer5);
        xXHash32_0.update((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "MD2 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        xXHash32_0.reset();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer5 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, byteBuffer5);
        xXHash32_0.update(byteBuffer5);
        xXHash32_0.reset();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "MD2 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        boolean boolean6 = base16_2.isInAlphabet((byte) 0);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec6 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset3, false);
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray10 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet7, byteArray9);
        byte[] byteArray11 = quotedPrintableCodec6.decode(byteArray10);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[37, 66, 55, 37, 68, 54, 37, 51, 69, 37, 51, 68, 37, 48, 66, 37, 65, 52, 37, 69, 67, 48, 37, 68, 57, 37, 66, 50, 37, 56, 51, 112, 37, 48, 68, 37, 69, 56, 37, 49, 51, 37, 67, 68, 37, 49, 49, 37, 66, 54, 37, 48, 67, 37, 49, 56, 37, 57, 66, 103, 37, 67, 66, 105, 74, 88, 37, 57, 68, 37, 57, 50]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[37, 66, 55, 37, 68, 54, 37, 51, 69, 37, 51, 68, 37, 48, 66, 37, 65, 52, 37, 69, 67, 48, 37, 68, 57, 37, 66, 50, 37, 56, 51, 112, 37, 48, 68, 37, 69, 56, 37, 49, 51, 37, 67, 68, 37, 49, 49, 37, 66, 54, 37, 48, 67, 37, 49, 56, 37, 57, 66, 103, 37, 67, 66, 105, 74, 88, 37, 57, 68, 37, 57, 50]");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("00001010000011010110100001000001010100010110000101000001011001110100011101000001");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "acba47930de7dea5109181bfc00014d106f31259" + "'", str1, "acba47930de7dea5109181bfc00014d106f31259");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str1, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray5, 1254840318);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str4, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = qCodec3.decode(obj5);
        java.lang.Object obj7 = null;
        java.lang.Object obj8 = qCodec3.decode(obj7);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.OutputStream outputStream5 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream5, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        baseNCodecOutputStream9.eof();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream14 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream9, (org.apache.commons.codec.binary.BaseNCodec) base16_12, false);
        long long15 = inputStream1.transferTo((java.io.OutputStream) baseNCodecOutputStream14);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream16 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream14);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(outputStream5);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        java.lang.String str11 = uRLCodec1.getDefaultCharset();
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray15);
        byte[] byteArray18 = uRLCodec1.encode(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = uRLCodec1.encode("NLKTPMA111", "org.apache.commons.codec.EncoderException");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.codec.EncoderException");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str17, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("SHA-1", "79d351ca4f5462d2eb5f2595220e0863");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ee68702b6ce9cfbd31f66fbcd66ff2d0" + "'", str2, "ee68702b6ce9cfbd31f66fbcd66ff2d0");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec1.decode("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        java.nio.charset.Charset charset19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = quotedPrintableCodec1.encode("=?UTF-8?B?U0hBLTIyNA==?=", charset19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str17, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        java.lang.String str2 = caverphone2_0.encode("663b90c899fa25a111067be0c22ffc64dcf581c2");
        java.lang.String str4 = caverphone2_0.encode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray5 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList6 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList6, phonemeArray5);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList8 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = caverphone2_0.encode((java.lang.Object) phonemeList8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PKFPKFKTKF" + "'", str2, "PKFPKFKTKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AKPKKMNSKT" + "'", str4, "AKPKKMNSKT");
        org.junit.Assert.assertNotNull(phonemeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        org.apache.commons.codec.language.Soundex soundex3 = new org.apache.commons.codec.language.Soundex("E99B98", false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = colognePhonetic0.encode((java.lang.Object) soundex3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: This method's parameter was expected to be of the type java.lang.String. But actually it was of the type org.apache.commons.codec.language.Soundex.");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream21);
        java.lang.Object obj25 = quotedPrintableCodec1.encode((java.lang.Object) byteArray18);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str32 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray31);
        java.lang.String str34 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray31, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray31);
        java.lang.String str38 = org.apache.commons.codec.digest.Crypt.crypt(byteArray31, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec40 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet41 = null;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray44 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet41, byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray44);
        byte[] byteArray46 = uRLCodec40.encode(byteArray45);
        java.lang.String str47 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray31, byteArray45);
        byte[] byteArray48 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray31);
        java.io.InputStream inputStream49 = java.io.InputStream.nullInputStream();
        java.lang.String str50 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream49);
        byte[] byteArray51 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray31, inputStream49);
        byte[] byteArray52 = quotedPrintableCodec1.decode(byteArray51);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str22, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str32, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str34, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AAAAAAA" + "'", str35, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str36, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0Acd8L3u4hVxI" + "'", str38, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str47, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str50, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet2 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        boolean boolean3 = languageSet2.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme4 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException(throwable1);
        org.apache.commons.codec.EncoderException encoderException3 = new org.apache.commons.codec.EncoderException();
        decoderException2.addSuppressed((java.lang.Throwable) encoderException3);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException(throwable5);
        org.apache.commons.codec.EncoderException encoderException7 = new org.apache.commons.codec.EncoderException();
        decoderException6.addSuppressed((java.lang.Throwable) encoderException7);
        encoderException3.addSuppressed((java.lang.Throwable) encoderException7);
        java.lang.Throwable[] throwableArray10 = encoderException7.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException11 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException7);
        org.apache.commons.codec.EncoderException encoderException12 = new org.apache.commons.codec.EncoderException("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6", (java.lang.Throwable) decoderException11);
        org.apache.commons.codec.EncoderException encoderException13 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException11);
        java.lang.String str14 = encoderException13.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException" + "'", str14, "org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.String str0 = org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA_512;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "SHA-512" + "'", str0, "SHA-512");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("\u1d74\u5560\u9deb\u2399\ue3a9\ue89d\uf686\uef20\u8b69\u2d45\ube17\ud2e2\u8c21\ufffd\u8d2e");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-29, -8, 124, 60, -90, 57, -113, -125, 53, 72, -27, 31, -23, -97, -72, -66]");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [=DD=0EL^=AF=A7=F1=12=1A=19=05=83=86=08=14=A2y=A5~n=E5=D0=E3&=B9U'=B2]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        java.lang.String str3 = nysiis1.encode("ffffff");
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = nysiis1.encode(obj4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Nysiis encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "F" + "'", str3, "F");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        qCodec3.setEncodeBlanks(true);
        java.lang.String str7 = qCodec3.encode("\000\000\000\000\000");
        java.lang.String str8 = qCodec3.getDefaultCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "=?UTF-8?Q?=00=00=00=00=00?=" + "'", str7, "=?UTF-8?Q?=00=00=00=00=00?=");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream5);
        byte[] byteArray10 = inputStream5.readNBytes((int) ' ');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray12);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream17);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest23, byteArray26);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy32 = base32_31.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream33 = new org.apache.commons.codec.binary.Base32InputStream(inputStream17, true, (int) (byte) 0, byteArray29, codecPolicy32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray12, inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str6, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str7, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str8, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$6$wmR9YasW$GVLemSnueCw3jKsuTSCH.sq74I6CrgQHtP3khVQL8A3/90.aAkaru/KMCcauo.gF7DmjcivJrtQXK5Hg8JYzj/" + "'", str13, "$6$wmR9YasW$GVLemSnueCw3jKsuTSCH.sq74I6CrgQHtP3khVQL8A3/90.aAkaru/KMCcauo.gF7DmjcivJrtQXK5Hg8JYzj/");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy32 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy32.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec9 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        java.lang.Object obj22 = quotedPrintableCodec9.decode((java.lang.Object) byteArray15);
        java.nio.charset.Charset charset24 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str25 = quotedPrintableCodec9.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset24);
        org.apache.commons.codec.net.URLCodec uRLCodec27 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet28 = null;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet28, byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray31);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray31);
        byte[] byteArray34 = uRLCodec27.decode(byteArray31);
        byte[] byteArray35 = null;
        byte[] byteArray36 = uRLCodec27.decode(byteArray35);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray42);
        java.lang.String str45 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_46 = new org.apache.commons.codec.binary.Base16();
        boolean boolean48 = base16_46.isInAlphabet("AAAAAAA");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str54 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray52, true);
        java.lang.String str55 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray52);
        boolean boolean57 = base16_46.isInAlphabet(byteArray52, true);
        byte[] byteArray58 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray42, byteArray52);
        byte[] byteArray59 = uRLCodec27.encode(byteArray58);
        byte[] byteArray60 = quotedPrintableCodec9.decode(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream61 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream4, false, (int) ' ', byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [%1DtU%60%9D%EB%23%99%E3%A9%E8%9D%F6%86%EF+%8Bi-E%BE%17%D2%E2%8C%21%DAn%88%E8%8D.]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str25, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str33, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str43, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str45, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ffffff" + "'", str54, "ffffff");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str55, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        java.io.InputStream inputStream28 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream28, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream31, false, false, codecPolicy34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, (java.io.InputStream) base16InputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream4.write(byteArray7);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream11 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream4, true, true);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[102, 102, 102, 102, 102, 102]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        boolean boolean1 = org.apache.commons.codec.digest.HmacUtils.isAvailable("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.ISO_8859_1;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.md5("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = org.apache.commons.codec.digest.Blake3.keyedHash(byteArray1, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[88, 87, 85, 87, 69, 78, 65, 80, 77, 78, 88, 68, 80, 50, 77, 74, 65, 79, 75, 84, 83, 82, 71, 80, 52, 73, 87, 89, 54, 72, 88, 87, 87, 86, 83, 79, 76, 80, 86, 69, 74, 74, 76, 86, 54, 74, 73, 65, 77, 83, 72, 84, 76, 89, 85, 71, 54, 54, 84, 78, 88, 79, 90, 71, 52, 85, 82, 69, 77, 70, 73, 50, 78, 84, 73, 70, 76, 51, 76, 84, 79, 65, 76, 84, 85, 75, 74, 72, 86, 70, 85, 68, 54, 74, 73, 85, 72, 66, 67, 80, 55, 75, 65, 61, 51, 68]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[123, 118, -12, -87, 41, 124, 1, 20, 35, -56, -84, -61, -49, 11, -8, -51]");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        long[] longArray9 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[4486029925370145800, 4555443921775884483]");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex hex1 = new org.apache.commons.codec.binary.Hex("sa|so");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: sa|so");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha512("d2789eba1651444e3ee6cb80db8900fa", "");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[17, 62, 99, -16, -97, 29, -128, 8, -48, 109, 81, -1, 108, 10, 87, -93, -32, -124, 71, 86, 124, -75, 122, -107, 86, 69, 86, 73, 125, 48, -75, -94, -106, 40, 1, -10, -55, 80, 67, 84, 60, -98, 114, -40, -26, 29, -28, -52, -65, -77, 111, -63, 53, 119, -108, -108, 47, 69, 57, 38, -83, 13, 43, 102]");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.NameType nameType4 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType5 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType4, ruleType5, languageSet6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine9 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType3, ruleType5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + nameType4 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType4.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", "BTFT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "b0b6da82b46309e1e119f858e80ad49c7701bdbc28507c02d231bb64da5efe16" + "'", str2, "b0b6da82b46309e1e119f858e80ad49c7701bdbc28507c02d231bb64da5efe16");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.codec.digest.DigestUtils digestUtils0 = new org.apache.commons.codec.digest.DigestUtils();
        java.io.OutputStream outputStream1 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream2 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream1);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream4 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream2, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream6 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream2, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_9 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet10 = null;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        byte[] byteArray13 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet10, byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray13);
        xXHash32_9.update(byteArray15, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream19 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream2, true, 760066800, byteArray15);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream21);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream21);
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray15, inputStream21);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = digestUtils0.digest(inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str23, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str25, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.apache.commons.codec.language.bm.NameType nameType1 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType1);
        org.apache.commons.codec.language.bm.Languages languages3 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType1);
        java.util.Set<java.lang.String> strSet4 = languages3.getLanguages();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Lang lang5 = org.apache.commons.codec.language.bm.Lang.loadFromResource("25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250", languages3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: 25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType1 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType1.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertNotNull(languages3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[94, 48, -40, -97, 92, -56, -114, 16, 21, 68, 39, -49, 33, -117, 106, -62, -116, -99, 127, 2, -48, 126, 124, -65, 101, -70, -72, 2, 28, -1, 110, -16]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.Object obj2 = colognePhonetic0.encode((java.lang.Object) "c239987839de3feecef5bb1f8e6fe87e560fae714275023c14c043909cb43711518b509ed9e2b6ed412c9c22bc6f69a50ac2835eae30822e3a7b82ab990842bf");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "8238313338121281838113" + "'", obj2, "8238313338121281838113");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256;
        java.lang.String str1 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_256));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HmacSHA256" + "'", str1, "HmacSHA256");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException(throwable2);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException();
        decoderException3.addSuppressed((java.lang.Throwable) encoderException4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException(throwable6);
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException();
        decoderException7.addSuppressed((java.lang.Throwable) encoderException8);
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        org.apache.commons.codec.DecoderException decoderException11 = new org.apache.commons.codec.DecoderException("d41d8cd98f00b204e9800998ecf8427e", (java.lang.Throwable) encoderException4);
        org.apache.commons.codec.DecoderException decoderException12 = new org.apache.commons.codec.DecoderException("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", (java.lang.Throwable) decoderException11);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder1 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder1.setRuleType(ruleType2);
        org.apache.commons.codec.language.bm.NameType nameType4 = beiderMorseEncoder1.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType5 = beiderMorseEncoder1.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType5, languageSet6);
        boolean boolean9 = languageSet6.contains("65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649");
        boolean boolean10 = languageSet6.isSingleton();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType4 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType4.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray0 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList1 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList1, phonemeArray0);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList3 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList1);
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList4 = phonemeList3.getPhonemes();
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList5 = new org.apache.commons.codec.language.bm.Rule.PhonemeList(phonemeList4);
        org.junit.Assert.assertNotNull(phonemeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(phonemeList4);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.codec.digest.DigestUtils digestUtils0 = new org.apache.commons.codec.digest.DigestUtils();
        java.nio.file.Path path1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = digestUtils0.digest(path1, openOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openOptionArray2);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("SHA-512/256");
        java.lang.String str5 = daitchMokotoffSoundex1.soundex("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "400000" + "'", str3, "400000");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "374374|374375|374537|375437|375374|375375" + "'", str5, "374374|374375|374537|375437|375374|375375");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest2, byteBuffer4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.apache.commons.codec.binary.StringUtils.newString(byteArray5, "acba47930de7dea5109181bfc00014d106f31259");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: acba47930de7dea5109181bfc00014d106f31259: java.io.UnsupportedEncodingException: acba47930de7dea5109181bfc00014d106f31259");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("EF");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "47c8df524e807cc8d8df75fcb19f11b078ee64c5224017601c09a81ceb58decf82479db44489a9726c283054792aa9860654951f7b9389205ae7c224166161f7" + "'", str1, "47c8df524e807cc8d8df75fcb19f11b078ee64c5224017601c09a81ceb58decf82479db44489a9726c283054792aa9860654951f7b9389205ae7c224166161f7");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy5 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream6 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, true, (int) (byte) 0, byteArray4, codecPolicy5);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray10 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray4, (int) '#', (-1534769883), 3527094);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1534769849 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy5 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy5.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex("EFDBAC");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "9fcde7ad4dd98bcd93247d59acbec5d03b646f9135e2569a4a6e2b63" + "'", str1, "9fcde7ad4dd98bcd93247d59acbec5d03b646f9135e2569a4a6e2b63");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils("2a19f01583f35572ae07990bd23d0b8062321b36");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: 2a19f01583f35572ae07990bd23d0b8062321b36 MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException("SHA-1", (java.lang.Throwable) decoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException5);
        decoderException2.addSuppressed((java.lang.Throwable) encoderException6);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream11 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, inputStream11);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, inputStream11);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "79d351ca4f5462d2eb5f2595220e0863" + "'", str13, "79d351ca4f5462d2eb5f2595220e0863");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7" + "'", str14, "980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        long long1 = org.apache.commons.codec.digest.MurmurHash2.hash64("414141414141413d0d0a");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-3094936694914619510L) + "'", long1 == (-3094936694914619510L));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) '4');
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str6, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str3 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils4 = new org.apache.commons.codec.digest.HmacUtils("Ae3f", byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm Ae3f not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str3, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray5 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray1, 1164493051, (-237789309), (-488200341));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 926703741 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, inputStream7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream7);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream7);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet17, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray20);
        boolean boolean23 = base32_16.isInAlphabet(byteArray21, false);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_16.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream25 = new org.apache.commons.codec.binary.Base32InputStream(inputStream7, false, (-965378730), byteArray14, codecPolicy24);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, (java.io.InputStream) base32InputStream25);
        java.io.RandomAccessFile randomAccessFile27 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, randomAccessFile27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str9, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str10, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((short) (byte) 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1896840250637076998L + "'", long1 == 1896840250637076998L);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream36 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest35, inputStream36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest37);
        org.apache.commons.codec.net.URLCodec uRLCodec40 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet41 = null;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray44 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet41, byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray44);
        byte[] byteArray47 = uRLCodec40.decode(byteArray44);
        byte[] byteArray48 = null;
        byte[] byteArray49 = uRLCodec40.decode(byteArray48);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str56 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray55);
        java.lang.String str58 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray55, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_59 = new org.apache.commons.codec.binary.Base16();
        boolean boolean61 = base16_59.isInAlphabet("AAAAAAA");
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str67 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray65, true);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray65);
        boolean boolean70 = base16_59.isInAlphabet(byteArray65, true);
        byte[] byteArray71 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray55, byteArray65);
        byte[] byteArray72 = uRLCodec40.encode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest37, byteArray72);
        byte[] byteArray74 = uRLCodec1.decode(byteArray73);
        java.lang.String str75 = org.apache.commons.codec.digest.DigestUtils.md5Hex(byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str46, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str56, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str58, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ffffff" + "'", str67, "ffffff");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str68, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ece21719798feb372c9d38ecd84a7afd" + "'", str75, "ece21719798feb372c9d38ecd84a7afd");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray5);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest14, inputStream15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream15);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream15);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, inputStream15);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, inputStream21);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, inputStream21);
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer26 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest24, byteBuffer26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest23, byteBuffer26);
        char[] charArray30 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray28, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex.encodeHex(byteArray5, (int) '4', 10, false, charArray30, 3527094);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[60, 54, 56, 54, -49, 78, 22, 102, 102, 105, -94, 93, -94, -128, -95, -122, 92, 45, 40, 116]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str17, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[0, C, 6, 3, A, 7, 5, B, 8, 4, 5, E, 4, F, 7, D, 0, 1, 1, 0, 7, D, 8, 5, 2, E, 4, C, 2, 4, 8, 5, C, 5, 1, A, 5, 0, A, A, A, A, 9, 4, F, C, 6, 1, 9, 9, 5, E, 7, 1, B, B, E, E, 9, 8, 3, A, 2, A, C, 3, 7, 1, 3, 8, 3, 1, 2, 6, 4, A, D, B, 4, 7, F, B, 6, B, D, 1, E, 0, 5, 8, D, 5, F, 0, 0, 4]");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.digest.Crypt.crypt(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/" + "'", str4, "$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str2 = beiderMorseEncoder0.encode("=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ufbubltiina|ufbubltiino|ufbuxbltiina|ufbuxbltiino|utfbubltiina|utfbubltiino|utfbuvltiina|utfbuvltiino|utfbuxbltiina|utfbuxbltiino|utfbuxvltiina|utfbuxvltiino|utfvubltiina|utfvubltiino|utfvuvltiina|utfvuvltiino|utfvuxbltiina|utfvuxbltiino|utfvuxvltiina|utfvuxvltiino" + "'", str2, "ufbubltiina|ufbubltiino|ufbuxbltiina|ufbuxbltiino|utfbubltiina|utfbubltiino|utfbuvltiina|utfbuvltiino|utfbuxbltiina|utfbuxbltiino|utfbuxvltiina|utfbuxvltiino|utfvubltiina|utfvubltiino|utfvuvltiina|utfvuvltiino|utfvuxbltiina|utfvuxbltiino|utfvuxvltiina|utfvuxvltiino");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray1 = null;
        byte[] byteArray2 = percentCodec0.encode(byteArray1);
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray6 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet3, byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray9 = percentCodec0.decode(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray5, 2, (-1621933077), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1621933076 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str7, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = uRLCodec1.decode("tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi", "\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??????????????????????????????????q???????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream3 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream4 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream6 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream4.write(byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[102, 102, 102, 102, 102, 102]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540" + "'", str9, "2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.nio.ByteBuffer byteBuffer37 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray38 = hmacUtils35.hmac(byteBuffer37);
        org.apache.commons.codec.digest.XXHash32 xXHash32_39 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet40 = null;
        byte[] byteArray42 = new byte[] { (byte) 100 };
        byte[] byteArray43 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet40, byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray43);
        xXHash32_39.update(byteArray45, (int) (byte) 10, (-690116322));
        byte[] byteArray49 = hmacUtils35.hmac(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = matchRatingApproachEncoder0.encode((java.lang.Object) hmacUtils35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "6B4BC7" + "'", str2, "6B4BC7");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[39, 4, -121, 49, -15, -74, 40, -101, -30, 112, -27, -46, -54, 76, 90, -119, -70, 103, 3, -89, 123, -127, 7, -109, 39, 83, 44, 42]");
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType7, languageSet8);
        boolean boolean11 = languageSet8.contains("65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme12 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str19 = org.apache.commons.codec.digest.Crypt.crypt(byteArray12, "0A01640101");
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray12);
        int int23 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray12, 4, (int) '#');
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = bCodec2.encode((java.lang.Object) byteArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type [B cannot be encoded using BCodec");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0Acd8L3u4hVxI" + "'", str19, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str20, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1650246903 + "'", int23 == 1650246903);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-114, -115, -104, 71, -74, -67, 25, -117, -79, -104, 13, -77, 52, 101, -98, -106, -95, -65, 61, -69, 92, 86, 54, -116, 111, -85, -26, -10, -75, 97, 35, 39, -112, -29, -76, 12, 29, 79, -75, 10, 25, -61, 73, -79, 11, -36, 105, 80]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex("073743|073753", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "d714e021e5902a94220883ae8d26b959bc94fb0a" + "'", str2, "d714e021e5902a94220883ae8d26b959bc94fb0a");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy4 = base64_3.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_5 = new org.apache.commons.codec.binary.Base16(true, codecPolicy4);
        org.apache.commons.codec.binary.Base16 base16_6 = new org.apache.commons.codec.binary.Base16(true, codecPolicy4);
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, false);
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray9, byteArray15);
        byte[] byteArray21 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray22, inputStream23);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream25 = new org.apache.commons.codec.binary.Base64InputStream(inputStream23);
        byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray15, (java.io.InputStream) base64InputStream25);
        long long27 = base16_6.getEncodedLength(byteArray15);
        org.junit.Assert.assertTrue("'" + codecPolicy4 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy4.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0A01640101" + "'", str18, "0A01640101");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str19, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        org.apache.commons.codec.CodecPolicy codecPolicy10 = base32_7.getCodecPolicy();
        boolean boolean12 = base32_7.isInAlphabet((byte) 0);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + codecPolicy10 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy10.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray6, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray6);
        byte[] byteArray24 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray30);
        java.lang.String str37 = org.apache.commons.codec.digest.Crypt.crypt(byteArray30, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec39 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet40 = null;
        byte[] byteArray42 = new byte[] { (byte) 100 };
        byte[] byteArray43 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet40, byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray43);
        byte[] byteArray45 = uRLCodec39.encode(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray30, byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray30);
        java.io.InputStream inputStream48 = java.io.InputStream.nullInputStream();
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream48);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, inputStream48);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream48);
        byte[] byteArray52 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray23, inputStream48);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray56 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray23, 1254840318, 1797466354, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -700034588");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0Acd8L3u4hVxI" + "'", str13, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str22, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AAAAAAA" + "'", str34, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str35, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0Acd8L3u4hVxI" + "'", str37, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str46, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str49, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream10 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, false);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream29);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream29);
        java.lang.String str34 = hmacUtils8.hmacHex(inputStream29);
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = hmacUtils8.hmac(inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str30, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str31, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str34, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray5);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream18 = new org.apache.commons.codec.binary.Base64InputStream(inputStream16);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream16);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray5, inputStream16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(inputStream16);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000\000\000\000\000" + "'", str12, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str19, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str20, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str21, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("ufbubltiina|ufbubltiino|ufbuxbltiina|ufbuxbltiino|utfbubltiina|utfbubltiino|utfbuvltiina|utfbuvltiino|utfbuxbltiina|utfbuxbltiino|utfbuxvltiina|utfbuxvltiino|utfvubltiina|utfvubltiino|utfvuvltiina|utfvuvltiino|utfvuxbltiina|utfvuxbltiino|utfvuxvltiina|utfvuxvltiino");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1f1b1baf2ac1c1535c2b941d8e8ddfa01a75c726d96e3254039db2e2219f58f0" + "'", str1, "1f1b1baf2ac1c1535c2b941d8e8ddfa01a75c726d96e3254039db2e2219f58f0");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.String str4 = matchRatingApproachEncoder0.encode("ffaRlX9TmFOkk");
        java.lang.Object obj5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = matchRatingApproachEncoder0.encode(obj5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "E99B98" + "'", str2, "E99B98");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FRLMFK" + "'", str4, "FRLMFK");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = percentCodec0.decode((java.lang.Object) "99448658175a0534e08dbca1fe67b58231a53eec");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type java.lang.String cannot be Percent decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex("SHA3-224");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "68f99a2f771f3830e1487a6aad4372fc28e3736eee4ed16fd02cf1bd47fe6224745ac0321f687d153a44c9875e5e53a2" + "'", str1, "68f99a2f771f3830e1487a6aad4372fc28e3736eee4ed16fd02cf1bd47fe6224745ac0321f687d153a44c9875e5e53a2");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str8, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, -58, 20, 66, 93, 94, -103, 43, 46, 4, 27, -1, 44, 86, 43, -16, 120, 99, 85, 116]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[82, 109, 105, 74, 100, 111, 76, 77, 48, 114, 72, 117, 68, 75, 54, 78, 120, 86, 108, 72, 75, 82, 43, 66, 110, 77, 87, 101, 52, 83, 98, 49, 118, 83, 81, 55, 71, 70, 74, 88, 100, 66, 82, 66, 79, 117, 55, 86, 101, 65, 116, 102, 115, 82, 67, 81, 65, 52, 99, 86, 118, 117, 48, 98, 65, 72, 70, 75, 70, 98, 77, 99, 106, 90, 90, 48, 43, 57, 118, 102, 102, 57, 81, 90, 72, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "a7ca851e4a459e091ff0e864d15d0ce595d93c9cf70fbcb7f8de5ac8" + "'", str12, "a7ca851e4a459e091ff0e864d15d0ce595d93c9cf70fbcb7f8de5ac8");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -71, -20, 113, -13, 85, 125, -85, -105, -45, 25, -6, 7, 28, -4, -54, 26, 118, -50, 96, 126, -92, 117, 32, 53, 51, -80, -85, -69, -86, 103, -30]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "04757d4fa902aaf10b68a038a265fedc637220bdc9a751747bbb6e3882f24078" + "'", str3, "04757d4fa902aaf10b68a038a265fedc637220bdc9a751747bbb6e3882f24078");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        boolean boolean5 = caverphone0.isCaverphoneEqual("$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/", "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.apache.commons.codec.binary.Base16 base16_6 = new org.apache.commons.codec.binary.Base16();
        boolean boolean8 = base16_6.isInAlphabet("AAAAAAA");
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray14, false);
        byte[] byteArray18 = org.apache.commons.codec.digest.Blake3.hash(byteArray14);
        java.lang.String str19 = base16_6.encodeAsString(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = caverphone0.encode((java.lang.Object) base16_6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0A01640101" + "'", str17, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068" + "'", str19, "3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = bCodec2.decode("78fdcba5ae892b088edbc0748cc2e854ff72cc2a6ea008870b1da380");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_9 = new org.apache.commons.codec.binary.Base16();
        boolean boolean11 = base16_9.isInAlphabet("AAAAAAA");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray15);
        boolean boolean20 = base16_9.isInAlphabet(byteArray15, true);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, byteArray15);
        java.io.OutputStream outputStream22 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream23 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream22);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec27 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray33, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray33);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray33);
        java.lang.Object obj40 = quotedPrintableCodec27.decode((java.lang.Object) byteArray33);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream41 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream23, true, 1, byteArray33);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray15, byteArray33);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream22);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str36, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AAAAAAA" + "'", str37, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str38, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str39, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str42, "9b9e60058fae476c9ee6ef8fc698d89e");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = uRLCodec1.decode("84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: hi!");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.String str2 = org.apache.commons.codec.digest.UnixCrypt.crypt("SHA-512/256", "D0");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "D0v/W1E2gHFqo" + "'", str2, "D0v/W1E2gHFqo");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_1.reset();
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer6 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest4, byteBuffer6);
        char[] charArray9 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, true);
        byte[] byteArray10 = hex3.decode(byteBuffer6);
        xXHash32_1.update(byteBuffer6);
        char[] charArray13 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, false);
        org.apache.commons.codec.language.Soundex soundex14 = new org.apache.commons.codec.language.Soundex(charArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = soundex14.soundex("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The character is not mapped: A (index=0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1757052779);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32_0.update(byteArray4, 1650246903, 104729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1650246903 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d" + "'", str5, "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, inputStream6);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream8 = new org.apache.commons.codec.binary.Base64InputStream(inputStream6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream8);
        byte[] byteArray13 = base64InputStream8.readNBytes((int) ' ');
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream8);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = base64InputStream8.skip((long) (-237789309));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative skip length: -237789309");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str7, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str9, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str10, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.lang.String str2 = uRLCodec1.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = uRLCodec1.encode("$1$Zio6Xtdu$dLf9ZKkJAqnhOMStTXq2z.");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: hi!");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str2 = uRLCodec1.getEncoding();
        java.lang.String str3 = uRLCodec1.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = uRLCodec1.decode("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str2, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str3, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("SHA-512/256");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = daitchMokotoffSoundex1.encode((java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "400000" + "'", str3, "400000");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("$6$tBQnUuQH$lAsNrD8WHXXUnmqz4CRY0rrSs.Ffg6okMj2NX85jP7wPdmD7SBwp6zn2zDazGBXOdJfV/6.fxR8AlyOzvJqyT.");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "33f35cc7f403bc6e099d0dbb155bb819ad161ac336487426ebc6bae8aee9d952f7baaba8cb8bc20a0cc3bbce2631b4d9d5ec4f18ce723777659d7ca2d79c982f" + "'", str1, "33f35cc7f403bc6e099d0dbb155bb819ad161ac336487426ebc6bae8aee9d952f7baaba8cb8bc20a0cc3bbce2631b4d9d5ec4f18ce723777659d7ca2d79c982f");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec10 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray16);
        java.lang.Object obj23 = quotedPrintableCodec10.decode((java.lang.Object) byteArray16);
        org.apache.commons.codec.digest.HmacUtils hmacUtils24 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray16);
        byte[] byteArray26 = hmacUtils24.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.nio.ByteBuffer byteBuffer27 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = hmacUtils24.hmac(byteBuffer27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AAAAAAA" + "'", str20, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str21, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str22, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-12, 93, -49, 17, -103, 67, 92, -1, -23, 2, -103, 20, 20, 31, -14, -34, 8, 44, -47, -108, 7, -93, 58, -124, -99, -107, -50, -35]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("SA11111111", "33f35cc7f403bc6e099d0dbb155bb819ad161ac336487426ebc6bae8aee9d952f7baaba8cb8bc20a0cc3bbce2631b4d9d5ec4f18ce723777659d7ca2d79c982f");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "5abb39f3e99feb9ffe62ddfa5f1464a2" + "'", str2, "5abb39f3e99feb9ffe62ddfa5f1464a2");
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = digestUtils1.digestAsHex(file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((-1621933077), byteArray9, false);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("org.apache.commons.codec.EncoderException", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        boolean boolean20 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray19);
        java.lang.Object obj22 = base32_16.decode((java.lang.Object) byteArray19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[123, -52, -70, 4, 44, 20, -30, 19, -98, -42, -48, -37, 77, -68, 121, -20, -49, 120, 18, 38, -52, -102, -127, -67, 33, -121, -42, -83, 103, -35, 39, 28, -18, -18, 120, 25, -67, 95, -87, -2, -79, -14, -112, -12, 40, -32, -21, 124]");
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        java.nio.charset.Charset charset6 = org.apache.commons.codec.Charsets.toCharset(charset5);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("SHA-512/256");
        java.lang.String str5 = daitchMokotoffSoundex1.encode("SHA-512/224");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "400000" + "'", str3, "400000");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "400000" + "'", str5, "400000");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet4 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap5 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType3, languageSet4);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, languageSet6);
        boolean boolean8 = languageSet6.isEmpty();
        org.apache.commons.codec.language.bm.NameType nameType9 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang10 = org.apache.commons.codec.language.bm.Lang.instance(nameType9);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet12 = lang10.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet14 = lang10.guessLanguages("400000");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = languageSet6.restrictTo(languageSet14);
        org.apache.commons.codec.language.bm.NameType nameType16 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang17 = org.apache.commons.codec.language.bm.Lang.instance(nameType16);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet19 = lang17.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet21 = lang17.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet22 = languageSet14.restrictTo(languageSet21);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + nameType9 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType9.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang10);
        org.junit.Assert.assertNotNull(languageSet12);
        org.junit.Assert.assertNotNull(languageSet14);
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertTrue("'" + nameType16 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType16.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang17);
        org.junit.Assert.assertNotNull(languageSet19);
        org.junit.Assert.assertNotNull(languageSet21);
        org.junit.Assert.assertNotNull(languageSet22);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md2Hex("54d7107aa24bc36b8e80134b8e4ea34c0185bf226a305b9511a3711173b8f450e7494952770ec663d90fe5f906df8f27");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "17207b2d8b87ec9aedf1009a455bb097" + "'", str1, "17207b2d8b87ec9aedf1009a455bb097");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        java.util.Random random4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray3, random4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray35 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer34);
        java.lang.String str36 = hmacUtils32.hmacHex(byteBuffer34);
        java.nio.charset.Charset charset37 = null;
        java.nio.charset.Charset charset38 = org.apache.commons.codec.Charsets.toCharset(charset37);
        org.apache.commons.codec.binary.Hex hex39 = new org.apache.commons.codec.binary.Hex(charset38);
        java.lang.String str40 = hex39.toString();
        java.util.BitSet bitSet41 = null;
        byte[] byteArray43 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray44 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet41, byteArray43);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        java.lang.String str47 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray43);
        byte[] byteArray48 = hex39.decode(byteArray43);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms49 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet50 = null;
        byte[] byteArray52 = new byte[] { (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet50, byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray53);
        javax.crypto.Mac mac55 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms49, byteArray54);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray61);
        java.lang.String str64 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray61, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        java.lang.String str66 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray61);
        java.lang.String str67 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray61);
        javax.crypto.Mac mac68 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms49, byteArray61);
        org.apache.commons.codec.binary.Base32 base32_70 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet71 = null;
        byte[] byteArray73 = new byte[] { (byte) 100 };
        byte[] byteArray74 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet71, byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray74);
        boolean boolean77 = base32_70.isInAlphabet(byteArray75, false);
        byte[] byteArray79 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str80 = base32_70.encodeAsString(byteArray79);
        org.apache.commons.codec.digest.HmacUtils hmacUtils81 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms49, byteArray79);
        java.nio.ByteBuffer byteBuffer83 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray84 = hmacUtils81.hmac(byteBuffer83);
        byte[] byteArray85 = hex39.decode(byteBuffer83);
        java.lang.String str86 = hmacUtils32.hmacHex(byteBuffer83);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str36, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str45, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms49 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms49.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str62, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str64, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "AAAAAAA" + "'", str65, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str66, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str67, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac68);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[100]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ABUAA2IAEE======" + "'", str80, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str86, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("074144668286427481268138212338282381323183123");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 074144668286427481268138212338282381323183123");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder1 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder1.setRuleType(ruleType2);
        org.apache.commons.codec.language.bm.RuleType ruleType4 = beiderMorseEncoder1.getRuleType();
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine7 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType4, true, (-488200341));
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder8 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType9 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder8.setRuleType(ruleType9);
        org.apache.commons.codec.language.bm.NameType nameType11 = beiderMorseEncoder8.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType12 = beiderMorseEncoder8.getRuleType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap14 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType12, "TFK");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for ash, exact, TFK.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType9 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType9.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType11 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType11.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType12 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType12.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream6 = new org.apache.commons.codec.binary.Base16InputStream(inputStream2, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = matchRatingApproachEncoder0.encode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.BCodec bCodec1 = new org.apache.commons.codec.net.BCodec("99448658175a0534e08dbca1fe67b58231a53eec");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 99448658175a0534e08dbca1fe67b58231a53eec");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray11);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-114, -115, -104, 71, -74, -67, 25, -117, -79, -104, 13, -77, 52, 101, -98, -106, -95, -65, 61, -69, 92, 86, 54, -116, 111, -85, -26, -10, -75, 97, 35, 39, -112, -29, -76, 12, 29, 79, -75, 10, 25, -61, 73, -79, 11, -36, 105, 80]");
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest3);
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest3);
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = digestUtils5.digestAsHex(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        int int1 = org.apache.commons.codec.digest.MurmurHash3.hash32("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1708909655 + "'", int1 == 1708909655);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        java.lang.String str20 = quotedPrintableCodec1.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5", "UTF-8");
        java.lang.String str22 = quotedPrintableCodec1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = quotedPrintableCodec1.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str20, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException" + "'", str22, "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream20);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray14, inputStream20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = org.apache.commons.codec.binary.StringUtils.newString(byteArray14, "SHA-224");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: SHA-224: java.io.UnsupportedEncodingException: SHA-224");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str24, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md5Hex("FFFFFF");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "f59b7efafd800e27b47a488d30615c73" + "'", str1, "f59b7efafd800e27b47a488d30615c73");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str32 = base32_22.encodeAsString(byteArray31);
        org.apache.commons.codec.digest.HmacUtils hmacUtils33 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray31);
        byte[] byteArray36 = org.apache.commons.codec.digest.Blake3.hash(byteArray31);
        java.util.Random random38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray31, "", random38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ABUAA2IAEE======" + "'", str32, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AGgAaQAh" + "'", str35, "AGgAaQAh");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-109, 30, 44, 58, -110, 32, -39, -92, 34, 89, 28, 51, 14, 79, 56, -106, 78, 48, 108, -71, 59, -27, 104, -43, 113, 73, 24, 122, -51, 22, -106, -120]");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.apache.commons.codec.digest.DigestUtils digestUtils0 = new org.apache.commons.codec.digest.DigestUtils();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str32 = base32_22.encodeAsString(byteArray31);
        org.apache.commons.codec.digest.HmacUtils hmacUtils33 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray31);
        java.nio.ByteBuffer byteBuffer35 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray36 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer35);
        java.lang.String str37 = hmacUtils33.hmacHex(byteBuffer35);
        char[] charArray39 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer35, false);
        java.lang.String str40 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray41 = digestUtils0.digest(byteBuffer35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ABUAA2IAEE======" + "'", str32, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str37, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream4 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1, false);
        int int5 = base16InputStream4.available();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_17 = new org.apache.commons.codec.binary.Base16();
        boolean boolean19 = base16_17.isInAlphabet("AAAAAAA");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str25 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray23, true);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray23);
        boolean boolean28 = base16_17.isInAlphabet(byteArray23, true);
        byte[] byteArray29 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray13, byteArray23);
        java.io.OutputStream outputStream30 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream31 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream30);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream49 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream31, true, 1, byteArray41);
        java.lang.String str50 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray23, byteArray41);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64InputStream base64InputStream52 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base16InputStream4, true, (int) (byte) 100, byteArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [xg???????Dq??J?????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ffffff" + "'", str25, "ffffff");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str26, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream30);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str50, "9b9e60058fae476c9ee6ef8fc698d89e");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 103, 14, -120, -87, -62, -57, 17, 18, 68, 113, -46, -14, 74, -115, -68, -116, -27, -37, -87]");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        boolean boolean10 = base32_1.isInAlphabet((byte) 100);
        byte[] byteArray12 = base32_1.decode("");
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        boolean boolean16 = base32_1.isInAlphabet(byteArray14, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        java.lang.String str4 = beiderMorseEncoder0.encode("07839f3f2ce2a945c4636a0413fb83722520cb1d91a271db0609aa223b2c0edb");
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ftSeakafpkbdadbapkedp|ftSeakafpkbdadbaptsedp|ftSeakafptsbdadbapkedp|ftSeakafptsbdadbaptsedp|ftseakafpkbdadbapkedp|ftseakafpkbdadbaptsedp|ftseakafptsbdadbapkedp|ftseakafptsbdadbaptsedp|ftseatsafpkbdadbapkedp|ftseatsafpkbdadbaptsedp|ftseatsafptsbdadbapkedp|ftseatsafptsbdadbaptsedp|vdZeadZafbdZbdadbabdZedp|vdZeadZafbdZbdadbapkedp|vdZeadZafpkbdadbabdZedp|vdZeadZafpkbdadbapkedp|vdZeakafbdZbdadbabdZedp|vdZeakafbdZbdadbapkedp|vdZeakafpkbdadbabdZedp|vdZeakafpkbdadbapkedp" + "'", str4, "ftSeakafpkbdadbapkedp|ftSeakafpkbdadbaptsedp|ftSeakafptsbdadbapkedp|ftSeakafptsbdadbaptsedp|ftseakafpkbdadbapkedp|ftseakafpkbdadbaptsedp|ftseakafptsbdadbapkedp|ftseakafptsbdadbaptsedp|ftseatsafpkbdadbapkedp|ftseatsafpkbdadbaptsedp|ftseatsafptsbdadbapkedp|ftseatsafptsbdadbaptsedp|vdZeadZafbdZbdadbabdZedp|vdZeadZafbdZbdadbapkedp|vdZeadZafpkbdadbabdZedp|vdZeadZafpkbdadbapkedp|vdZeakafbdZbdadbabdZedp|vdZeakafbdZbdadbapkedp|vdZeakafpkbdadbabdZedp|vdZeakafpkbdadbapkedp");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        qCodec3.setEncodeBlanks(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = qCodec3.encode("", "ABUAA2IAEE======");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ABUAA2IAEE======");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertNotNull(charset5);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        byte[] byteArray16 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray5, byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, true);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-16, 37, -57, -63, -51, -9, 13, 75, 7, 89, 117, -3, 104, -53, 16, -29]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, 47, 47, 47, 13, 10]");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray2, (int) '-', 64, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 45 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = percentCodec0.encode((java.lang.Object) "c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type java.lang.String cannot be Percent encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("UTF-16");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages languages2 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType0);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languages2);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.apache.commons.codec.Resources resources0 = new org.apache.commons.codec.Resources();
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("EFDBAC");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: EFDBAC");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer13 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest11, byteBuffer13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest10, byteBuffer13);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "f677e3ff7fcad6865eb5c8b2cafaf3fc9ff5058b" + "'", str16, "f677e3ff7fcad6865eb5c8b2cafaf3fc9ff5058b");
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        char[] charArray3 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex5 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        org.apache.commons.codec.language.Soundex soundex6 = new org.apache.commons.codec.language.Soundex(charArray3);
        java.util.BitSet bitSet7 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms8 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray13);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray20, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray20);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray20);
        javax.crypto.Mac mac27 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray20);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str39 = base32_29.encodeAsString(byteArray38);
        org.apache.commons.codec.digest.HmacUtils hmacUtils40 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms8, byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet7, byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = soundex6.encode((java.lang.Object) bitSet7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Soundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, #, a]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms8 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms8.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str21, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str23, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AAAAAAA" + "'", str24, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str25, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str26, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ABUAA2IAEE======" + "'", str39, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        java.lang.String str11 = uRLCodec1.getDefaultCharset();
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray15);
        byte[] byteArray18 = uRLCodec1.encode(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = uRLCodec1.decode("=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC", "$apr1$1842668b$BrmPcGnFkkmpTlWyJGSdY/");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: $apr1$1842668b$BrmPcGnFkkmpTlWyJGSdY/");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str17, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha("AAAAAAA");
        java.lang.String str12 = base16_7.encodeToString(byteArray11);
        boolean boolean14 = base16_7.isInAlphabet("8238313338121281838113");
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-7, -78, -122, -99, -26, -52, -110, 38, -71, -112, -40, 63, -128, 94, -56, 57, 21, -52, -100, -123]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "F9B2869DE6CC9226B990D83F805EC83915CC9C85" + "'", str12, "F9B2869DE6CC9226B990D83F805EC83915CC9C85");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream7 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) baseNCodecOutputStream4, false);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray3 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList4 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4, phonemeArray3);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList6 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4);
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList7 = phonemeList6.getPhonemes();
        org.apache.commons.codec.language.bm.Rule rule8 = new org.apache.commons.codec.language.bm.Rule("9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9", "6brp3ObrccRZI", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList6);
        org.junit.Assert.assertNotNull(phonemeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(phonemeList7);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fc94cb6cd9283825761d40bde79160fc8a359e8cf670dcb3d544cb0713095ce8" + "'", str1, "fc94cb6cd9283825761d40bde79160fc8a359e8cf670dcb3d544cb0713095ce8");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str2 = uRLCodec1.getEncoding();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream4);
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream8);
        byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray7, inputStream8);
        byte[] byteArray11 = uRLCodec1.encode(byteArray7);
        java.io.OutputStream outputStream12 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_14 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream16 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream12, (org.apache.commons.codec.binary.BaseNCodec) base16_14, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream17 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = uRLCodec1.decode((java.lang.Object) baseNCodecOutputStream16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type org.apache.commons.codec.binary.BaseNCodecOutputStream cannot be URL decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str2, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str9, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, 37, 66, 48, 37, 54, 48, 37, 65, 55, 81, 37, 65, 67, 37, 57, 54, 56, 76, 37, 68, 57, 50, 37, 55, 69, 37, 66, 49, 37, 66, 49, 37, 69, 51, 106, 37, 50, 49, 37, 70, 68, 37, 66, 55, 37, 49, 49, 37, 49, 52, 37, 66, 69, 37, 48, 55, 67, 76, 37, 48, 67, 37, 67, 55, 37, 66, 70, 99, 37, 70, 54, 37, 69, 49, 37, 68, 65, 37, 50, 55, 78, 37, 68, 69, 37, 66, 70, 37, 69, 55, 111, 101, 37, 70, 66, 37, 68, 53, 37, 49, 65, 37, 68, 50, 37, 70, 49, 72, 37, 57, 56, 37, 66, 57, 37, 53, 66]");
        org.junit.Assert.assertNotNull(outputStream12);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        boolean boolean2 = nysiis1.isStrict();
        java.lang.String str4 = nysiis1.nysiis("c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        java.lang.String str6 = nysiis1.nysiis("57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CBDAFA" + "'", str4, "CBDAFA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FDAFAD" + "'", str6, "FDAFAD");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("5424b2ab9ccebb816efd952b70e18b77812c0fddba6b70e1b9dcce77");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "659f68d28b815b89f9f28ae0ad2798e5a63293e6a6955e14dd071e66ef7441b5" + "'", str1, "659f68d28b815b89f9f28ae0ad2798e5a63293e6a6955e14dd071e66ef7441b5");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        byte[] byteArray5 = digestUtils1.digest("c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = digestUtils1.digestAsHex(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[120, -123, 96, -18, -56, -24, 111, 82, -85, 10, -94, -42, 108, 105, -108, -90, 92, 87, 13, -15, 20, 9, -55, 48, 23, -88, 27, 106, 106, -102, 90, -100, -115, -5, -31, 75, -37, -104, 30, -99, -94, 4, 52, -102, 120, -19, -67, -14]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex("000000", "D123");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1d39b7b6097d46bfec94ab93ba5cad5488e66d759f8919dd10c80cc13d46a39fa0bfe924306de0c374aecab97706b204" + "'", str2, "1d39b7b6097d46bfec94ab93ba5cad5488e66d759f8919dd10c80cc13d46a39fa0bfe924306de0c374aecab97706b204");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        boolean boolean5 = caverphone0.isCaverphoneEqual("$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/", "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        boolean boolean8 = caverphone0.isCaverphoneEqual("SA11111111", "b3fab8d26023752d081c315d7cf8c228");
        java.util.BitSet bitSet9 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms10 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        javax.crypto.Mac mac16 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray22);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray22);
        javax.crypto.Mac mac29 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray22);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet32 = null;
        byte[] byteArray34 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet32, byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray35);
        boolean boolean38 = base32_31.isInAlphabet(byteArray36, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str41 = base32_31.encodeAsString(byteArray40);
        org.apache.commons.codec.digest.HmacUtils hmacUtils42 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms10, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet9, byteArray40);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.digest.Blake3.hash(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = caverphone0.encode((java.lang.Object) byteArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms10 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms10.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str27, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str28, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ABUAA2IAEE======" + "'", str41, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AGgAaQAh" + "'", str44, "AGgAaQAh");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-109, 30, 44, 58, -110, 32, -39, -92, 34, 89, 28, 51, 14, 79, 56, -106, 78, 48, 108, -71, 59, -27, 104, -43, 113, 73, 24, 122, -51, 22, -106, -120]");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_16;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray23);
        byte[] byteArray26 = uRLCodec19.decode(byteArray23);
        byte[] byteArray27 = null;
        byte[] byteArray28 = uRLCodec19.decode(byteArray27);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_38 = new org.apache.commons.codec.binary.Base16();
        boolean boolean40 = base16_38.isInAlphabet("AAAAAAA");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str46 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray44, true);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray44);
        boolean boolean49 = base16_38.isInAlphabet(byteArray44, true);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray34, byteArray44);
        byte[] byteArray51 = uRLCodec19.encode(byteArray50);
        byte[] byteArray52 = quotedPrintableCodec1.decode(byteArray51);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms53 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet54 = null;
        byte[] byteArray56 = new byte[] { (byte) 100 };
        byte[] byteArray57 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet54, byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray57);
        javax.crypto.Mac mac59 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms53, byteArray58);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_66 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray65);
        javax.crypto.Mac mac67 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac59, byteArray65);
        java.security.MessageDigest messageDigest68 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream69 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest70 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest68, inputStream69);
        java.lang.String str71 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream69);
        byte[] byteArray72 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream69);
        javax.crypto.Mac mac73 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac67, inputStream69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = quotedPrintableCodec1.decode((java.lang.Object) mac73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type javax.crypto.Mac cannot be quoted-printable decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str25, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ffffff" + "'", str46, "ffffff");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str47, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms53 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms53.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac67);
        org.junit.Assert.assertNotNull(messageDigest68);
        org.junit.Assert.assertEquals(messageDigest68.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream69);
        org.junit.Assert.assertNotNull(messageDigest70);
        org.junit.Assert.assertEquals(messageDigest70.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str71, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac73);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str2 = uRLCodec1.getEncoding();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream4);
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream8);
        byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray7, inputStream8);
        byte[] byteArray11 = uRLCodec1.encode(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = uRLCodec1.encode("$1$gZoeR5UT$2kaO.c8VwZ0lc4psybO5P/", "99448658175a0534e08dbca1fe67b58231a53eec");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 99448658175a0534e08dbca1fe67b58231a53eec");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str2, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str9, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, 37, 66, 48, 37, 54, 48, 37, 65, 55, 81, 37, 65, 67, 37, 57, 54, 56, 76, 37, 68, 57, 50, 37, 55, 69, 37, 66, 49, 37, 66, 49, 37, 69, 51, 106, 37, 50, 49, 37, 70, 68, 37, 66, 55, 37, 49, 49, 37, 49, 52, 37, 66, 69, 37, 48, 55, 67, 76, 37, 48, 67, 37, 67, 55, 37, 66, 70, 99, 37, 70, 54, 37, 69, 49, 37, 68, 65, 37, 50, 55, 78, 37, 68, 69, 37, 66, 70, 37, 69, 55, 111, 101, 37, 70, 66, 37, 68, 53, 37, 49, 65, 37, 68, 50, 37, 70, 49, 72, 37, 57, 56, 37, 66, 57, 37, 53, 66]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = qCodec5.decode("2a19f01583f35572ae07990bd23d0b8062321b36");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[37, 66, 55, 37, 68, 54, 37, 51, 69, 37, 51, 68, 37, 48, 66, 37, 65, 52, 37, 69, 67, 48, 37, 68, 57, 37, 66, 50, 37, 56, 51, 112, 37, 48, 68, 37, 69, 56, 37, 49, 51, 37, 67, 68, 37, 49, 49, 37, 66, 54, 37, 48, 67, 37, 49, 56, 37, 57, 66, 103, 37, 67, 66, 105, 74, 88, 37, 57, 68, 37, 57, 50]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==" + "'", str4, "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ub7d6\u3e3d\u0ba4\uec30\ufffd\u0de8\u13cd\u11b6\u0c18\u9b67\ucb69\u4a58\u9d92" + "'", str5, "\ub7d6\u3e3d\u0ba4\uec30\ufffd\u0de8\u13cd\u11b6\u0c18\u9b67\ucb69\u4a58\u9d92");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        java.nio.charset.Charset charset7 = bCodec2.getCharset();
        boolean boolean8 = bCodec2.isStrictDecoding();
        java.lang.String str10 = bCodec2.encode("");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "=?UTF-8?B??=" + "'", str10, "=?UTF-8?B??=");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream12 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream13 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream12);
        base16OutputStream12.eof();
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset("d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md2Hex("$6$D5MbQO/U$G04bgWM6O9qwY.HBx93TRiq9s/I8tv0OgyDmQARAuiXo6hkq6fbNEWrrppGhWkljYuuiWw8NgTpP6JB9Vtwxr0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "c82c8ab22f3a62af4973396a2ad745b3" + "'", str1, "c82c8ab22f3a62af4973396a2ad745b3");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[116, 103, 116, 102, 98, 105, 107, 102, 124, 116, 103, 116, 102, 98, 105, 107, 102, 105, 124, 116, 103, 116, 102, 98, 105, 116, 115, 102, 105, 124, 116, 103, 116, 102, 98, 105, 122, 102, 105, 124, 116, 103, 116, 102, 98, 107, 102, 124, 116, 103, 116, 102, 98, 107, 102, 105, 124, 116, 103, 116, 102, 98, 116, 115, 102, 105, 124, 116, 103, 116, 102, 98, 122, 102, 105, 124, 116, 103, 116, 102, 118, 105, 107, 102, 105, 124, 116, 103, 116, 102, 118, 107, 102, 105, 124, 116, 115, 116, 102, 98, 105, 107, 102, 105, 124, 116, 115, 116, 102, 98, 105, 116, 115, 102, 105, 124, 116, 115, 116, 102, 98, 107, 102, 105, 124, 116, 115, 116, 102, 98, 116, 115, 102, 105, 124, 122, 116, 102, 98, 105, 107, 102, 105, 124, 122, 116, 102, 98, 105, 122, 102, 105, 124, 122, 116, 102, 98, 107, 102, 105, 124, 122, 116, 102, 98, 122, 102, 105]");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("6brp3ObrccRZI");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("414141414141413d0d0a");
        java.lang.String str3 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray1, true);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 52, 0, 49, 0, 52, 0, 49, 0, 52, 0, 49, 0, 52, 0, 49, 0, 52, 0, 49, 0, 52, 0, 49, 0, 52, 0, 49, 0, 51, 0, 100, 0, 48, 0, 100, 0, 48, 0, 97]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "00340031003400310034003100340031003400310034003100340031003300640030006400300061" + "'", str3, "00340031003400310034003100340031003400310034003100340031003300640030006400300061");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("68f99a2f771f3830e1487a6aad4372fc28e3736eee4ed16fd02cf1bd47fe6224745ac0321f687d153a44c9875e5e53a2");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-50, 43, 19, 54, 108, -117, -116, -100, 70, -71, 119, 111, -17, -35, 14, 80, -102, -118, -101, -15, -11, 70, -119, 81, 103, -90, 66, -126]");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.soundex("CABAFD");
        java.lang.String str5 = daitchMokotoffSoundex1.encode("=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "477300|577300" + "'", str3, "477300|577300");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "037783" + "'", str5, "037783");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray16, false);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray10, byteArray16);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray16);
        java.lang.String str23 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -119, -47, 37, 54, -32, -26, 90, 13, 102, -125, -62, -17, -82, -42, 127, 17, 79, -93, -47, -47, -37, -83, 106, -71, 42, 49, 70]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0A01640101" + "'", str19, "0A01640101");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str20, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05" + "'", str22, "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ptz9RTz3KVvV2" + "'", str23, "Ptz9RTz3KVvV2");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        int int12 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 686869806 + "'", int12 == 686869806);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex("TPTPFFFT11");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "8faf9e1686025ab6e3a7291539a02ee986d71f1191788f35d811848e8d2944659e070f0889d29c5042b2909cbe4a0df1" + "'", str1, "8faf9e1686025ab6e3a7291539a02ee986d71f1191788f35d811848e8d2944659e070f0889d29c5042b2909cbe4a0df1");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset1);
        java.lang.String str3 = bCodec2.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = bCodec2.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a", "FDAFAD");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: FDAFAD");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        java.lang.String str20 = quotedPrintableCodec1.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5", "UTF-8");
        java.lang.String str22 = quotedPrintableCodec1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = quotedPrintableCodec1.decode("$1$FivXNt8U$ItIalCUBqAE1stNT0FzGp/", "\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??????????????????????????????????q???????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str20, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException" + "'", str22, "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray12 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray8, (-1310417787), 1254840318, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1310417787 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, 7, -128, 127, 37, -48, -33, -71, 29, -42, -96, -117, 8, -80, -32, -61, 37, 9, 40, 65, 47, 81, -15, -124, 18, 47, 12, 90]");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        java.lang.String str20 = quotedPrintableCodec1.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5", "UTF-8");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms21 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = quotedPrintableCodec1.encode((java.lang.Object) hmacAlgorithms21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type org.apache.commons.codec.digest.HmacAlgorithms cannot be quoted-printable encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str20, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms21 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms21.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.codec.digest.MurmurHash2.hash64("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c", (int) (byte) 0, (-679748572));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin 0, end -679748572, length 31");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        byte[] byteArray0 = null;
        java.lang.String str1 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex4 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.md5((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        java.lang.String str6 = metaphone0.encode("=?UTF-8?Q?=00=00=00=00=00?=");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms7 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils9 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms7, "UTF-8");
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str22 = org.apache.commons.codec.digest.Crypt.crypt(byteArray15, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray15, byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray15);
        java.io.InputStream inputStream33 = java.io.InputStream.nullInputStream();
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream33);
        byte[] byteArray35 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray15, inputStream33);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream33);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream38 = new org.apache.commons.codec.binary.Base16InputStream(inputStream33, false);
        java.lang.String str39 = hmacUtils9.hmacHex(inputStream33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = metaphone0.encode((java.lang.Object) hmacUtils9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Metaphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TFK" + "'", str6, "TFK");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms7 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms7.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0Acd8L3u4hVxI" + "'", str22, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str31, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str34, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "a9580121fcdd7da9ddacbfbdf9d824ea" + "'", str39, "a9580121fcdd7da9ddacbfbdf9d824ea");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str6 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray4, true);
        org.apache.commons.codec.CodecPolicy codecPolicy8 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray4, true, codecPolicy8);
        byte[] byteArray11 = base64_9.decode("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        java.io.OutputStream outputStream12 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream13 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream12);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream15 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream13, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream17 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream13, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_20 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray24);
        xXHash32_20.update(byteArray26, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream30 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream13, true, 760066800, byteArray26);
        base64OutputStream13.close();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = base64_9.decode((java.lang.Object) base64OutputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base-N decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ffffff" + "'", str6, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy8 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy8.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[113, -1, 55, 123, 93, -7, -19, -25, -97, 111, -58, -35, 127, 94, 120, -37, -50, 116, 119, -82, -99, -13, 77, 59, 119, -83, -76, 123, -115, 57, -47, -66, 123, -41, -105, 92, -13, 119, -8, 107, -35, -75, 119, 126, -100, 123, -41, 30, -29, -73, 116, 119, 93, -36, -27, -33, 57, 127, 102, -12, 125, -1, 55, -41, -57, 118, -13, -66, -34, 121, -51, -97, -21, 118, -3, -33, 86, -35, -29, -66, 53, -19, -81, 53, 107, -99, -4, -33, 110, -38, 127, -35, -69, 117, -83, -34]");
        org.junit.Assert.assertNotNull(outputStream12);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, 49, 49, 48, 48, 49, 48, 48]");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator5 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = refinedSoundex1.encode((java.lang.Object) soundex4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to RefinedSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CgFkAQE" + "'", str13, "CgFkAQE");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-103, 68, -122, 88, 23, 90, 5, 52, -32, -115, -68, -95, -2, 103, -75, -126, 49, -91, 62, -20]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        java.lang.String str3 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HmacMD5" + "'", str3, "HmacMD5");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("I6ae", "org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4a316d6b85fc640d658462cf6dad8e7c" + "'", str2, "4a316d6b85fc640d658462cf6dad8e7c");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        java.io.OutputStream outputStream50 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream51 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream50);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream53 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream55 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_58 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet59 = null;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        byte[] byteArray62 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet59, byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray62);
        xXHash32_58.update(byteArray64, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream68 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true, 760066800, byteArray64);
        java.security.MessageDigest messageDigest69 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream70 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest71 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest69, inputStream70);
        java.lang.String str72 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream70);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream70);
        java.lang.String str74 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray64, inputStream70);
        java.lang.String str75 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray41, inputStream70);
        byte[] byteArray76 = org.apache.commons.codec.digest.DigestUtils.sha512_224(inputStream70);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(outputStream50);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest69);
        org.junit.Assert.assertEquals(messageDigest69.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(messageDigest71);
        org.junit.Assert.assertEquals(messageDigest71.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str72, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str74, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str75, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        long[] longArray10 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray4, (int) (short) 100, 436110042, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 0]");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.apache.commons.codec.digest.XXHash32 xXHash32_2 = new org.apache.commons.codec.digest.XXHash32((int) (byte) 100);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C3 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C3.reset();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        pureJavaCrc32C3.update(byteArray7, (-690116322), (-1612190696));
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        pureJavaCrc32C3.update(byteArray14);
        xXHash32_2.update(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((-1612190696), byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [?h?i?!]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream18 = new org.apache.commons.codec.binary.Base64InputStream(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray8, (java.io.InputStream) base64InputStream18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex((java.io.InputStream) base64InputStream18);
        long long22 = base64InputStream18.skip((long) 64);
        base64InputStream18.mark(1787795390);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_224("2ef0725975afd171e9cb76444b4969c3");
        // The following exception was thrown during execution in test generation
        try {
            int int29 = base64InputStream18.read(byteArray26, 104729, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str20, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-22, 25, -68, 123, 124, 49, 96, -107, 73, -63, -41, -9, 106, 4, -18, -69, -20, 47, -104, 76, 98, -111, -81, 92, 107, -65, -96, -67]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        blake3_13.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("ISO-8859-1", (int) (short) -1, 1254840318);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin -1, end 1254840317, length 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream6 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray5);
        org.apache.commons.codec.net.PercentCodec percentCodec11 = new org.apache.commons.codec.net.PercentCodec(byteArray5, false);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest12, inputStream13);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream16 = new org.apache.commons.codec.binary.Base16InputStream(inputStream13, false);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = percentCodec11.decode((java.lang.Object) base64InputStream17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type org.apache.commons.codec.binary.Base64InputStream cannot be Percent decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-113, 122, 46, 35, 4, 122, -60, 14, -44, 43, 101, 109, 74, -35, -124, -125, -17, 20, -70, 35, 38, -12, -60, 75, -124, 14, -124, -108, 60, 43, -6, -92]");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        java.util.Random random8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray5, "01360240043788015936020505", "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a", random8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 01360240043788015936020505");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = beiderMorseEncoder0.getRuleType();
        boolean boolean5 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy9 = base64_8.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16(false, codecPolicy9);
        boolean boolean12 = base16_10.isInAlphabet((byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = beiderMorseEncoder0.encode((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: BeiderMorseEncoder encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + codecPolicy9 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy9.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.codec.digest.DigestUtils digestUtils0 = new org.apache.commons.codec.digest.DigestUtils();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3, true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str18 = org.apache.commons.codec.digest.Crypt.crypt(byteArray11, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray11, byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray11);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream29);
        byte[] byteArray31 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray11, inputStream29);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, inputStream29);
        org.apache.commons.codec.digest.Blake3 blake3_34 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray35 = digestUtils0.digest(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[61, 56, 50, 61, 48, 65, 61, 69, 66, 61, 67, 56, 61, 68, 49, 61, 69, 52, 44, 61, 67, 57, 61, 49, 53, 61, 70, 49, 61, 48, 48, 121, 61, 56, 52, 61, 69, 49, 61, 68, 55, 61, 69, 50, 61, 49, 55, 37, 61, 49, 49, 42, 61, 51, 68, 61, 68, 51, 71, 61, 48, 52, 61, 68, 52, 61, 57, 68, 61, 67, 57, 61, 66, 56]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0Acd8L3u4hVxI" + "'", str18, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str27, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str30, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5" + "'", str33, "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertNotNull(blake3_34);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (28) than the specified maximum size of 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md5("48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32(1971526657, byteArray2, false, (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [?Wv?Y?Zc?uK??^?]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-81, 87, 118, -68, 89, 15, 90, 99, -57, -120, 117, 75, -66, -24, 94, -119]");
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.io.OutputStream outputStream0 = null;
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream4.write(byteArray7);
        base64OutputStream4.write((int) '4');
        base64OutputStream4.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream13 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream4);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.io.InputStream inputStream28 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream28, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream31, false, false, codecPolicy34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray22, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream37 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream13, true, false, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream38 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream39 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base16OutputStream38);
        byte[] byteArray41 = org.apache.commons.codec.digest.DigestUtils.sha3_224("2ef0725975afd171e9cb76444b4969c3");
        // The following exception was thrown during execution in test generation
        try {
            base16OutputStream38.write(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid octet in encoded value: -22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-22, 25, -68, 123, 124, 49, 96, -107, 73, -63, -41, -9, 106, 4, -18, -69, -20, 47, -104, 76, 98, -111, -81, 92, 107, -65, -96, -67]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream2 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream4);
        byte[] byteArray9 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.io.InputStream inputStream11 = java.io.InputStream.nullInputStream();
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray10, inputStream11);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(inputStream11);
        byte[] byteArray14 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray7, inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = base32InputStream2.read(byteArray7, 1, (-237789309));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str12, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" + "'", str13, "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[24, -9, 96, -66, 48, -95, 61, 42, 79, -23, -106, -65, 91, 112, -88, -79, -109, 89, 79, -16, 55, -111, 109, -68, 55, -73, -115, -32, 12, 14, -56, -52, 47, -70, -109, 106, 107, 114, 82, 106, 115, 121, -120, -10, 5, -93, 48, -128]");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.codec.net.BCodec bCodec0 = new org.apache.commons.codec.net.BCodec();
        java.nio.charset.Charset charset1 = bCodec0.getCharset();
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        int int1 = org.apache.commons.codec.digest.MurmurHash2.hash32("TPKTFPKFPF");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1137768543 + "'", int1 == 1137768543);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("d7bXONth0AIyo");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19" + "'", str1, "63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.NameType nameType10 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang11 = org.apache.commons.codec.language.bm.Lang.instance(nameType10);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet13 = lang11.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = lang11.guessLanguages("400000");
        java.lang.String str16 = languageSet15.getAny();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = phoneticEngine4.encode("8350e5a3e24c153df2275c9f80692773", languageSet15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang11);
        org.junit.Assert.assertNotNull(languageSet13);
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "greek" + "'", str16, "greek");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, false);
        byte[] byteArray19 = org.apache.commons.codec.digest.Blake3.hash(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray19, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.PercentCodec percentCodec24 = new org.apache.commons.codec.net.PercentCodec(byteArray19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -68");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0A01640101" + "'", str18, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90" + "'", str20, "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "3d53bcbc17025716163721aecfb8c50c914899464fa2549d94cae78c239c5068");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "3d53bcbc17025716163721aecfb8c50c914899464fa2549d94cae78c239c5068");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[3, d, 5, 3, b, c, b, c, 1, 7, 0, 2, 5, 7, 1, 6, 1, 6, 3, 7, 2, 1, a, e, c, f, b, 8, c, 5, 0, c, 9, 1, 4, 8, 9, 9, 4, 6, 4, f, a, 2, 5, 4, 9, d, 9, 4, c, a, e, 7, 8, c, 2, 3, 9, c, 5, 0, 6, 8]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("SHA-512/256");
        java.lang.String[] strArray28 = new java.lang.String[] { "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", "79d351ca4f5462d2eb5f2595220e0863", "$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.", "UTF-8", "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "CABAFD", "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.", "2ef0725975afd171e9cb76444b4969c3", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1", "ALL", "$6$G6GWDhAR$4Fuin7zgOWL9QptRqMT6rZ4PF.leUwW7/wmllLQljiOqJL3c5jKiXNyOLl3loO4IJbTgJg6ZU5Hhm8yT37Uad1", "16fd67a8bb44f961f07f53972686acb3", "F", "d", "c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da", "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4", "any", "AGgAaQAh", "2ad36d9d51748e827af1acab7568d5e2", "8350e5a3e24c153df2275c9f80692773", "83d93cffb05d8435fffd7cd6e362a48eefb66689" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet31 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet29);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet32 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = daitchMokotoffSoundex1.encode((java.lang.Object) strSet29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "400000" + "'", str3, "400000");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(languageSet31);
        org.junit.Assert.assertNotNull(languageSet32);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        int int27 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray25);
        byte[] byteArray28 = quotedPrintableCodec1.encode(byteArray25);
        java.nio.charset.Charset charset30 = org.apache.commons.codec.Charsets.US_ASCII;
        java.lang.String str31 = quotedPrintableCodec1.encode("$1$W/jMtuf7$UGQw9DE1K6Iok/.1r5v0T/", charset30);
        java.lang.String str32 = quotedPrintableCodec1.getDefaultCharset();
        java.util.BitSet bitSet33 = null;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray39);
        java.lang.String str46 = org.apache.commons.codec.digest.Crypt.crypt(byteArray39, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec48 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet49 = null;
        byte[] byteArray51 = new byte[] { (byte) 100 };
        byte[] byteArray52 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet49, byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray52);
        byte[] byteArray54 = uRLCodec48.encode(byteArray53);
        java.lang.String str55 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray39, byteArray53);
        byte[] byteArray56 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray39);
        byte[] byteArray57 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet33, byteArray56);
        javax.crypto.Mac mac58 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = quotedPrintableCodec1.decode((java.lang.Object) mac58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type javax.crypto.Mac cannot be quoted-printable decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-690116322) + "'", int27 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$1$W/jMtuf7$UGQw9DE1K6Iok/.1r5v0T/" + "'", str31, "$1$W/jMtuf7$UGQw9DE1K6Iok/.1r5v0T/");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTF-8" + "'", str32, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AAAAAAA" + "'", str43, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str44, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0Acd8L3u4hVxI" + "'", str46, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str55, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(mac58);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream1 = org.apache.commons.codec.Resources.getInputStream("AAAAAAA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: AAAAAAA");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        org.apache.commons.codec.digest.DigestUtils digestUtils37 = new org.apache.commons.codec.digest.DigestUtils(messageDigest36);
        java.io.RandomAccessFile randomAccessFile38 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest36, randomAccessFile38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream1);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str4, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("PKFPKFKTKF");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "33d13b80afa35b65372c55f03977305eb5625afe39ef95e46a4f81117c28c5226f4a27c0966b35419b9d6ef2dfb6655ff80d041462abddf7e3b5f29f7573795e" + "'", str1, "33d13b80afa35b65372c55f03977305eb5625afe39ef95e46a4f81117c28c5226f4a27c0966b35419b9d6ef2dfb6655ff80d041462abddf7e3b5f29f7573795e");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        java.lang.String str2 = caverphone2_0.encode("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d");
        boolean boolean5 = caverphone2_0.isEncodeEqual("d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "BFKF");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PFTPTKPKTP" + "'", str2, "PFTPTKPKTP");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("dfdda15d09ab512f6f012e71da796e6d22ff94eede59f4b13bbe9064", (-1877720325), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin -1877720325, end -1877720315, length 56");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.codec.language.bm.NameType nameType1 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType1);
        org.apache.commons.codec.language.bm.Languages languages3 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType1);
        org.apache.commons.codec.language.bm.Lang lang4 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages3);
        java.util.Set<java.lang.String> strSet5 = languages3.getLanguages();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from(strSet5);
        org.junit.Assert.assertTrue("'" + nameType1 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType1.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertNotNull(languages3);
// flaky:         org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(languageSet6);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.io.OutputStream outputStream0 = null;
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream4.write(byteArray7);
        base64OutputStream4.write((int) '4');
        base64OutputStream4.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream13 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream4);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.io.InputStream inputStream28 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream28, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream31, false, false, codecPolicy34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray22, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream37 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream13, true, false, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream38 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream39 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base16OutputStream38);
        byte[] byteArray41 = org.apache.commons.codec.digest.DigestUtils.sha3_224("2ef0725975afd171e9cb76444b4969c3");
        // The following exception was thrown during execution in test generation
        try {
            base16OutputStream38.write(byteArray41, (int) (byte) 100, (-2042891860));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-22, 25, -68, 123, 124, 49, 96, -107, 73, -63, -41, -9, 106, 4, -18, -69, -20, 47, -104, 76, 98, -111, -81, 92, 107, -65, -96, -67]");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1);
        pureJavaCrc32_0.update((-237789309));
        long long5 = pureJavaCrc32_0.getValue();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 745795876L + "'", long5 == 745795876L);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str6 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray4, true);
        org.apache.commons.codec.CodecPolicy codecPolicy8 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray4, true, codecPolicy8);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ffffff" + "'", str6, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy8 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy8.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(mac10);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.US_ASCII;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0, false);
        java.lang.String str3 = quotedPrintableCodec2.getDefaultCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException(throwable0);
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException();
        decoderException1.addSuppressed((java.lang.Throwable) encoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException(throwable8);
        org.apache.commons.codec.EncoderException encoderException10 = new org.apache.commons.codec.EncoderException();
        decoderException9.addSuppressed((java.lang.Throwable) encoderException10);
        encoderException6.addSuppressed((java.lang.Throwable) encoderException10);
        java.lang.Throwable[] throwableArray13 = encoderException6.getSuppressed();
        encoderException2.addSuppressed((java.lang.Throwable) encoderException6);
        org.apache.commons.codec.EncoderException encoderException15 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException2);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream1);
        byte[] byteArray5 = inputStream1.readNBytes(629192958);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.lang.String str1 = hmacAlgorithms0.getName();
        java.lang.String str2 = hmacAlgorithms0.toString();
        java.lang.String str3 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HmacSHA224" + "'", str1, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HmacSHA224" + "'", str2, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HmacSHA224" + "'", str3, "HmacSHA224");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator2 = new org.apache.commons.codec.StringEncoderComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = uRLCodec1.encode((java.lang.Object) stringEncoderComparator2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type org.apache.commons.codec.StringEncoderComparator cannot be URL encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_16BE;
        org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec(charset0);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_384(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = qCodec1.decode((java.lang.Object) byteArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type [B cannot be decoded using Q codec");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-45, -89, 35, 75, 94, 127, 27, -117, -42, 88, 2, 110, -85, -28, -29, 39, -112, 99, -7, 57, -49, -36, 84, -88, 61, -60, -51, 60, 85, -13, 83, 4, 65, -86, -120, 108, -5, -106, 46, -16, 65, 83, 126, 40, 90, 61, -34, 122]");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_16BE;
        org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec(charset0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = qCodec1.encode("UTF-16BE", "980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 65, 0, 66, 0, 85, 0, 65, 0, 65, 0, 50, 0, 73, 0, 65, 0, 69, 0, 69, 0, 61, 0, 61, 0, 61, 0, 61, 0, 61, 0, 61]");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le("dfdda15d09ab512f6f012e71da796e6d22ff94eede59f4b13bbe9064");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100, 0, 102, 0, 100, 0, 100, 0, 97, 0, 49, 0, 53, 0, 100, 0, 48, 0, 57, 0, 97, 0, 98, 0, 53, 0, 49, 0, 50, 0, 102, 0, 54, 0, 102, 0, 48, 0, 49, 0, 50, 0, 101, 0, 55, 0, 49, 0, 100, 0, 97, 0, 55, 0, 57, 0, 54, 0, 101, 0, 54, 0, 100, 0, 50, 0, 50, 0, 102, 0, 102, 0, 57, 0, 52, 0, 101, 0, 101, 0, 100, 0, 101, 0, 53, 0, 57, 0, 102, 0, 52, 0, 98, 0, 49, 0, 51, 0, 98, 0, 98, 0, 101, 0, 57, 0, 48, 0, 54, 0, 52, 0]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 99, 0, 54, 0, 54, 0, 57, 0, 57, 0, 99, 0, 55, 0, 97, 0, 97, 0, 52, 0, 99, 0, 52, 0, 56, 0, 57, 0, 57, 0, 97, 0, 55, 0, 56, 0, 51, 0, 56, 0, 98, 0, 54, 0, 52, 0, 55, 0, 50, 0, 98, 0, 54, 0, 97, 0, 101, 0, 55, 0, 55, 0, 49, 0, 57, 0, 101, 0, 100, 0, 97, 0, 51, 0, 48, 0, 54, 0, 102, 0, 99, 0, 51, 0, 100, 0, 101, 0, 50, 0, 97, 0, 98, 0, 101, 0, 102, 0, 100, 0, 56, 0, 49, 0, 52, 0, 100, 0, 53, 0, 57, 0, 48, 0, 57, 0, 99, 0, 49, 0, 55, 0, 56, 0, 100, 0, 97]");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(3254930474243051180L, (long) 1971526657);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1332152471) + "'", int2 == (-1332152471));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_512Digest();
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream3 = new org.apache.commons.codec.binary.Base16InputStream(inputStream0, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream7 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream3, false, false, codecPolicy6);
        boolean boolean8 = base16InputStream3.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base16InputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (short) 1, (long) 4, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1886572454) + "'", int3 == (-1886572454));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = beiderMorseEncoder0.getRuleType();
        java.lang.String str6 = beiderMorseEncoder0.encode("663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "pkfabekfgdSfk|pkfabekfgdSvdS|pkfabekfgtkfk|pkfabekfgtkfts|pkfabekfgtkvdS|pkfabekfgtsfk|pkfabekfgtsfts|pkfabekftstkfk|pkfabekftstkfts|pkfabekftstsfk|pkfabekftstsfts|pkfabekvdZdSfk|pkfabekvdZdSvdS|pkfabekvdZtkfk|pkfabekvdZtkvdS|pkfabetsfgtkfk|pkfabetsfgtkfts|pkfabetsfgtsfk|pkfabetsfgtsfts|pkfabetsftstkfk" + "'", str6, "pkfabekfgdSfk|pkfabekfgdSvdS|pkfabekfgtkfk|pkfabekfgtkfts|pkfabekfgtkvdS|pkfabekfgtsfk|pkfabekfgtsfts|pkfabekftstkfk|pkfabekftstkfts|pkfabekftstsfk|pkfabekftstsfts|pkfabekvdZdSfk|pkfabekvdZdSvdS|pkfabekvdZtkfk|pkfabekvdZtkvdS|pkfabetsfgtkfk|pkfabetsfgtkfts|pkfabetsfgtsfk|pkfabetsfgtsfts|pkfabetsftstkfk");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("21rlBaSszAatQ", true);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray17, false);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray11, byteArray17);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        java.lang.String str23 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray6, byteArray17);
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray17);
        org.apache.commons.codec.CodecPolicy codecPolicy26 = org.apache.commons.codec.CodecPolicy.STRICT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((-690116322), byteArray24, false, codecPolicy26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, -119, -47, 37, 54, -32, -26, 90, 13, 102, -125, -62, -17, -82, -42, 127, 17, 79, -93, -47, -47, -37, -83, 106, -71, 42, 49, 70]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0A01640101" + "'", str20, "0A01640101");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str21, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05" + "'", str23, "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 100, 1, 1]");
        org.junit.Assert.assertTrue("'" + codecPolicy26 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy26.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec("08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("KPNF", "$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-113, 29, 42, -100, -20, 100, 6, -105, 105, 90, 34, -104, -95, -40, -7, -27, 91, 3, -110, 124, -91, 80, 25, -33, 20, -114, -60, -67, -91, -44, 86, 33, 48, 105, -67, 43, 113, -40, -11, 26, 66, 2, -62, -64, -43, 68, 100, 87]");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex("b0b6da82b46309e1e119f858e80ad49c7701bdbc28507c02d231bb64da5efe16");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635" + "'", str1, "ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.Languages languages5 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType3);
        beiderMorseEncoder0.setNameType(nameType3);
        org.apache.commons.codec.language.bm.NameType nameType7 = beiderMorseEncoder0.getNameType();
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(languages5);
        org.junit.Assert.assertTrue("'" + nameType7 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType7.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("=?UTF-8?B?U0hBLTIyNA==?=", 1797466354, (-1310417787));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin 1797466354, end 487048567, length 24");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        boolean boolean8 = rule4.patternAndContextMatches((java.lang.CharSequence) "=?UTF-8?B?U0hBLTIyNA==?=", 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = rule4.patternAndContextMatches((java.lang.CharSequence) "", (-488200341));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Can not match pattern at negative indexes");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(1787795390);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException(throwable2);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException();
        decoderException3.addSuppressed((java.lang.Throwable) encoderException4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException(throwable6);
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException();
        decoderException7.addSuppressed((java.lang.Throwable) encoderException8);
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        org.apache.commons.codec.DecoderException decoderException11 = new org.apache.commons.codec.DecoderException("d41d8cd98f00b204e9800998ecf8427e", (java.lang.Throwable) encoderException4);
        org.apache.commons.codec.EncoderException encoderException12 = new org.apache.commons.codec.EncoderException("UTF-16LE", (java.lang.Throwable) decoderException11);
        org.apache.commons.codec.EncoderException encoderException13 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException12);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest9, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base32_17.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream3, true, (int) (byte) 0, byteArray15, codecPolicy18);
        base32InputStream19.mark((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            base32InputStream19.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream12 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, true);
        boolean boolean13 = baseNCodecOutputStream9.isStrictDecoding();
        baseNCodecOutputStream9.close();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.lang.String str1 = org.apache.commons.codec.digest.UnixCrypt.crypt("1d39b7b6097d46bfec94ab93ba5cad5488e66d759f8919dd10c80cc13d46a39fa0bfe924306de0c374aecab97706b204");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UJu5TZOxzSFNU" + "'", str1, "UJu5TZOxzSFNU");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.QCodec qCodec4 = new org.apache.commons.codec.net.QCodec(charset0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = qCodec4.decode("AGgAaQAh");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.Soundex soundex3 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator4 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex3);
        org.apache.commons.codec.language.bm.NameType nameType6 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType7 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType6, ruleType7, languageSet8);
        int int10 = stringEncoderComparator4.compare((java.lang.Object) "0Acd8L3u4hVxI", (java.lang.Object) ruleType7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine12 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        java.lang.Object obj15 = quotedPrintableCodec2.decode((java.lang.Object) byteArray8);
        java.lang.String str16 = quotedPrintableCodec2.getDefaultCharset();
        byte[] byteArray18 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray19, inputStream20);
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream22);
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray19, inputStream22);
        java.lang.Object obj26 = quotedPrintableCodec2.encode((java.lang.Object) byteArray19);
        byte[] byteArray27 = percentCodec0.encode(byteArray19);
        org.apache.commons.codec.binary.BinaryCodec binaryCodec28 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray31 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray30, false);
        byte[] byteArray34 = binaryCodec28.encode(byteArray30);
        byte[] byteArray35 = percentCodec0.encode(byteArray34);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str21, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str23, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str24, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str33, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern0 = org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;
        boolean boolean2 = rPattern0.isMatch((java.lang.CharSequence) "d41d8cd98f00b204e9800998ecf8427e");
        boolean boolean4 = rPattern0.isMatch((java.lang.CharSequence) "ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
        org.junit.Assert.assertNotNull(rPattern0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        boolean boolean1 = org.apache.commons.codec.digest.HmacUtils.isAvailable("FRLMFK");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((-8357321264474462205L));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-7347677189253444503L) + "'", long1 == (-7347677189253444503L));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("BFKF");
        java.lang.String str2 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-49, -99, -62, 41, -92, -55, 40, 19, -29, 48, 14, 72, 64, -110, -103, 94, -111, -33, -31, 69]");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "o92wQ6/Y2DoOA" + "'", str2, "o92wQ6/Y2DoOA");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_384(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-45, -89, 35, 75, 94, 127, 27, -117, -42, 88, 2, 110, -85, -28, -29, 39, -112, 99, -7, 57, -49, -36, 84, -88, 61, -60, -51, 60, 85, -13, 83, 4, 65, -86, -120, 108, -5, -106, 46, -16, 65, 83, 126, 40, 90, 61, -34, 122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649" + "'", str12, "65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        org.apache.commons.codec.digest.HmacUtils hmacUtils9 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream10 = null;
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy15 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream16 = new org.apache.commons.codec.binary.Base32InputStream(inputStream10, true, (int) (byte) 0, byteArray14, codecPolicy15);
        char[] charArray17 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray14);
        java.lang.String str18 = hmacUtils9.hmacHex(byteArray14);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream20);
        java.lang.String str24 = hmacUtils9.hmacHex(inputStream20);
        org.apache.commons.codec.digest.XXHash32 xXHash32_26 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_26.reset();
        org.apache.commons.codec.binary.Hex hex28 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest29 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer31 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest32 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest29, byteBuffer31);
        char[] charArray34 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer31, true);
        byte[] byteArray35 = hex28.decode(byteBuffer31);
        xXHash32_26.update(byteBuffer31);
        byte[] byteArray37 = hmacUtils9.hmac(byteBuffer31);
        byte[] byteArray38 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray37);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy15 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy15.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str18, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str24, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(messageDigest29);
        org.junit.Assert.assertEquals(messageDigest29.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(messageDigest32);
        org.junit.Assert.assertEquals(messageDigest32.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[61, 57, 66, 61, 68, 69, 61, 67, 55, 61, 65, 67, 61, 69, 57, 61, 66, 52, 61, 68, 66, 61, 56, 68, 67, 87, 61, 57, 67, 61, 65, 68, 61, 66, 68, 9, 61, 69, 65, 96, 61, 56, 65, 61, 49, 53, 61, 69, 68, 105, 126, 61, 69, 69, 61, 57, 54, 61, 49, 53, 61, 56, 66, 61, 49, 57, 61, 67, 67, 61, 67, 57]");
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32C0.update(byteArray11, 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 96 out of bounds for length 96");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 51, 97, 55, 50, 51, 52, 98, 53, 101, 55, 102, 49, 98, 56, 98, 100, 54, 53, 56, 48, 50, 54, 101, 97, 98, 101, 52, 101, 51, 50, 55, 57, 48, 54, 51, 102, 57, 51, 57, 99, 102, 100, 99, 53, 52, 97, 56, 51, 100, 99, 52, 99, 100, 51, 99, 53, 53, 102, 51, 53, 51, 48, 52, 52, 49, 97, 97, 56, 56, 54, 99, 102, 98, 57, 54, 50, 101, 102, 48, 52, 49, 53, 51, 55, 101, 50, 56, 53, 97, 51, 100, 100, 101, 55, 97]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = beiderMorseEncoder0.encode((java.lang.Object) (-237789309));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: BeiderMorseEncoder encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.QCodec qCodec4 = new org.apache.commons.codec.net.QCodec(charset0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = qCodec4.encode("rules", "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray1, 0, (-237789309), 1137768543);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -237789310 out of bounds for length 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-53, 95, 109, -66, 85, 45, 81, 21, -63, 93, -75, 124, 99, 39, 72, 48, 30, -39, -43, -112]");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages languages4 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType2);
        org.apache.commons.codec.language.bm.Lang lang5 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages4);
        java.util.Set<java.lang.String> strSet6 = languages4.getLanguages();
        java.util.Set<java.lang.String> strSet7 = languages4.getLanguages();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Lang lang8 = org.apache.commons.codec.language.bm.Lang.loadFromResource("0a01640101", languages4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: 0a01640101");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languages4);
// flaky:         org.junit.Assert.assertNotNull(lang5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex0 = new org.apache.commons.codec.language.DaitchMokotoffSoundex();
        java.lang.String str2 = daitchMokotoffSoundex0.encode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "095744" + "'", str2, "095744");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32 incrementalHash32_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32();
        int int1 = incrementalHash32_0.end();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.codec.language.Soundex soundex0 = org.apache.commons.codec.language.Soundex.US_ENGLISH;
        soundex0.setMaxLength((-1612190696));
        java.nio.charset.Charset charset3 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy4 = null;
        org.apache.commons.codec.net.BCodec bCodec5 = new org.apache.commons.codec.net.BCodec(charset3, codecPolicy4);
        org.apache.commons.codec.net.QCodec qCodec6 = new org.apache.commons.codec.net.QCodec(charset3);
        java.nio.charset.Charset charset7 = qCodec6.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = soundex0.encode((java.lang.Object) qCodec6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Soundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(soundex0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset7);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec9 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        java.lang.Object obj22 = quotedPrintableCodec9.decode((java.lang.Object) byteArray15);
        java.lang.String str23 = quotedPrintableCodec9.getDefaultCharset();
        java.lang.String str24 = quotedPrintableCodec9.getDefaultCharset();
        java.lang.String str26 = quotedPrintableCodec9.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec28 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet29 = null;
        byte[] byteArray31 = new byte[] { (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet29, byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray32);
        byte[] byteArray34 = uRLCodec28.encode(byteArray33);
        int int35 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray33);
        byte[] byteArray36 = quotedPrintableCodec9.encode(byteArray33);
        long long37 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray33);
        java.io.OutputStream outputStream38 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream41 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream38, false, false);
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy46 = base32_45.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream47 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream38, false, true, codecPolicy46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32OutputStream base32OutputStream48 = new org.apache.commons.codec.binary.Base32OutputStream(outputStream0, true, (int) (byte) 10, byteArray33, codecPolicy46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [Fh?v????????YG)???S??&??$;?RWt?A:??x?_??????????qJ?????t???????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTF-8" + "'", str23, "UTF-8");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTF-8" + "'", str24, "UTF-8");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str26, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-690116322) + "'", int35 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 7774503706986060106L + "'", long37 == 7774503706986060106L);
        org.junit.Assert.assertTrue("'" + codecPolicy46 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy46.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("$1$R3.5of0S$M7WoGc.xSqd9c0i/foPQj.");
        javax.crypto.Mac mac2 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[88, 114, -24, 108, 65, -14, -95, 113, 93, 88, 110, -1, 120, -22, 98, 100, 125, 123, 84, -47, -91, 110, -86, -27, -79, 53, -34, -128, 15, -124, 84, -74]");
        org.junit.Assert.assertNotNull(mac2);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream4.write(byteArray7);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream9 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[102, 102, 102, 102, 102, 102]");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        qCodec3.setEncodeBlanks(true);
        java.lang.String str7 = qCodec3.encode("\000\000\000\000\000");
        java.nio.charset.Charset charset9 = org.apache.commons.codec.Charsets.UTF_16LE;
        java.lang.String str10 = qCodec3.encode("\000\ufffd", charset9);
        org.apache.commons.codec.net.QCodec qCodec11 = new org.apache.commons.codec.net.QCodec(charset9);
        java.lang.String str13 = qCodec11.encode("CBDAFA");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "=?UTF-8?Q?=00=00=00=00=00?=" + "'", str7, "=?UTF-8?Q?=00=00=00=00=00?=");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "=?UTF-16LE?Q?=00=00=FD=FF?=" + "'", str10, "=?UTF-16LE?Q?=00=00=FD=FF?=");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "=?UTF-16LE?Q?C=00B=00D=00A=00F=00A=00?=" + "'", str13, "=?UTF-16LE?Q?C=00B=00D=00A=00F=00A=00?=");
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_256("f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-16, 81, -83, 119, 37, 79, -68, 109, -109, -92, 94, -46, -15, -95, 6, -50, -49, -10, 115, 84, 74, 11, 70, -116, 79, -76, -33, -60, -84, -127, -110, 103]");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        boolean boolean8 = rule4.patternAndContextMatches((java.lang.CharSequence) "=?UTF-8?B?U0hBLTIyNA==?=", 100);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern9 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern10 = rule4.getLContext();
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(rPattern9);
        org.junit.Assert.assertNotNull(rPattern10);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException(throwable1);
        org.apache.commons.codec.EncoderException encoderException3 = new org.apache.commons.codec.EncoderException();
        decoderException2.addSuppressed((java.lang.Throwable) encoderException3);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException(throwable5);
        org.apache.commons.codec.EncoderException encoderException7 = new org.apache.commons.codec.EncoderException();
        decoderException6.addSuppressed((java.lang.Throwable) encoderException7);
        encoderException3.addSuppressed((java.lang.Throwable) encoderException7);
        org.apache.commons.codec.DecoderException decoderException10 = new org.apache.commons.codec.DecoderException("d41d8cd98f00b204e9800998ecf8427e", (java.lang.Throwable) encoderException3);
        org.apache.commons.codec.EncoderException encoderException11 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException3);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream20);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray14, inputStream20);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray14, byteArray26);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str24, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-2, -1, 0, 99, 0, 48, 0, 99, 0, 51, 0, 100, 0, 97, 0, 99, 0, 54, 0, 50, 0, 100, 0, 55, 0, 51, 0, 53, 0, 52, 0, 54, 0, 98, 0, 102, 0, 52, 0, 52, 0, 49, 0, 54, 0, 57, 0, 56, 0, 49, 0, 99, 0, 51, 0, 101, 0, 102, 0, 102, 0, 54, 0, 53, 0, 55, 0, 51, 0, 48, 0, 100, 0, 52, 0, 57, 0, 48, 0, 99, 0, 97, 0, 56, 0, 50, 0, 52, 0, 53, 0, 97, 0, 55, 0, 102, 0, 53, 0, 54, 0, 52, 0, 55, 0, 48, 0, 55, 0, 48, 0, 97, 0, 49, 0, 50, 0, 54, 0, 97, 0, 49, 0, 53, 0, 100, 0, 97, 0, 54, 0, 51, 0, 50, 0, 53, 0, 97, 0, 54, 0, 102, 0, 51, 0, 100, 0, 102, 0, 100, 0, 56, 0, 51, 0, 56, 0, 52, 0, 99, 0, 102, 0, 52, 0, 100, 0, 101, 0, 51, 0, 101, 0, 49, 0, 101, 0, 102, 0, 51, 0, 53, 0, 98, 0, 53, 0, 53, 0, 101, 0, 51, 0, 97]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "b3b51a915103729794e8b4d6d7b33e53" + "'", str27, "b3b51a915103729794e8b4d6d7b33e53");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream5);
        // The following exception was thrown during execution in test generation
        try {
            base64InputStream5.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray6, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray6);
        byte[] byteArray24 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray30);
        java.lang.String str37 = org.apache.commons.codec.digest.Crypt.crypt(byteArray30, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec39 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet40 = null;
        byte[] byteArray42 = new byte[] { (byte) 100 };
        byte[] byteArray43 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet40, byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray43);
        byte[] byteArray45 = uRLCodec39.encode(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray30, byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray30);
        java.io.InputStream inputStream48 = java.io.InputStream.nullInputStream();
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream48);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, inputStream48);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream48);
        byte[] byteArray52 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray23, inputStream48);
        java.lang.String str53 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray52);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0Acd8L3u4hVxI" + "'", str13, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str22, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AAAAAAA" + "'", str34, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str35, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0Acd8L3u4hVxI" + "'", str37, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str46, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str49, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "$apr1$eUNsnZv8$RvYjHU7rk0wEMEn09Rguz." + "'", str53, "$apr1$eUNsnZv8$RvYjHU7rk0wEMEn09Rguz.");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16();
        boolean boolean14 = base16_12.isInAlphabet("AAAAAAA");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str20 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, true);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray18);
        boolean boolean23 = base16_12.isInAlphabet(byteArray18, true);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray8, byteArray18);
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray1, byteArray18);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -71, -20, 113, -13, 85, 125, -85, -105, -45, 25, -6, 7, 28, -4, -54, 26, 118, -50, 96, 126, -92, 117, 32, 53, 51, -80, -85, -69, -86, 103, -30]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ffffff" + "'", str20, "ffffff");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str21, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "4304ae58307f209e0235ba9cfe90913ce5c2822ebff2eea1e4a4232b2cb091bd749c5b2b9a60934fe7a781ab453262653fce318fda150f2cfa0d2a2f4b434310" + "'", str25, "4304ae58307f209e0235ba9cfe90913ce5c2822ebff2eea1e4a4232b2cb091bd749c5b2b9a60934fe7a781ab453262653fce318fda150f2cfa0d2a2f4b434310");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("8f198685d9e52d7a95c867c39c611cfbfe2ff43aa855b443bd8be24f265b3c00c71ecd3e49ba9ce9a5d16ea9db521edb");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 56, 0, 102, 0, 49, 0, 57, 0, 56, 0, 54, 0, 56, 0, 53, 0, 100, 0, 57, 0, 101, 0, 53, 0, 50, 0, 100, 0, 55, 0, 97, 0, 57, 0, 53, 0, 99, 0, 56, 0, 54, 0, 55, 0, 99, 0, 51, 0, 57, 0, 99, 0, 54, 0, 49, 0, 49, 0, 99, 0, 102, 0, 98, 0, 102, 0, 101, 0, 50, 0, 102, 0, 102, 0, 52, 0, 51, 0, 97, 0, 97, 0, 56, 0, 53, 0, 53, 0, 98, 0, 52, 0, 52, 0, 51, 0, 98, 0, 100, 0, 56, 0, 98, 0, 101, 0, 50, 0, 52, 0, 102, 0, 50, 0, 54, 0, 53, 0, 98, 0, 51, 0, 99, 0, 48, 0, 48, 0, 99, 0, 55, 0, 49, 0, 101, 0, 99, 0, 100, 0, 51, 0, 101, 0, 52, 0, 57, 0, 98, 0, 97, 0, 57, 0, 99, 0, 101, 0, 57, 0, 97, 0, 53, 0, 100, 0, 49, 0, 54, 0, 101, 0, 97, 0, 57, 0, 100, 0, 98, 0, 53, 0, 50, 0, 49, 0, 101, 0, 100, 0, 98]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        java.lang.String str6 = metaphone0.encode("=?UTF-8?Q?=00=00=00=00=00?=");
        boolean boolean9 = metaphone0.isMetaphoneEqual("8238313338121281838113", "$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
        boolean boolean12 = metaphone0.isMetaphoneEqual("0Acd8L3u4hVxI", "$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TFK" + "'", str6, "TFK");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md5Hex("=?UTF-16LE?Q?=00=00=FD=FF?=");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "a2bffb73810738b3fb321ad7707a94f4" + "'", str1, "a2bffb73810738b3fb321ad7707a94f4");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.colognePhonetic("$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = colognePhonetic0.encode((java.lang.Object) (-1612190696));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: This method's parameter was expected to be of the type java.lang.String. But actually it was of the type java.lang.Integer.");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1462864445134828448548348552636243541" + "'", str4, "1462864445134828448548348552636243541");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.lang.String str6 = qCodec3.encode("3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?Q?3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068?=" + "'", str6, "=?UTF-8?Q?3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068?=");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType7, languageSet8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme10 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray4);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(mac8);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("org.apache.commons.codec.EncoderException", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        boolean boolean3 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[123, -52, -70, 4, 44, 20, -30, 19, -98, -42, -48, -37, 77, -68, 121, -20, -49, 120, 18, 38, -52, -102, -127, -67, 33, -121, -42, -83, 103, -35, 39, 28, -18, -18, 120, 25, -67, 95, -87, -2, -79, -14, -112, -12, 40, -32, -21, 124]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "6722041b5bd60a223b7f15e124b4b4ff2f92e560ca7d1f744e0c670185e23179" + "'", str5, "6722041b5bd60a223b7f15e124b4b4ff2f92e560ca7d1f744e0c670185e23179");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        java.nio.charset.Charset charset7 = bCodec2.getCharset();
        boolean boolean8 = bCodec2.isStrictDecoding();
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex10 = new org.apache.commons.codec.language.RefinedSoundex("074144668286427481268138212338282381323183123");
        int int13 = refinedSoundex10.difference("bcce83622206284126038d877e184c2a80a54c5eae29897917b64bcda570c827dd2e7d0f195a31c1018fe15da1f37d47a1affa6445ab0f7d2fc7ebc0c64e7b46", "0Acd8L3u4hVxI");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = bCodec2.encode((java.lang.Object) int13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type java.lang.Integer cannot be encoded using BCodec");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream5);
        byte[] byteArray10 = inputStream5.readNBytes((int) ' ');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str6, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str7, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str8, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$8dWU1PBl$KBmfVpNhGotb/lbYG.5BQ0" + "'", str28, "$apr1$8dWU1PBl$KBmfVpNhGotb/lbYG.5BQ0");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.String str1 = org.apache.commons.codec.digest.Crypt.crypt("UTF-16BE");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$6$tNEwHCOF$sNWeimC6OyYB5Kjbm1rlax0.c4d2om5PPuKWQuwAGDbFSIdsScYB9ByS.Ic0qUPcLzEMUvUfY8/qdruZdekFl0" + "'", str1, "$6$tNEwHCOF$sNWeimC6OyYB5Kjbm1rlax0.c4d2om5PPuKWQuwAGDbFSIdsScYB9ByS.Ic0qUPcLzEMUvUfY8/qdruZdekFl0");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        java.lang.String str35 = org.apache.commons.codec.digest.Crypt.crypt(byteArray11);
        byte[] byteArray37 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray38, inputStream39);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream41 = new org.apache.commons.codec.binary.Base64InputStream(inputStream39);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream41);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream41);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream41);
        long[] longArray45 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray44);
        java.lang.String str47 = org.apache.commons.codec.binary.StringUtils.newStringUtf16(byteArray46);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "$6$s8iHQ185$z0CmseigesSi8eFeCyyYpfQR.njS.yhevt9eMSUTbOZZBwCCCqXMDwZtxe2hRKJ1Aj/K8tVLdoSyjQf6jKE9A/" + "'", str35, "$6$s8iHQ185$z0CmseigesSi8eFeCyyYpfQR.njS.yhevt9eMSUTbOZZBwCCCqXMDwZtxe2hRKJ1Aj/K8tVLdoSyjQf6jKE9A/");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str40, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str42, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str43, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-5925524524431757357, 6663107183063643322]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[76, -126, 93, 13, 120, -112, 70, -42, 110, 94, -107, 52, -62, 72, -113, 35, 86, 22, 108, 59, -29, -53, -67, -23, -32, 1, 2, -51, -114, 109, -19, 121, 4, 103, -98, 41, -75, 88, 48, 21, 26, -52, -67, -100, 45, 76, -44, -4]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u4c82\u5d0d\u7890\u46d6\u6e5e\u9534\uc248\u8f23\u5616\u6c3b\ue3cb\ubde9\ue001\u02cd\u8e6d\ued79\u0467\u9e29\ub558\u3015\u1acc\ubd9c\u2d4c\ud4fc" + "'", str47, "\u4c82\u5d0d\u7890\u46d6\u6e5e\u9534\uc248\u8f23\u5616\u6c3b\ue3cb\ubde9\ue001\u02cd\u8e6d\ued79\u0467\u9e29\ub558\u3015\u1acc\ubd9c\u2d4c\ud4fc");
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C3 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C3.reset();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        pureJavaCrc32C3.update(byteArray7, (-690116322), (-1612190696));
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        pureJavaCrc32C3.update(byteArray14);
        org.apache.commons.codec.digest.HmacUtils hmacUtils17 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray14);
        boolean boolean18 = org.apache.commons.codec.digest.HmacUtils.isAvailable(hmacAlgorithms0);
        java.lang.String str19 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "HmacMD5" + "'", str19, "HmacMD5");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUnchecked("63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19", "4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b: java.io.UnsupportedEncodingException: 4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset8 = bCodec2.getCharset();
        java.nio.charset.Charset charset10 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str11 = bCodec2.encode("$6$G6GWDhAR$4Fuin7zgOWL9QptRqMT6rZ4PF.leUwW7/wmllLQljiOqJL3c5jKiXNyOLl3loO4IJbTgJg6ZU5Hhm8yT37Uad1", charset10);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "=?UTF-8?B?JDYkRzZHV0RoQVIkNEZ1aW43emdPV0w5UXB0UnFNVDZyWjRQRi5sZVV3Vzcvd21sbExRbGppT3FKTDNjNWpLaVhOeU9MbDNsb080SUpiVGdKZzZaVTVIaG04eVQzN1VhZDE=?=" + "'", str11, "=?UTF-8?B?JDYkRzZHV0RoQVIkNEZ1aW43emdPV0w5UXB0UnFNVDZyWjRQRi5sZVV3Vzcvd21sbExRbGppT3FKTDNjNWpLaVhOeU9MbDNsb080SUpiVGdKZzZaVTVIaG04eVQzN1VhZDE=?=");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.codec.binary.StringUtils stringUtils0 = new org.apache.commons.codec.binary.StringUtils();
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str2 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec4 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray10, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray10);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray10);
        java.lang.Object obj17 = quotedPrintableCodec4.decode((java.lang.Object) byteArray10);
        java.lang.String str18 = quotedPrintableCodec4.getDefaultCharset();
        byte[] byteArray20 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.lang.String str23 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray21, inputStream22);
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream24);
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray21, inputStream24);
        java.lang.Object obj28 = quotedPrintableCodec4.encode((java.lang.Object) byteArray21);
        byte[] byteArray29 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray1, byteArray21);
        char[] charArray36 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex37 = new org.apache.commons.codec.language.Soundex(charArray36);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex38 = new org.apache.commons.codec.language.RefinedSoundex(charArray36);
        org.apache.commons.codec.language.Soundex soundex39 = new org.apache.commons.codec.language.Soundex(charArray36);
        org.apache.commons.codec.binary.Hex.encodeHex(byteArray1, 1137768543, (-1886572454), true, charArray36, (-1534769883));
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str2, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str13, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AAAAAAA" + "'", str14, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str15, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str16, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTF-8" + "'", str18, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str23, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str25, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str26, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str27, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-32, -125, 65, -45, -33, 45, 125, -70, -116, -68, 122, -100, 107, -91, 14, -34]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[a, #, a]");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList3 = null;
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList4 = new org.apache.commons.codec.language.bm.Rule.PhonemeList(phonemeList3);
        org.apache.commons.codec.language.bm.Rule rule5 = new org.apache.commons.codec.language.bm.Rule("HmacSHA224", "SHA3-512", "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList4);
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList6 = phonemeList4.getPhonemes();
        org.junit.Assert.assertNull(phonemeList6);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet4 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap5 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType3, languageSet4);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, languageSet6);
        boolean boolean8 = languageSet6.isSingleton();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        java.lang.String str26 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$6$E7eZGjZf$Jqyd.vTGhVRwebrSYS9sFMSY.bZ6C0G9qNcPNqiyrYerzQ4USxHe5IifQhAnED5M8rhf3QGglP3T8IgI3.z68." + "'", str26, "$6$E7eZGjZf$Jqyd.vTGhVRwebrSYS9sFMSY.bZ6C0G9qNcPNqiyrYerzQ4USxHe5IifQhAnED5M8rhf3QGglP3T8IgI3.z68.");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.lang.String str2 = uRLCodec1.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = uRLCodec1.encode("SHA3-224");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: hi!");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream10 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, inputStream10);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream10);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream10);
        byte[] byteArray14 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray6, inputStream10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str12, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[103, -47, 48, -12, -103, -47, -50, -115, -11, 127, 71, 114, -85, -53, -25, -77, -31, 95, 67, -76]");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        char[] charArray13 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.Hex.decodeHex(charArray13);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 1, 0, 0, 0, 1, 1, 16, 1, 0, 0, 0, 0, 1, 0, 0, 16, 16]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.OutputStream outputStream5 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream5, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        baseNCodecOutputStream9.eof();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream14 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream9, (org.apache.commons.codec.binary.BaseNCodec) base16_12, false);
        long long15 = inputStream1.transferTo((java.io.OutputStream) baseNCodecOutputStream14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream1);
        java.lang.String str17 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray16);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(outputStream5);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u03c3\ufffd\ufe3d\ufffd\ufffd\ufffd\007\ufffd\ufffd\005\013W\025\u0703\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\030\u0487\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd>" + "'", str17, "\u03c3\ufffd\ufe3d\ufffd\ufffd\ufffd\007\ufffd\ufffd\005\013W\025\u0703\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\030\u0487\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd>");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1757052779);
        pureJavaCrc32_0.update((int) '4');
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray16, false);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray10, byteArray16);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray16);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray16);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -119, -47, 37, 54, -32, -26, 90, 13, 102, -125, -62, -17, -82, -42, 127, 17, 79, -93, -47, -47, -37, -83, 106, -71, 42, 49, 70]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0A01640101" + "'", str19, "0A01640101");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str20, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05" + "'", str22, "04b2184ec7b363b0638b08207cff8bbf871a661acaf4d9a4e02367ba08a962d1d708e42f44a1aab57aa6f3edf8745a05");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream35);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream37 = new org.apache.commons.codec.binary.Base32InputStream(inputStream35);
        java.lang.String str38 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray11, inputStream35);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(inputStream35);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(inputStream35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str36, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b" + "'", str38, "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str39, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str40, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex("04KqMlApbUYFs");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "410f9e3083fb61704291e52188ef15b99f7a7db5addab258278ed70f0adaea3c" + "'", str1, "410f9e3083fb61704291e52188ef15b99f7a7db5addab258278ed70f0adaea3c");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream0);
        byte[] byteArray3 = inputStream0.readAllBytes();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray3, 76, (-1621933077));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str2, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        long[] longArray1 = org.apache.commons.codec.digest.MurmurHash3.hash128("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[411317788163203144, -8520198561753137443]");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException("SHA-1", (java.lang.Throwable) decoderException2);
        java.lang.String str4 = decoderException3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.codec.DecoderException: SHA-1" + "'", str4, "org.apache.commons.codec.DecoderException: SHA-1");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        long long9 = base16_2.getEncodedLength(byteArray7);
        boolean boolean11 = base16_2.isInAlphabet((byte) 1);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\000\ufffd" + "'", str8, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        doubleMetaphone0.setMaxCodeLen((int) (byte) 100);
        java.lang.String str4 = doubleMetaphone0.doubleMetaphone("I6ae");
        boolean boolean8 = doubleMetaphone0.isDoubleMetaphoneEqual("bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8", "410f9e3083fb61704291e52188ef15b99f7a7db5addab258278ed70f0adaea3c", false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "A" + "'", str4, "A");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        char[] charArray14 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray8, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "0A01640101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "0A01640101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[0, A, 0, 1, 6, 4, 0, 1, 0, 1]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.nio.file.Path path1 = null;
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, path1, openOptionArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(openOptionArray3);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.lang.String str4 = caverphone0.caverphone("f59b7efafd800e27b47a488d30615c73");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TPTPFFFT11" + "'", str2, "TPTPFFFT11");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FPFFTPTK11" + "'", str4, "FPFFTPTK11");
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha256(inputStream16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream16);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111, -71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27, 120, 82, -72, 85]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str22, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.codec.net.QCodec qCodec0 = new org.apache.commons.codec.net.QCodec();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.lang.String str2 = hmacAlgorithms1.getName();
        java.lang.String str3 = hmacAlgorithms1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = qCodec0.encode((java.lang.Object) hmacAlgorithms1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type org.apache.commons.codec.digest.HmacAlgorithms cannot be encoded using Q codec");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HmacSHA224" + "'", str2, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HmacSHA224" + "'", str3, "HmacSHA224");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream3);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.shaHex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str8, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy5 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream6 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, true, (int) (byte) 0, byteArray4, codecPolicy5);
        char[] charArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Hex.decodeHex(charArray7);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray8, inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy5 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy5.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, 17, 0, 16, 0, 16, 1, 17, 1, 1, 1, 1, 16, 17, 16, 1, 0, 16, 1, 16, 17, 16, 0, 17, 17, 1, 0, 0, 17, 16, 1, 1, 1, 16, 17, 16, 1, 17, 17, 16, 16, 16, 1, 1, 1, 17, 16, 1, 16, 16, 0, 16, 0, 1, 1, 0, 0, 0, 16, 0, 16, 0, 1, 16, 16, 0, 0, 17, 0, 0, 1, 1, 0, 1, 16, 1, 0, 1, 16, 16, 0, 1, 0, 16, 17, 17, 0, 1, 16, 16, 1, 17, 16, 16, 17, 17, 1, 1, 17, 16, 1, 0, 17, 0, 0, 0, 17, 16, 17, 1, 17, 1]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        java.lang.String str2 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "$6$rKLOb5zs$K6eMGEnYDmUEHygV2Wnamk.gvBPguGluEH2a6AObQuImzJiyTjvA8vI2nNKAzNbpm5Y2dGz2v1kZLSiKhjlJs1" + "'", str2, "$6$rKLOb5zs$K6eMGEnYDmUEHygV2Wnamk.gvBPguGluEH2a6AObQuImzJiyTjvA8vI2nNKAzNbpm5Y2dGz2v1kZLSiKhjlJs1");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        char[] charArray5 = new char[] { '4', ' ', '4', ' ', '4' };
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex6 = new org.apache.commons.codec.language.RefinedSoundex(charArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = refinedSoundex6.encode("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17959 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4 4 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4 4 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4,  , 4,  , 4]");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray18);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[25, 73, -48, 124, -112, 14, -59, -69, -116, 42, 38, -90, -79, -4, -113, -86, 26, -42, 75, -77, 108, 23, -52, 122, -50, 56, 23, 35, -127, -50, -49, 33, 48, -116, 115, 17, 27, -21, -120, -25, 54, -101, 92, -115, 32, -28, -115, 41]");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2, true);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray10, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray10);
        java.lang.String str17 = org.apache.commons.codec.digest.Crypt.crypt(byteArray10, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        byte[] byteArray25 = uRLCodec19.encode(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray10, byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray10);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream28);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray10, inputStream28);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream28);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray4, inputStream28);
        org.apache.commons.codec.digest.Blake3 blake3_33 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray4);
        java.util.Random random36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray4, "=?UTF-16LE?Q?C=00B=00D=00A=00F=00A=00?=", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", random36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: =?UTF-16LE?Q?C=00B=00D=00A=00F=00A=00?=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 56, 50, 61, 48, 65, 61, 69, 66, 61, 67, 56, 61, 68, 49, 61, 69, 52, 44, 61, 67, 57, 61, 49, 53, 61, 70, 49, 61, 48, 48, 121, 61, 56, 52, 61, 69, 49, 61, 68, 55, 61, 69, 50, 61, 49, 55, 37, 61, 49, 49, 42, 61, 51, 68, 61, 68, 51, 71, 61, 48, 52, 61, 68, 52, 61, 57, 68, 61, 67, 57, 61, 66, 56]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str13, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AAAAAAA" + "'", str14, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str15, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0Acd8L3u4hVxI" + "'", str17, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str26, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str29, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5" + "'", str32, "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertNotNull(blake3_33);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray6);
        org.apache.commons.codec.net.PercentCodec percentCodec12 = new org.apache.commons.codec.net.PercentCodec(byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long21 = base32_14.getEncodedLength(byteArray18);
        byte[] byteArray22 = percentCodec12.decode(byteArray18);
        org.apache.commons.codec.binary.Hex hex23 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer26 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest24, byteBuffer26);
        char[] charArray29 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer26, true);
        byte[] byteArray30 = hex23.decode(byteBuffer26);
        byte[] byteArray31 = percentCodec12.decode(byteArray30);
        java.util.BitSet bitSet32 = null;
        byte[] byteArray34 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet32, byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray35);
        java.lang.String str37 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray31, byteArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str20, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 8L + "'", long21 == 8L);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "d" + "'", str37, "d");
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray5, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 10, 10, 0]");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.io.InputStream inputStream12 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream15 = new org.apache.commons.codec.binary.Base16InputStream(inputStream12, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream19 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream15, false, false, codecPolicy18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray6, true, codecPolicy18);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray22 = base64_20.decode("org.apache.commons.codec.DecoderException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("414141414141413d0d0a");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (short) 100, byteArray2, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [?^5?^5?^5?]????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-29, 94, 53, -29, 94, 53, -29, 94, 53, -29, 93, -35, -47, -35, 26]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        boolean boolean10 = base32_3.isInAlphabet(byteArray8, false);
        int int11 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray8);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray1, byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.md2(byteArray1);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray1, byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-690116322) + "'", int11 == (-690116322));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16fd67a8bb44f961f07f53972686acb3" + "'", str12, "16fd67a8bb44f961f07f53972686acb3");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[42, -45, 109, -99, 81, 116, -114, -126, 122, -15, -84, -85, 117, 104, -43, -30]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[52, 57, 99, 99, 54, 50, 57, 99, 48, 48, 57, 101, 98, 102, 50, 49, 48, 101, 99, 48, 51, 55, 97, 49, 100, 53, 48, 49, 98, 55, 100, 49, 56, 101, 102, 56, 53, 54, 57, 52, 97, 102, 102, 57, 48, 55, 53, 51, 49, 51, 101, 53, 100, 99, 100, 100, 56, 99, 48, 49, 48, 100, 48, 102, 48, 97, 48, 99, 54, 53, 49, 56, 49, 98, 55, 53, 51, 101, 102, 49, 100, 102, 55, 98, 50, 53, 56, 56, 48, 54, 50, 55, 55, 53, 98, 57, 98, 54, 99, 49, 56, 56, 99, 57, 99, 54, 51, 101, 53, 50, 48, 53, 102, 52, 54, 51, 52, 97, 98, 52, 54, 55, 56, 98, 48, 100, 102, 54]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bb2a32f21c6b2dbc3a035b35964a30b8625b80bb33cd49d0374464b77e0fbd376dd8751b8f9c5b022a3a38649a9212e9" + "'", str16, "bb2a32f21c6b2dbc3a035b35964a30b8625b80bb33cd49d0374464b77e0fbd376dd8751b8f9c5b022a3a38649a9212e9");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le("SHA3-512");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[83, 0, 72, 0, 65, 0, 51, 0, 45, 0, 53, 0, 49, 0, 50, 0]");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-100, -106, 109, 34, 71, 18, 7, 97, 20, -103, 38, 64, -25, -110, -64, -29, -11, -68, -22, 50, 76, 44, 119, -86, -94, 55, -52, -73]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.lang.String str1 = org.apache.commons.codec.digest.Crypt.crypt("ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0" + "'", str1, "$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1, true);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        boolean boolean6 = qCodec3.isEncodeBlanks();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = qCodec3.encode("", "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("2de1e68a6f21c985a8bfdaf4667db7f0a4f3ae525211724bff735c91");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 2de1e68a6f21c985a8bfdaf4667db7f0a4f3ae525211724bff735c91");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.String str1 = org.apache.commons.codec.digest.Crypt.crypt("PPFKFA1111");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$6$aXMHILof$fPCmrwTDKP8tgRiPtqfSVmcQzOW1qIhrD.i6V2/8GwacU7XIg3Ddqv8lo6b6knjXoaS0GEuA3UvBQb/Av1NXt." + "'", str1, "$6$aXMHILof$fPCmrwTDKP8tgRiPtqfSVmcQzOW1qIhrD.i6V2/8GwacU7XIg3Ddqv8lo6b6knjXoaS0GEuA3UvBQb/Av1NXt.");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.lang.String str3 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer1, true);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530" + "'", str3, "386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        java.lang.String str4 = doubleMetaphone0.doubleMetaphone("$apr1$1842668b$BrmPcGnFkkmpTlWyJGSdY/");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PRPP" + "'", str4, "PRPP");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_512("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy7 = base64_6.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray2, false, (byte) 10, codecPolicy7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-78, -97, -118, 53, 46, -44, -72, 1, -35, 102, -59, 48, -76, -125, -114, -51, -77, -43, 0, 102, -115, 121, 79, -51, -109, 90, -117, 111, 93, 58, 13, -81, 56, -119, 10, 91, -42, 95, 90, 73, -85, -2, -117, -69, -114, -19, -18, -38, -11, 122, 20, -70, -93, -77, -105, 110, 7, 24, 34, 53, -55, 121, -86, -99]");
        org.junit.Assert.assertTrue("'" + codecPolicy7 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy7.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream7 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str26, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.codec.language.Soundex soundex0 = org.apache.commons.codec.language.Soundex.US_ENGLISH;
        soundex0.setMaxLength((-1612190696));
        java.lang.String str4 = soundex0.encode("dba775cd82010b877fd28af00fbcb6db02bfa1f71407c48744737ad5dd19b6f1");
        java.lang.String str6 = soundex0.encode("UTF-16");
        org.junit.Assert.assertNotNull(soundex0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "D123" + "'", str4, "D123");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "U310" + "'", str6, "U310");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str5 = qCodec3.encode("3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, inputStream7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream7);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream7);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet17, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray20);
        boolean boolean23 = base32_16.isInAlphabet(byteArray21, false);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_16.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream25 = new org.apache.commons.codec.binary.Base32InputStream(inputStream7, false, (-965378730), byteArray14, codecPolicy24);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream27 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base32InputStream25, false);
        byte[] byteArray28 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        int int29 = base32InputStream25.read(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = qCodec3.decode((java.lang.Object) base32InputStream25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type org.apache.commons.codec.binary.Base32InputStream cannot be decoded using Q codec");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "=?UTF-8?Q?3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068?=" + "'", str5, "=?UTF-8?Q?3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068?=");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str9, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str10, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex((java.io.InputStream) base64InputStream17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        java.lang.String str19 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str22 = quotedPrintableCodec5.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        int int31 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray29);
        byte[] byteArray32 = quotedPrintableCodec5.encode(byteArray29);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray32, true, (byte) -1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.digest.Blake3.hash(byteArray43);
        byte[] byteArray52 = base32_35.decode(byteArray51);
        blake3_2.doFinalize(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray55 = blake3_2.doFinalize((-64519185));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requested bytes must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_2);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTF-8" + "'", str19, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF-8" + "'", str20, "UTF-8");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-690116322) + "'", int31 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19, 28, -28, 68, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, -67, -41, -113, 95]");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException(throwable0);
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException();
        decoderException1.addSuppressed((java.lang.Throwable) encoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        encoderException2.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable[] throwableArray9 = encoderException6.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException10 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException6);
        java.lang.Throwable[] throwableArray11 = decoderException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str6 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray4, true);
        org.apache.commons.codec.CodecPolicy codecPolicy8 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray4, true, codecPolicy8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray14 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray10, (-488200341), (-965378730), (-1310417787));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1453579072 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ffffff" + "'", str6, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy8 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy8.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-45, 112, -75, -12, -9, 111, -88, -43, -83, 49, -107, -96, 94, 55, 48, 43, -44, 80, -99, -30, -29, -48, 12, -75, 31, -87, 2, -126, 33, -29, -15, 55]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str32 = base32_22.encodeAsString(byteArray31);
        org.apache.commons.codec.digest.HmacUtils hmacUtils33 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray31);
        byte[] byteArray35 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray35);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ABUAA2IAEE======" + "'", str32, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[29, -124, 85, 32, 82, 6, 23, 18, -118, 103, 11, 88, -82, -53, -69, 85, -37, 89, -42, -33]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-101, 20, 75, -58, -63, 43, -14, 79, -3, 125, 18, 57, 103, 93, -28, 67, -38, 71, -47, 52, 120, 26, -115, 34, 65, -53, 89, 64, 13, 118, 35, 23, -29, 114, -71, 82, 3, 6, 43, -117, 123, -89, -126, 59, -14, -114, 69, 97, 86, -100, -93, -127, -49, -49, -80, -125, -42, -84, -119, 56, 47, -19, 108, -17]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex0 = new org.apache.commons.codec.language.RefinedSoundex();
        java.lang.String str2 = refinedSoundex0.encode("30518803fd404b638c1766a65a9a9e5fd86d0fc2");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F261302623" + "'", str2, "F261302623");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_9 = new org.apache.commons.codec.binary.Base16();
        boolean boolean11 = base16_9.isInAlphabet("AAAAAAA");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray15);
        boolean boolean20 = base16_9.isInAlphabet(byteArray15, true);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, byteArray15);
        java.io.OutputStream outputStream22 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream23 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream22);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec27 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray33, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray33);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray33);
        java.lang.Object obj40 = quotedPrintableCodec27.decode((java.lang.Object) byteArray33);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream41 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream23, true, 1, byteArray33);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray15, byteArray33);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isBase64(byteArray43);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream22);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str36, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AAAAAAA" + "'", str37, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str38, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str39, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str42, "9b9e60058fae476c9ee6ef8fc698d89e");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray6, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray6);
        byte[] byteArray24 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray30);
        java.lang.String str37 = org.apache.commons.codec.digest.Crypt.crypt(byteArray30, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec39 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet40 = null;
        byte[] byteArray42 = new byte[] { (byte) 100 };
        byte[] byteArray43 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet40, byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray43);
        byte[] byteArray45 = uRLCodec39.encode(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray30, byteArray44);
        byte[] byteArray47 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray30);
        java.io.InputStream inputStream48 = java.io.InputStream.nullInputStream();
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream48);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, inputStream48);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream48);
        byte[] byteArray52 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray23, inputStream48);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray23);
        org.apache.commons.codec.binary.Base16 base16_55 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray57 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str58 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray57);
        byte[] byteArray59 = base16_55.encode(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray60 = org.apache.commons.codec.digest.Blake3.keyedHash(byteArray23, byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0Acd8L3u4hVxI" + "'", str13, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str22, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AAAAAAA" + "'", str34, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str35, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0Acd8L3u4hVxI" + "'", str37, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str46, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str49, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str58, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le("FF6U");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[70, 0, 70, 0, 54, 0, 85, 0]");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream8 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream5, true, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha256((java.io.InputStream) base16InputStream8);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111, -71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27, 120, 82, -72, 85]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet4 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap5 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType3, languageSet4);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, languageSet6);
        java.lang.String str8 = nameType0.getName();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gen" + "'", str8, "gen");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        boolean boolean10 = base32_3.isInAlphabet(byteArray8, false);
        int int11 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray8);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray1, byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.md2(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray1, (-965378730), 104729);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -965378730 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-690116322) + "'", int11 == (-690116322));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16fd67a8bb44f961f07f53972686acb3" + "'", str12, "16fd67a8bb44f961f07f53972686acb3");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[42, -45, 109, -99, 81, 116, -114, -126, 122, -15, -84, -85, 117, 104, -43, -30]");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        int int20 = base64InputStream19.available();
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray7, (java.io.InputStream) base64InputStream19);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream24 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream19, false, true);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, (java.io.InputStream) base64InputStream19);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.md5Hex((java.io.InputStream) base64InputStream19);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str26, "d41d8cd98f00b204e9800998ecf8427e");
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_9 = new org.apache.commons.codec.binary.Base16();
        boolean boolean11 = base16_9.isInAlphabet("AAAAAAA");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray15);
        boolean boolean20 = base16_9.isInAlphabet(byteArray15, true);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, byteArray15);
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u1d74\u5560\u9deb\u2399\ue3a9\ue89d\uf686\uef20\u8b69\u2d45\ube17\ud2e2\u8c21\ufffd\u8d2e" + "'", str22, "\u1d74\u5560\u9deb\u2399\ue3a9\ue89d\uf686\uef20\u8b69\u2d45\ube17\ud2e2\u8c21\ufffd\u8d2e");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-12, -59, 25, 32, -61, -28, 77, 23, 42, 6, 42, 60, -28, -5, 103, -48, -68, 51, 4, 110, -8, -119, 20, 117, -117, -50, 83, -2, -56, 113, 42, -64]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507" + "'", str24, "b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray37 = uRLCodec1.decode(byteArray36);
        java.lang.String str38 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray37);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AWrLOQlxe3HJg" + "'", str38, "AWrLOQlxe3HJg");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray6);
        long long9 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 7774503706986060106L + "'", long9 == 7774503706986060106L);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.codec.net.QCodec qCodec0 = new org.apache.commons.codec.net.QCodec();
        boolean boolean1 = qCodec0.isEncodeBlanks();
        qCodec0.setEncodeBlanks(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D", "4304ae58307f209e0235ba9cfe90913ce5c2822ebff2eea1e4a4232b2cb091bd749c5b2b9a60934fe7a781ab453262653fce318fda150f2cfa0d2a2f4b434310");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.md5("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray9);
        java.io.OutputStream outputStream11 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream12 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream11);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream14 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream12, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream16 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream12, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_19 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray23);
        xXHash32_19.update(byteArray25, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream29 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream12, true, 760066800, byteArray25);
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray37 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet34, byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray37);
        boolean boolean40 = base32_33.isInAlphabet(byteArray38, false);
        org.apache.commons.codec.CodecPolicy codecPolicy41 = base32_33.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream42 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream12, true, true, codecPolicy41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream43 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream5, false, 1757052779, byteArray10, codecPolicy41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [?????u??????B?,?x?]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[123, 118, -12, -87, 41, 124, 1, 20, 35, -56, -84, -61, -49, 11, -8, -51]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-85, -81, -65, 26, -99, 117, -2, -64, -79, -99, -10, -51, -128, 66, -110, 44, -106, 120, -37, -119]");
        org.junit.Assert.assertNotNull(outputStream11);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy41 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy41.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.nio.charset.Charset charset0 = null;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        java.lang.String str4 = quotedPrintableCodec1.encode("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=", charset3);
        byte[] byteArray5 = null;
        byte[] byteArray6 = quotedPrintableCodec1.decode(byteArray5);
        java.nio.charset.Charset charset7 = quotedPrintableCodec1.getCharset();
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D" + "'", str4, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        org.junit.Assert.assertNull(byteArray6);
        org.junit.Assert.assertNull(charset7);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils("\u42f9\u0892\u952a\ub7ae\ua633\u8e61\uf18c\ud06d\u8bd7\u0336\u064f\u36cd\u22c8\u5b3c");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: ?????????????????? MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_8;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream31 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, true, codecPolicy30);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream34 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, false, false);
        java.nio.charset.Charset charset35 = null;
        java.nio.charset.Charset charset36 = org.apache.commons.codec.Charsets.toCharset(charset35);
        org.apache.commons.codec.binary.Hex hex37 = new org.apache.commons.codec.binary.Hex(charset36);
        java.lang.String str38 = hex37.toString();
        java.util.BitSet bitSet39 = null;
        byte[] byteArray41 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray42 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet39, byteArray41);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        java.lang.String str45 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray41);
        byte[] byteArray46 = hex37.decode(byteArray41);
        base16OutputStream34.write(byteArray46);
        java.nio.charset.Charset charset50 = null;
        java.nio.charset.Charset charset51 = org.apache.commons.codec.Charsets.toCharset(charset50);
        org.apache.commons.codec.binary.Hex hex52 = new org.apache.commons.codec.binary.Hex(charset51);
        java.lang.String str53 = hex52.toString();
        java.util.BitSet bitSet54 = null;
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray57 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet54, byteArray56);
        byte[] byteArray58 = hex52.encode(byteArray56);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream59 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base16OutputStream34, false, (int) (short) -1, byteArray58);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str43, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 100, 48, 101, 52, 99, 53, 101, 97, 102, 97, 55, 102, 49, 49, 50, 49, 97, 49, 57, 48, 53, 56, 51, 56, 54, 48, 56, 49, 52, 97, 50, 55, 57, 97, 53, 55, 101, 54, 101, 101, 53, 100, 48, 101, 51, 50, 54, 98, 57, 53, 53, 50, 55, 98, 50]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        java.lang.Object obj15 = quotedPrintableCodec2.decode((java.lang.Object) byteArray8);
        java.lang.String str16 = quotedPrintableCodec2.getDefaultCharset();
        byte[] byteArray18 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray19, inputStream20);
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream22);
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray19, inputStream22);
        java.lang.Object obj26 = quotedPrintableCodec2.encode((java.lang.Object) byteArray19);
        byte[] byteArray27 = percentCodec0.encode(byteArray19);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray33, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        javax.crypto.Mac mac38 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray33);
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray33);
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray19, byteArray33);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str21, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str23, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str24, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str36, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AAAAAAA" + "'", str37, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[103, 112, 42, 14, -46, 90, 80, -60, 111, -64, -96, -5, 70, -90, -33, -65, 83, 51, -55, -36, 37, 69, 26, -67, -79, -18, -84, -109, -15, -23, 104, -43]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "44c9a137a4038a1ef0411ae025aec0e06a9209a3" + "'", str40, "44c9a137a4038a1ef0411ae025aec0e06a9209a3");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("UTF-16BE");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyedHash(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 85, 0, 84, 0, 70, 0, 45, 0, 49, 0, 54, 0, 66, 0, 69]");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha1Hex("CgFkAQE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fe5ee8d42ae7650412bd44fb8a2ede99ccd3e88e" + "'", str1, "fe5ee8d42ae7650412bd44fb8a2ede99ccd3e88e");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((-2641196705367478108L), 760066800);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1514623625) + "'", int2 == (-1514623625));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = uRLCodec1.decode("517d4818c9f39a1b0c116f2f92e779215855f3e9919b72efa23357df");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: hi!");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.codec.language.Caverphone1 caverphone1_0 = new org.apache.commons.codec.language.Caverphone1();
        java.lang.String str2 = caverphone1_0.encode("pOCLKm.YovXnk");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PKKMYF" + "'", str2, "PKKMYF");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha256("hi!");
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-64, -35, -42, 44, 119, 23, 24, 14, 127, -5, -118, 21, -69, -106, 116, -45, -20, -110, 89, 46, 11, 122, -57, -47, -43, 40, -104, 54, -76, 85, 59, -30]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[25, -88, -114, 43, -18, -30, 112, 26, 23, 78, 117, -47, -97, -95, -106, -88, 25, -88, -48, -99, -18, -58, 111, -125, 3, 104, 11, -21]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 49, 57, 61, 65, 56, 61, 56, 69, 43, 61, 69, 69, 61, 69, 50, 112, 61, 49, 65, 61, 49, 55, 78, 117, 61, 68, 49, 61, 57, 70, 61, 65, 49, 61, 57, 54, 61, 65, 56, 61, 49, 57, 61, 65, 56, 61, 68, 48, 61, 57, 68, 61, 69, 69, 61, 67, 54, 111, 61, 56, 51, 61, 48, 51, 104, 61, 48, 66, 61, 69, 66]");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray35 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray27, (-1621933077), (int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1621933077 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        java.lang.String str6 = colognePhonetic0.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.String str8 = colognePhonetic0.colognePhonetic("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        java.lang.String str10 = colognePhonetic0.colognePhonetic("$6$DDWobXRt$xhVIH9eYUt.YhcPWJgdPO9wi10jTfEY4zKmadE5JWQtwRGLDAYg2C8j0qgku8B9jroG5NSZTzuShahiYPFC1d.");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "828213832432323283231" + "'", str6, "828213832432323283231");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "074144668286427481268138212338282381323183123" + "'", str8, "074144668286427481268138212338282381323183123");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "231487248328134213238462342374524841746881382" + "'", str10, "231487248328134213238462342374524841746881382");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray10, false);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, byteArray10);
        char[] charArray15 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray10);
        boolean boolean17 = base64_1.isInAlphabet(byteArray10, true);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream18);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream21 = new org.apache.commons.codec.binary.Base64InputStream(inputStream18, false);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray10, (java.io.InputStream) base64InputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex((java.io.InputStream) base64InputStream21);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0A01640101" + "'", str13, "0A01640101");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str14, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "30518803fd404b638c1766a65a9a9e5fd86d0fc2" + "'", str22, "30518803fd404b638c1766a65a9a9e5fd86d0fc2");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str23, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.codec.EncoderException encoderException1 = new org.apache.commons.codec.EncoderException("");
        java.lang.Throwable[] throwableArray2 = encoderException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream1);
        java.io.OutputStream outputStream4 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_6 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream8 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_6, false);
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str12 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray11);
        long long13 = base16_6.getEncodedLength(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray11, byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = inputStream1.readNBytes(byteArray15, (-1310417787), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1310417787, -1310417787 + 0) out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(outputStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000\ufffd" + "'", str12, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4L + "'", long13 == 4L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str16, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("a7ca851e4a459e091ff0e864d15d0ce595d93c9cf70fbcb7f8de5ac8");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384("$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-5, -39, 40, -85, -43, -21, -9, -53, 42, -38, 85, -100, -81, -30, -9, -41, -103, -97, 48, 8, 58, 110, -76, -66, -102, 51, -7, 51, -55, -128, -54, 121, 116, -116, -14, 98, -127, 102, 23, -91, 109, 3, 86, 96, 127, -53, 45, 55]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray5);
        byte[] byteArray9 = uRLCodec1.decode(byteArray5);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray15);
        byte[] byteArray23 = uRLCodec1.decode(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = uRLCodec1.encode("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: hi!");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$1$QUoJ1m1e$EO9igo1lUtQMQeUPmE52f." + "'", str8, "$1$QUoJ1m1e$EO9igo1lUtQMQeUPmE52f.");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000\000\000\000\000" + "'", str22, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray8);
        javax.crypto.Mac mac15 = org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byteArray8);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(mac15);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        long long30 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray4, (int) '#', (int) (byte) 10);
        char[] charArray31 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray4);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms32 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet33 = null;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        byte[] byteArray36 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet33, byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray36);
        javax.crypto.Mac mac38 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms32, byteArray37);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_45 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray44);
        javax.crypto.Mac mac46 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac38, byteArray44);
        java.security.MessageDigest messageDigest47 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream48 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest49 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest47, inputStream48);
        java.lang.String str50 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream48);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream48);
        javax.crypto.Mac mac52 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac46, inputStream48);
        byte[] byteArray53 = org.apache.commons.codec.digest.DigestUtils.sha256(inputStream48);
        byte[] byteArray54 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, inputStream48);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-2297536217941592444L) + "'", long30 == (-2297536217941592444L));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms32 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms32.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac46);
        org.junit.Assert.assertNotNull(messageDigest47);
        org.junit.Assert.assertEquals(messageDigest47.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(messageDigest49);
        org.junit.Assert.assertEquals(messageDigest49.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str50, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111, -71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27, 120, 82, -72, 85]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[24, -9, 96, -66, 48, -95, 61, 42, 79, -23, -106, -65, 91, 112, -88, -79, -109, 89, 79, -16, 55, -111, 109, -68, 55, -73, -115, -32, 12, 14, -56, -52, 47, -70, -109, 106, 107, 114, 82, 106, 115, 121, -120, -10, 5, -93, 48, -128]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        java.nio.file.Path path37 = null;
        java.nio.file.OpenOption openOption38 = null;
        java.nio.file.OpenOption[] openOptionArray39 = new java.nio.file.OpenOption[] { openOption38 };
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest36, path37, openOptionArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(openOptionArray39);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        boolean boolean3 = caverphone2_0.isEncodeEqual("=?UTF-8?Q?=00=00=00=00=00?=", "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("d714e021e5902a94220883ae8d26b959bc94fb0a");
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        int int5 = metaphone0.getMaxCodeLen();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BBFT" + "'", str4, "BBFT");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex("dba775cd82010b877fd28af00fbcb6db02bfa1f71407c48744737ad5dd19b6f1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "50467de6c9cff6440df77fa04bf3d4a0d895c091dc634eaa7e016c0e4061d7e700b06bd6df874a8aa29e906e8d6baf8950d3977f53249a6bf826d15497fe4912" + "'", str1, "50467de6c9cff6440df77fa04bf3d4a0d895c091dc634eaa7e016c0e4061d7e700b06bd6df874a8aa29e906e8d6baf8950d3977f53249a6bf826d15497fe4912");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(1797466354);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1596797975577606546L + "'", long1 == 1596797975577606546L);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("$6$Do52jlNc$xakHCbK/kV4Fl5RNTztk6W2Qddt6ALNIcBzaauoh1UFpoahIm36hIhGxtiP3k3aF.XM6TNoCQN8huleOEIG2e.");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TJLN" + "'", str4, "TJLN");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        byte[] byteArray2 = inputStream0.readAllBytes();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray6 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray2, (-1514623625), (int) '-', false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1514623625 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray6);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream10 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, inputStream10);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream13 = new org.apache.commons.codec.binary.Base16InputStream(inputStream10, false);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac8, inputStream10);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        javax.crypto.Mac mac18 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray19 = null;
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(mac18);
        org.junit.Assert.assertNotNull(mac20);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException(throwable8);
        org.apache.commons.codec.EncoderException encoderException10 = new org.apache.commons.codec.EncoderException();
        decoderException9.addSuppressed((java.lang.Throwable) encoderException10);
        encoderException6.addSuppressed((java.lang.Throwable) encoderException10);
        java.lang.Throwable[] throwableArray13 = encoderException10.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException14 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException10);
        org.apache.commons.codec.EncoderException encoderException15 = new org.apache.commons.codec.EncoderException("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6", (java.lang.Throwable) decoderException14);
        org.apache.commons.codec.EncoderException encoderException16 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = caverphone0.encode((java.lang.Object) encoderException16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType2 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.NameType nameType5 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder6 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder6.setRuleType(ruleType7);
        org.apache.commons.codec.language.bm.NameType nameType9 = beiderMorseEncoder6.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType10 = beiderMorseEncoder6.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet11 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap12 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType5, ruleType10, languageSet11);
        org.apache.commons.codec.language.bm.NameType nameType13 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang14 = org.apache.commons.codec.language.bm.Lang.instance(nameType13);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet16 = lang14.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet18 = lang14.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap19 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType3, ruleType10, languageSet18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList21 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType2, ruleType10, "SHA3-512");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for gen, exact, SHA3-512.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertTrue("'" + nameType5 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType5.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType9 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType9.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType10 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType10.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + nameType13 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType13.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang14);
        org.junit.Assert.assertNotNull(languageSet16);
        org.junit.Assert.assertNotNull(languageSet18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha512_256((java.io.InputStream) base16InputStream22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream29);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream29);
        java.lang.String str34 = hmacUtils8.hmacHex(inputStream29);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream35);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream35);
        byte[] byteArray38 = inputStream35.readAllBytes();
        byte[] byteArray39 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray38);
        byte[] byteArray40 = hmacUtils8.hmac(byteArray39);
        java.io.InputStream inputStream41 = null;
        byte[] byteArray45 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy46 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream47 = new org.apache.commons.codec.binary.Base32InputStream(inputStream41, true, (int) (byte) 0, byteArray45, codecPolicy46);
        java.lang.String str49 = org.apache.commons.codec.digest.Crypt.crypt(byteArray45, "b2Aup9HxaW1JY");
        java.security.MessageDigest messageDigest50 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream51 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest52 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest50, inputStream51);
        java.lang.String str53 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream51);
        byte[] byteArray54 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream51);
        byte[] byteArray55 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream51);
        java.lang.String str56 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray45, inputStream51);
        java.lang.String str57 = hmacUtils8.hmacHex(byteArray45);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str30, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str31, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str34, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str36, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str37, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy46 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy46.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "b2jpL.fGw/.fo" + "'", str49, "b2jpL.fGw/.fo");
        org.junit.Assert.assertNotNull(messageDigest50);
        org.junit.Assert.assertEquals(messageDigest50.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream51);
        org.junit.Assert.assertNotNull(messageDigest52);
        org.junit.Assert.assertEquals(messageDigest52.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str53, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "f0960da20c9ad08441e24e9b4b4cd4a5" + "'", str56, "f0960da20c9ad08441e24e9b4b4cd4a5");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str57, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha256(inputStream16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(inputStream16);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111, -71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27, 120, 82, -72, 85]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str22, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, false);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.shaHex((java.io.InputStream) base64InputStream7);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str8, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray34);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 100, 110, 81, 87, 70, 82, 81, 87, 103]");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest4);
        java.io.OutputStream outputStream7 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream8 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream7);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec12 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray18);
        java.lang.Object obj25 = quotedPrintableCodec12.decode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream26 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream8, true, 1, byteArray18);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false, 1757052779);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest4, byteArray30);
        java.io.RandomAccessFile randomAccessFile32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest33 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest4, randomAccessFile32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream7);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAAAAAA" + "'", str22, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str24, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream4.write(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.Blake3 blake3_10 = org.apache.commons.codec.digest.Blake3.initKeyedHash(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[102, 102, 102, 102, 102, 102]");
        org.junit.Assert.assertNotNull(mac9);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException(throwable0);
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException();
        decoderException1.addSuppressed((java.lang.Throwable) encoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        encoderException2.addSuppressed((java.lang.Throwable) encoderException6);
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException6);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        long long9 = base16_2.getEncodedLength(byteArray7);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream11 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, inputStream11);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream14 = new org.apache.commons.codec.binary.Base16InputStream(inputStream11, false);
        int int15 = base16InputStream14.available();
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base16InputStream14);
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray7, (java.io.InputStream) base16InputStream14);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\000\ufffd" + "'", str8, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str16, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0355bde7b7848c70ff66faf6409afbddae72a0b4" + "'", str17, "0355bde7b7848c70ff66faf6409afbddae72a0b4");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.io.OutputStream outputStream4 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream4);
        byte[] byteArray8 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream5.write(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str13 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray8, byteArray12);
        byte[] byteArray15 = hex2.encode(byteArray8);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = hex2.decode(byteArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Illegal hexadecimal character ? at index 0");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(outputStream4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\000\ufffd" + "'", str13, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str14, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[101, 54, 97, 55, 102, 100, 55, 99, 48, 51, 52, 53, 54, 99, 57, 101, 53, 53, 100, 51, 49, 99, 50, 52, 57, 55, 55, 56, 53, 54, 52, 52, 49, 100, 52, 53, 57, 102, 48, 97, 102, 102, 50, 98, 56, 50, 51, 101, 48, 50, 53, 51, 50, 98, 56, 100, 52, 53, 97, 100, 48, 52, 51, 102]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        base64OutputStream1.write((int) '4');
        base64OutputStream1.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream10 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.io.InputStream inputStream25 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream28 = new org.apache.commons.codec.binary.Base16InputStream(inputStream25, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy31 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream32 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream28, false, false, codecPolicy31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray19, true, codecPolicy31);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream34 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream10, true, false, codecPolicy31);
        base16OutputStream34.close();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy31 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy31.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        beiderMorseEncoder0.setMaxPhonemes((int) (byte) 100);
        beiderMorseEncoder0.setConcat(true);
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        base64InputStream5.close();
        base64InputStream5.close();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = base64InputStream5.read();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
    }
}
