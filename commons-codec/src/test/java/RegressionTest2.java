import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray3, true, (byte) 0);
        byte[] byteArray8 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream10 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, inputStream10);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream17);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream17);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream17);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, inputStream17);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray8, inputStream17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[51, 81, 53, 77, 88, 113, 45, 110, 56, 82, 73, 97, 71, 81, 87, 68, 104, 103, 103, 85, 111, 110, 109, 108, 102, 109, 55, 108, 48, 79, 77, 109, 117, 86, 85, 110, 115, 103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str18, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str19, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "310344b7ad126171e627e334e79c2ffd17a4bfd9f681018879ea89624808a39d" + "'", str22, "310344b7ad126171e627e334e79c2ffd17a4bfd9f681018879ea89624808a39d");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        xXHash32_0.reset();
        xXHash32_0.update((int) (byte) 100);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        xXHash32_0.update(byteArray6);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray6);
        org.apache.commons.codec.digest.XXHash32 xXHash32_12 = new org.apache.commons.codec.digest.XXHash32((int) (byte) 100);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C13 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C13.reset();
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray18 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet15, byteArray17);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray17);
        pureJavaCrc32C13.update(byteArray17, (-690116322), (-1612190696));
        byte[] byteArray24 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        pureJavaCrc32C13.update(byteArray24);
        xXHash32_12.update(byteArray24);
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray6, byteArray24);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==" + "'", str8, "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str19, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "719bf945849ee63ffc9d5309e5b1e33132b379d99fcc6e853ec673a5e826801a" + "'", str28, "719bf945849ee63ffc9d5309e5b1e33132b379d99fcc6e853ec673a5e826801a");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-25, 126, 27, -45, 2, 58, -105, 16, 99, -100, 82, -74, -24, -38, 40, 52]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType7, languageSet8);
        org.apache.commons.codec.language.bm.NameType nameType10 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang11 = org.apache.commons.codec.language.bm.Lang.instance(nameType10);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet13 = lang11.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = lang11.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap16 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType7, languageSet15);
        org.apache.commons.codec.language.bm.RuleType ruleType17 = org.apache.commons.codec.language.bm.RuleType.APPROX;
        org.apache.commons.codec.language.bm.NameType nameType18 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang19 = org.apache.commons.codec.language.bm.Lang.instance(nameType18);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet21 = lang19.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet23 = lang19.guessLanguages("400000");
        java.lang.String str24 = languageSet23.getAny();
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap25 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType17, languageSet23);
        org.apache.commons.codec.language.Soundex soundex28 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator29 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex28);
        org.apache.commons.codec.language.bm.NameType nameType31 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType32 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet33 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap34 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType31, ruleType32, languageSet33);
        int int35 = stringEncoderComparator29.compare((java.lang.Object) "0Acd8L3u4hVxI", (java.lang.Object) ruleType32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine38 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType32, true, (-488200341));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang11);
        org.junit.Assert.assertNotNull(languageSet13);
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + ruleType17 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType17.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertTrue("'" + nameType18 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType18.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang19);
        org.junit.Assert.assertNotNull(languageSet21);
        org.junit.Assert.assertNotNull(languageSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "greek" + "'", str24, "greek");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + nameType31 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType31.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType32 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType32.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("UTF-16BE");
        byte[] byteArray2 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 85, 0, 84, 0, 70, 0, 45, 0, 49, 0, 54, 0, 66, 0, 69]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[48, 49, 48, 48, 48, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 48, 49, 48, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 48]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512_224("rules");
        java.lang.String str15 = digestUtils1.digestAsHex(byteArray14);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-114, 84, 95, 14, -54, -94, -40, -59, 76, -116, -19, -119, 13, 19, 14, 83, 116, 90, 71, -105, 119, -105, -37, -58, 106, -120, 74, -119]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0974cce7288690dfb07132cebf0eaa1f64a12074c9b85680f30e0722cc983d1fdcd0e1cccd67602c146fd67e212357d4" + "'", str15, "0974cce7288690dfb07132cebf0eaa1f64a12074c9b85680f30e0722cc983d1fdcd0e1cccd67602c146fd67e212357d4");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md5Hex("Ptz9RTz3KVvV2");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "cf1bd2c202ddf2f8696c5caa578caa96" + "'", str1, "cf1bd2c202ddf2f8696c5caa578caa96");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        java.nio.charset.Charset charset4 = hex2.getCharset();
        org.apache.commons.codec.binary.Hex hex5 = new org.apache.commons.codec.binary.Hex(charset4);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray1, 1164493051, (int) (short) -1, (-64519185));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1164493049 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.apache.commons.codec.binary.Hex hex0 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer3 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, byteBuffer3);
        char[] charArray6 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer3, true);
        byte[] byteArray7 = hex0.decode(byteBuffer3);
        java.lang.Object obj9 = hex0.encode((java.lang.Object) "HmacMD5");
        char[] charArray14 = new char[] { '4', '4', '-', '#' };
        org.apache.commons.codec.language.Soundex soundex15 = new org.apache.commons.codec.language.Soundex(charArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = hex0.decode((java.lang.Object) charArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Illegal hexadecimal character - at index 2");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "44-#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "44-#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, 4, -, #]");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("ABUAA2IAEE======");
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer19, true);
        byte[] byteArray22 = hmacUtils8.hmac(byteBuffer19);
        java.lang.String str24 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer19, false);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "414255414132494145453d3d3d3d3d3d" + "'", str21, "414255414132494145453d3d3d3d3d3d");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder1 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str3 = matchRatingApproachEncoder1.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.String str5 = matchRatingApproachEncoder1.encode("ffaRlX9TmFOkk");
        boolean boolean8 = matchRatingApproachEncoder1.isEncodeEquals("=?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=", "1462864445134828448548348552636243541");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = caverphone2_0.encode((java.lang.Object) boolean8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "E99B98" + "'", str3, "E99B98");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FRLMFK" + "'", str5, "FRLMFK");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("5abb39f3e99feb9ffe62ddfa5f1464a2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.String str4 = bCodec2.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = bCodec2.decode("");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_384(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-45, -89, 35, 75, 94, 127, 27, -117, -42, 88, 2, 110, -85, -28, -29, 39, -112, 99, -7, 57, -49, -36, 84, -88, 61, -60, -51, 60, 85, -13, 83, 4, 65, -86, -120, 108, -5, -106, 46, -16, 65, 83, 126, 40, 90, 61, -34, 122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "06cjS15_G4vWWAJuq-TjJ5Bj-TnP3FSoPcTNPFXzUwRBqohs-5Yu8EFTfihaPd56" + "'", str12, "06cjS15_G4vWWAJuq-TjJ5Bj-TnP3FSoPcTNPFXzUwRBqohs-5Yu8EFTfihaPd56");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384("HXRVYJ3rI5njqeid9obvIItpLUW+F9LijCHabojojS4=");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (64) than the specified maximum size of -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-55, 57, 125, 32, -91, 112, 72, -115, 94, -43, -52, 6, 101, -44, -107, -27, 0, -7, 69, -7, -83, 34, -125, -107, -47, 19, 18, 49, -88, 41, 2, 66, 94, 100, 38, 6, 35, -71, -48, 10, 26, -15, -116, 68, 71, -122, -50, 58]");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        pureJavaCrc32C0.update(0);
        pureJavaCrc32C0.reset();
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray3 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4" + "'", str5, "18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Languages languages1 = org.apache.commons.codec.language.bm.Languages.getInstance("3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: 3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.io.OutputStream outputStream0 = null;
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream4.write(byteArray7);
        base64OutputStream4.write((int) '4');
        base64OutputStream4.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream13 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream4);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.io.InputStream inputStream28 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream28, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream31, false, false, codecPolicy34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray22, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream37 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream13, true, false, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream38 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream41 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, true, false);
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray34);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "QUdnQWFRQWg=" + "'", str35, "QUdnQWFRQWg=");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType2 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine5 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType2, false, 1164493051);
        java.lang.Class<?> wildcardClass6 = nameType0.getClass();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-109, -16, 40, 93, -108, 68, -100, 50, 77, 50, -2, -24, 34, -118, 26, 15, -61, -119, 76, 21]");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        int int3 = metaphone0.getMaxCodeLen();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        java.lang.String str4 = ruleType3.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine6 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rules" + "'", str4, "rules");
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.apache.commons.codec.binary.Base16 base16_1 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray3 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        byte[] byteArray6 = base16_1.encode(byteArray3, (int) (short) 100, (int) ' ');
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        byte[] byteArray11 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet7, byteArray9, true);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray17, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray17);
        java.lang.String str24 = org.apache.commons.codec.digest.Crypt.crypt(byteArray17, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec26 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = new byte[] { (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet27, byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray30);
        byte[] byteArray32 = uRLCodec26.encode(byteArray31);
        java.lang.String str33 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray17, byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray17);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream35);
        byte[] byteArray37 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray17, inputStream35);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream35);
        java.lang.String str39 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray11, inputStream35);
        boolean boolean41 = base16_1.isInAlphabet(byteArray11, true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-2, -1, 0, 99, 0, 48, 0, 99, 0, 51, 0, 100, 0, 97, 0, 99, 0, 54, 0, 50, 0, 100, 0, 55, 0, 51, 0, 53, 0, 52, 0, 54, 0, 98, 0, 102, 0, 52, 0, 52, 0, 49, 0, 54, 0, 57, 0, 56, 0, 49, 0, 99, 0, 51, 0, 101, 0, 102, 0, 102, 0, 54, 0, 53, 0, 55, 0, 51, 0, 48, 0, 100, 0, 52, 0, 57, 0, 48, 0, 99, 0, 97, 0, 56, 0, 50, 0, 52, 0, 53, 0, 97, 0, 55, 0, 102, 0, 53, 0, 54, 0, 52, 0, 55, 0, 48, 0, 55, 0, 48, 0, 97, 0, 49, 0, 50, 0, 54, 0, 97, 0, 49, 0, 53, 0, 100, 0, 97, 0, 54, 0, 51, 0, 50, 0, 53, 0, 97, 0, 54, 0, 102, 0, 51, 0, 100, 0, 102, 0, 100, 0, 56, 0, 51, 0, 56, 0, 52, 0, 99, 0, 102, 0, 52, 0, 100, 0, 101, 0, 51, 0, 101, 0, 49, 0, 101, 0, 102, 0, 51, 0, 53, 0, 98, 0, 53, 0, 53, 0, 101, 0, 51, 0, 97]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 48, 51, 52, 48, 48, 51, 55, 48, 48, 51, 48, 48, 48, 51, 55, 48, 48, 51, 48, 48, 48, 54, 49, 48, 48, 51, 49, 48, 48, 51, 50, 48, 48, 51, 54, 48, 48, 54, 49, 48, 48, 51, 49, 48, 48, 51, 53, 48, 48, 54, 52, 48, 48, 54, 49, 48, 48, 51, 54, 48, 48, 51, 51]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[61, 56, 50, 61, 48, 65, 61, 69, 66, 61, 67, 56, 61, 68, 49, 61, 69, 52, 44, 61, 67, 57, 61, 49, 53, 61, 70, 49, 61, 48, 48, 121, 61, 56, 52, 61, 69, 49, 61, 68, 55, 61, 69, 50, 61, 49, 55, 37, 61, 49, 49, 42, 61, 51, 68, 61, 68, 51, 71, 61, 48, 52, 61, 68, 52, 61, 57, 68, 61, 67, 57, 61, 66, 56]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str20, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AAAAAAA" + "'", str21, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0Acd8L3u4hVxI" + "'", str24, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str33, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str36, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5" + "'", str39, "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream11 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, false);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream12 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream11);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.apache.commons.codec.binary.Base16 base16_1 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str4 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray3);
        byte[] byteArray5 = base16_1.encode(byteArray3);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = base16_1.getCodecPolicy();
        boolean boolean8 = base16_1.isInAlphabet((byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str4, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        java.nio.file.Path path6 = null;
        java.nio.file.OpenOption openOption7 = null;
        java.nio.file.OpenOption[] openOptionArray8 = new java.nio.file.OpenOption[] { openOption7 };
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, path6, openOptionArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(openOptionArray8);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base64InputStream5);
        boolean boolean8 = base64InputStream5.markSupported();
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str9, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy5 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream6 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, true, (int) (byte) 0, byteArray4, codecPolicy5);
        char[] charArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Hex.decodeHex(charArray7);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex9 = new org.apache.commons.codec.language.RefinedSoundex(charArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy5 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy5.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, 17, 0, 16, 0, 16, 1, 17, 1, 1, 1, 1, 16, 17, 16, 1, 0, 16, 1, 16, 17, 16, 0, 17, 17, 1, 0, 0, 17, 16, 1, 1, 1, 16, 17, 16, 1, 17, 17, 16, 16, 16, 1, 1, 1, 17, 16, 1, 16, 16, 0, 16, 0, 1, 1, 0, 0, 0, 16, 0, 16, 0, 1, 16, 16, 0, 0, 17, 0, 0, 1, 1, 0, 1, 16, 1, 0, 1, 16, 16, 0, 1, 0, 16, 17, 17, 0, 1, 16, 16, 1, 17, 16, 16, 17, 17, 1, 1, 17, 16, 1, 0, 17, 0, 0, 0, 17, 16, 17, 1, 17, 1]");
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md2("2ad36d9d51748e827af1acab7568d5e2");
        org.apache.commons.codec.CodecPolicy codecPolicy5 = org.apache.commons.codec.CodecPolicy.LENIENT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((-1), byteArray2, true, (byte) 100, codecPolicy5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-30, 4, 57, -99, 104, 73, 10, -67, 73, -34, 67, -95, -29, -48, -59, 49]");
        org.junit.Assert.assertTrue("'" + codecPolicy5 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy5.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray6);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "FFFFFF");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$FFFFFF$gNzyWPaeMX71d75Kk4laA1" + "'", str11, "$apr1$FFFFFF$gNzyWPaeMX71d75Kk4laA1");
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms2 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet3, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms2, byteArray7);
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_15 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray14);
        javax.crypto.Mac mac16 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac8, byteArray14);
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest17, inputStream18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream18);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream18);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac16, inputStream18);
        byte[] byteArray24 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.lang.String str27 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray25, inputStream26);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream28 = new org.apache.commons.codec.binary.Base64InputStream(inputStream26);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream29 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream28);
        javax.crypto.Mac mac30 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac16, (java.io.InputStream) base16InputStream29);
        java.io.OutputStream outputStream31 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_33 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream35 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream31, (org.apache.commons.codec.binary.BaseNCodec) base16_33, false);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str39 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray38);
        long long40 = base16_33.getEncodedLength(byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str43 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray38, byteArray42);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray38);
        int int45 = base16InputStream29.read(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray1, (java.io.InputStream) base16InputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms2 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms2.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str20, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str27, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac30);
        org.junit.Assert.assertNotNull(outputStream31);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\000\ufffd" + "'", str39, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4L + "'", long40 == 4L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str43, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str44, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray5);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        boolean boolean21 = base32_14.isInAlphabet(byteArray19, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str24 = base32_14.encodeAsString(byteArray23);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest26, inputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream27);
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest25, inputStream27);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray23, inputStream27);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream27);
        java.lang.String str34 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray5, inputStream27);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray5, (-1332152471), (-1310417787));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1332152472 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000\000\000\000\000" + "'", str12, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ABUAA2IAEE======" + "'", str24, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str32, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str34, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        java.lang.String str4 = ruleType3.getName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap6 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, "=?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for gen, rules, =?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rules" + "'", str4, "rules");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_512("2ef0725975afd171e9cb76444b4969c3");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[75, -126, 78, -28, -90, 65, -30, 105, 107, 80, -77, -51, 54, 43, -122, -38, 15, -45, 25, -8, -68, 37, -11, -69, -72, -58, 105, -37, -106, 65, 56, -5, -17, 126, 126, 127, 18, 58, 102, -4, -116, 0, 64, 73, -59, -96, -27, -106, -27, -87, 56, -67, -64, -87, -73, -34, 63, 95, -112, -73, 99, -82, 51, -37]");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("ABUAA2IAEE======");
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer19, true);
        byte[] byteArray22 = hmacUtils8.hmac(byteBuffer19);
        java.io.OutputStream outputStream23 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream24 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream23);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str30 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray28, true);
        base64OutputStream24.write(byteArray28);
        java.lang.String str32 = hmacUtils8.hmacHex(byteArray28);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "414255414132494145453d3d3d3d3d3d" + "'", str21, "414255414132494145453d3d3d3d3d3d");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertNotNull(outputStream23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ffffff" + "'", str30, "ffffff");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "f4e1697970fc1349ee187dd1e09052bd093b566a7baf611521e0a2cb" + "'", str32, "f4e1697970fc1349ee187dd1e09052bd093b566a7baf611521e0a2cb");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        boolean boolean21 = base64OutputStream19.isStrictDecoding();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray29);
        java.lang.String str32 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray29, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        org.apache.commons.codec.net.URLCodec uRLCodec35 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet36 = null;
        byte[] byteArray38 = new byte[] { (byte) 100 };
        byte[] byteArray39 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet36, byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray39);
        byte[] byteArray41 = uRLCodec35.encode(byteArray40);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray29, byteArray41);
        java.io.InputStream inputStream43 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream46 = new org.apache.commons.codec.binary.Base16InputStream(inputStream43, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy49 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream50 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream46, false, false, codecPolicy49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32OutputStream base32OutputStream51 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream19, false, 1971526657, byteArray41, codecPolicy49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [Fh%89v%82%CC%D2%B1%EE%0C%AE%8D%C5YG%29%1F%81%9C%C5%9E%E1%26%F5%BD%24%3B%18RWt%14A%3A%EE%D5x%0B_%B1%10%90%03%87%15%BE%ED%1B%00qJ%15%B3%1C%8D%96t%FB%DB%DF%7F%D4%19%1C]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str32, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AAAAAAA" + "'", str33, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250" + "'", str42, "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
        org.junit.Assert.assertTrue("'" + codecPolicy49 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy49.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        java.lang.String str2 = caverphone2_0.encode("663b90c899fa25a111067be0c22ffc64dcf581c2");
        java.lang.String str4 = caverphone2_0.encode("0a01640101");
        boolean boolean7 = caverphone2_0.isEncodeEqual("6IiiRyxmjcARw", "$1$R3.5of0S$M7WoGc.xSqd9c0i/foPQj.");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PKFPKFKTKF" + "'", str2, "PKFPKFKTKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "A111111111" + "'", str4, "A111111111");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        pureJavaCrc32C0.update(3527094);
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32C0.update(byteArray17, (-64519185), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -64519185 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = quotedPrintableCodec1.encode("980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7", "PFFPPPKTPS");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: PFFPPPKTPS");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        java.security.MessageDigest messageDigest50 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest51 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream52 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest53 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest51, inputStream52);
        java.lang.String str54 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream52);
        byte[] byteArray55 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream52);
        java.security.MessageDigest messageDigest56 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest50, inputStream52);
        java.security.MessageDigest messageDigest57 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream58 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest59 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest57, inputStream58);
        java.security.MessageDigest messageDigest60 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest50, inputStream58);
        byte[] byteArray61 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray49, inputStream58);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest50);
        org.junit.Assert.assertEquals(messageDigest50.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest51);
        org.junit.Assert.assertEquals(messageDigest51.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertNotNull(messageDigest53);
        org.junit.Assert.assertEquals(messageDigest53.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str54, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest56);
        org.junit.Assert.assertEquals(messageDigest56.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest57);
        org.junit.Assert.assertEquals(messageDigest57.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertNotNull(messageDigest59);
        org.junit.Assert.assertEquals(messageDigest59.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest60);
        org.junit.Assert.assertEquals(messageDigest60.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-93, -25, -81, -102, 69, 87, 90, -55, 21, -15, -71, 13, -27, 24, -8, 98, 10, 52, 83, -30, 45, -104, 125, 69, -115, 86, 72, -99, 26, 126, -47, -2, 5, 125, 116, -51, -13, -120, -21, 58, 87, 85, -4, -54, 98, 69, 73, -80, 5, 53, 70, -88, 104, -77, -12, -82, -89, 122, 102, 58, 127, 54, -52, 42]");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b", (-690116322), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin -690116322, end -690116322, length 56");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, (-237789309));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (40) than the specified maximum size of -237789309");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[72, 47, -7, 41, -107, 72, 29, 71, 113, 66, 23, -61, 76, 82, 49, -21, -126, 126, -123, -56, -94, -104, -105, -38, 83, 101, 15, 28]");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet3 = lang1.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet5 = lang1.guessLanguages("400000");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        boolean boolean7 = languageSet6.isSingleton();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = languageSet5.restrictTo(languageSet6);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languageSet3);
        org.junit.Assert.assertNotNull(languageSet5);
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageSet8);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils14 = new org.apache.commons.codec.digest.DigestUtils(messageDigest13);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer17 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, byteBuffer17);
        char[] charArray20 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer17, true);
        java.lang.String str21 = digestUtils14.digestAsHex(byteBuffer17);
        byte[] byteArray22 = digestUtils1.digest(byteBuffer17);
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = digestUtils1.digestAsHex(file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str21, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("F261302623");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[70, 50, 54, 49, 51, 48, 50, 54, 50, 51]");
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        char[] charArray3 = new char[] { 'a', '#', 'a' };
        org.apache.commons.codec.language.Soundex soundex4 = new org.apache.commons.codec.language.Soundex(charArray3);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex5 = new org.apache.commons.codec.language.RefinedSoundex(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = org.apache.commons.codec.binary.Hex.decodeHex(charArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Odd number of characters.");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, #, a]");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("0A01640101");
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray10, false);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, byteArray10);
        char[] charArray15 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Hex.decodeHex(charArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = refinedSoundex1.encode((java.lang.Object) charArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to RefinedSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0A01640101" + "'", str13, "0A01640101");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str14, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 1, 0, 0, 0, 1, 1, 16, 1, 0, 0, 0, 0, 1, 0, 0, 16, 16]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet3 = lang1.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet5 = lang1.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.apache.commons.codec.language.bm.NameType nameType6 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder7 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType8 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder7.setRuleType(ruleType8);
        org.apache.commons.codec.language.bm.NameType nameType10 = beiderMorseEncoder7.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType11 = beiderMorseEncoder7.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet12 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap13 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType6, ruleType11, languageSet12);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet14 = languageSet5.restrictTo(languageSet12);
        boolean boolean15 = languageSet14.isSingleton();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languageSet3);
        org.junit.Assert.assertNotNull(languageSet5);
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType8 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType8.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType11 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType11.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(languageSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.String str1 = org.apache.commons.codec.digest.Crypt.crypt("$6$tNEwHCOF$sNWeimC6OyYB5Kjbm1rlax0.c4d2om5PPuKWQuwAGDbFSIdsScYB9ByS.Ic0qUPcLzEMUvUfY8/qdruZdekFl0");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "$6$1ou2WQRN$wPb2jET66b1Yt3NKRbbuDcW9Oz92seTAMTmJFR2C6RwxUlUs.3uOcEju/o87m6tNHZXmiNmYFe/eQLGG3RyfC." + "'", str1, "$6$1ou2WQRN$wPb2jET66b1Yt3NKRbbuDcW9Oz92seTAMTmJFR2C6RwxUlUs.3uOcEju/o87m6tNHZXmiNmYFe/eQLGG3RyfC.");
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        boolean boolean10 = phoneticEngine4.isConcat();
        org.apache.commons.codec.language.bm.Lang lang11 = phoneticEngine4.getLang();
        org.apache.commons.codec.language.bm.NameType nameType12 = phoneticEngine4.getNameType();
        org.apache.commons.codec.language.bm.NameType nameType13 = phoneticEngine4.getNameType();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(lang11);
        org.junit.Assert.assertNull(nameType12);
        org.junit.Assert.assertNull(nameType13);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        java.lang.String str4 = doubleMetaphone0.doubleMetaphone("6e57afa9a4816afe502bfa9a045f02ee2bab5660");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FFPF" + "'", str4, "FFPF");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4", false);
        int int5 = soundex2.difference("UTF-8", "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        byte[] byteArray1 = org.apache.commons.codec.binary.Hex.decodeHex("79d351ca4f5462d2eb5f2595220e0863");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[121, -45, 81, -54, 79, 84, 98, -46, -21, 95, 37, -107, 34, 14, 8, 99]");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        boolean boolean6 = qCodec3.isEncodeBlanks();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = qCodec3.encode("f4b1bcd96256e2dc14bb08fdf60fb975", "ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        byte[] byteArray22 = uRLCodec15.decode(byteArray19);
        byte[] byteArray23 = null;
        byte[] byteArray24 = uRLCodec15.decode(byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_34 = new org.apache.commons.codec.binary.Base16();
        boolean boolean36 = base16_34.isInAlphabet("AAAAAAA");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str42 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray40, true);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray40);
        boolean boolean45 = base16_34.isInAlphabet(byteArray40, true);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, byteArray40);
        byte[] byteArray47 = uRLCodec15.encode(byteArray46);
        blake3_13.doFinalize(byteArray47);
        org.apache.commons.codec.net.URLCodec uRLCodec50 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str51 = uRLCodec50.getEncoding();
        java.security.MessageDigest messageDigest52 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream53 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest54 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest52, inputStream53);
        java.lang.String str55 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream53);
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream53);
        java.io.InputStream inputStream57 = java.io.InputStream.nullInputStream();
        java.lang.String str58 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream57);
        byte[] byteArray59 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray56, inputStream57);
        byte[] byteArray60 = uRLCodec50.encode(byteArray56);
        blake3_13.doFinalize(byteArray56);
        byte[] byteArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            blake3_13.update(byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str21, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ffffff" + "'", str42, "ffffff");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str43, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str51, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(messageDigest52);
        org.junit.Assert.assertEquals(messageDigest52.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(messageDigest54);
        org.junit.Assert.assertEquals(messageDigest54.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str55, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40]");
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str58, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[56, 37, 66, 48, 37, 54, 48, 37, 65, 55, 81, 37, 65, 67, 37, 57, 54, 56, 76, 37, 68, 57, 50, 37, 55, 69, 37, 66, 49, 37, 66, 49, 37, 69, 51, 106, 37, 50, 49, 37, 70, 68, 37, 66, 55, 37, 49, 49, 37, 49, 52, 37, 66, 69, 37, 48, 55, 67, 76, 37, 48, 67, 37, 67, 55, 37, 66, 70, 99, 37, 70, 54, 37, 69, 49, 37, 68, 65, 37, 50, 55, 78, 37, 68, 69, 37, 66, 70, 37, 69, 55, 111, 101, 37, 70, 66, 37, 68, 53, 37, 49, 65, 37, 68, 50, 37, 70, 49, 72, 37, 57, 56, 37, 66, 57, 37, 53, 66]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest9, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base32_17.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream3, true, (int) (byte) 0, byteArray15, codecPolicy18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "19f7afc7db69b4585318e9e47866a70cd1755f3e857404c1f8faa6b5fdfa4281" + "'", str20, "19f7afc7db69b4585318e9e47866a70cd1755f3e857404c1f8faa6b5fdfa4281");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        java.lang.Object obj15 = quotedPrintableCodec2.decode((java.lang.Object) byteArray8);
        java.lang.String str16 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str19 = quotedPrintableCodec2.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec21 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        byte[] byteArray27 = uRLCodec21.encode(byteArray26);
        int int28 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray26);
        byte[] byteArray29 = quotedPrintableCodec2.encode(byteArray26);
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray29, true, (byte) -1);
        org.apache.commons.codec.digest.XXHash32 xXHash32_33 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray37 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet34, byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray37);
        xXHash32_33.update(byteArray39, (int) (byte) 10, (-690116322));
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray44 = base32_32.decode(byteArray39);
        java.io.OutputStream outputStream45 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_47 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream49 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream45, (org.apache.commons.codec.binary.BaseNCodec) base16_47, false);
        baseNCodecOutputStream49.eof();
        byte[] byteArray52 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream49.write(byteArray52);
        long long54 = base32_32.getEncodedLength(byteArray52);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTF-8" + "'", str17, "UTF-8");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-690116322) + "'", int28 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MDExMDAxMDA" + "'", str43, "MDExMDAxMDA");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 66, 0, 4, 0]");
        org.junit.Assert.assertNotNull(outputStream45);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[102, 102, 102, 102, 102, 102]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 16L + "'", long54 == 16L);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        boolean boolean4 = base64OutputStream1.isStrictDecoding();
        base64OutputStream1.flush();
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream6 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        long long2 = xXHash32_0.getValue();
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        xXHash32_0.update(byteBuffer4);
        char[] charArray7 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer4, false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        int int10 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.NameType nameType12 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder13 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType14 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder13.setRuleType(ruleType14);
        org.apache.commons.codec.language.bm.NameType nameType16 = beiderMorseEncoder13.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType17 = beiderMorseEncoder13.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet18 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap19 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType12, ruleType17, languageSet18);
        boolean boolean21 = languageSet18.contains("65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649");
        boolean boolean22 = languageSet18.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = phoneticEngine4.encode("a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26", languageSet18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + nameType12 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType12.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType14 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType14.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType16 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType16.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType17 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType17.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages languages4 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType2);
        org.apache.commons.codec.language.bm.Lang lang5 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages4);
        java.util.Set<java.lang.String> strSet6 = languages4.getLanguages();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Lang lang7 = org.apache.commons.codec.language.bm.Lang.loadFromResource("SHA3-224", languages4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: SHA3-224");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languages4);
// flaky:         org.junit.Assert.assertNotNull(lang5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.digest.Blake3.hash(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray7, (-965378730), (-1877720325));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -965378731 out of bounds for length 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-51, -55, 110, -54, -124, 77, 121, 18, -84, -37, -77, -36, -90, 119, 117, 125, 13, -75, 116, 122, 29, -10, 17, 102, 51, -100, -4, 113, 86, -44, -120, 15]");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str8, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "4dcd75435592c2fbed8972b9e7fc1ea554a46fb953d75d9202dba2072105c561" + "'", str9, "4dcd75435592c2fbed8972b9e7fc1ea554a46fb953d75d9202dba2072105c561");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) 76, (long) (short) -1, 1650246903);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1642666625) + "'", int3 == (-1642666625));
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream14 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, inputStream14);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream14);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream14);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest12, inputStream14);
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray10, inputStream14);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream14);
        byte[] byteArray22 = inputStream14.readNBytes(1254840318);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str16, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str19, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream23);
        // The following exception was thrown during execution in test generation
        try {
            long long28 = org.apache.commons.codec.digest.MurmurHash2.hash64(byteArray26, 1164493051);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 28 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        byte[] byteArray0 = null;
        java.lang.String str1 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(false);
        boolean boolean3 = base32_1.isInAlphabet((byte) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str25 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray24);
        java.nio.charset.Charset charset27 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base64_29.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec31 = new org.apache.commons.codec.net.BCodec(charset27, codecPolicy30);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream32 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, (int) (short) 1, byteArray24, codecPolicy30);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray40);
        java.lang.String str43 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray40, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray40);
        java.lang.String str47 = org.apache.commons.codec.digest.Crypt.crypt(byteArray40, "0A01640101");
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray40);
        org.apache.commons.codec.net.PercentCodec percentCodec50 = new org.apache.commons.codec.net.PercentCodec(byteArray40, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray52);
        byte[] byteArray54 = percentCodec50.encode(byteArray52);
        org.apache.commons.codec.CodecPolicy codecPolicy55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream56 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, false, 1797466354, byteArray52, codecPolicy55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\000\ufffd" + "'", str25, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\377" + "'", str26, "\377");
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str43, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AAAAAAA" + "'", str44, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str45, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0Acd8L3u4hVxI" + "'", str47, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str48, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 33]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream3);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.md5("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        int int12 = inputStream3.readNBytes(byteArray9, 0, 0);
        long[] longArray16 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray9, (int) (short) 1, (int) (byte) 1, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray9, 1797466354, 1757052779);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-63, -43, 9, -48, -27, 77, -30, 7, -123, 13, 34, -108, 2, -113, -117, -83]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[4710506819610957249, -2091027399841864709]");
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        long[] longArray1 = org.apache.commons.codec.digest.MurmurHash3.hash128("0hODz3SrCKIQo");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-6407178806799809077, 5519087667881094008]");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("SHA-224");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-67, 79, 29, 32, 87, -124, -120, -123, 29, 28, -72, 3, -114, -3, -58, 38, 81, 81, -124, 103, 34, -28, 84, 33, -123, 123, -107, -65, -114, -35, 69, 11]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 10);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream11 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) baseNCodecOutputStream9, false);
        baseNCodecOutputStream9.eof();
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray0, "410f9e3083fb61704291e52188ef15b99f7a7db5addab258278ed70f0adaea3c");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream12 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream13 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream9);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream3 = new org.apache.commons.codec.binary.Base64InputStream(inputStream0, false);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream0);
        java.util.Random random7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray4, "$apr1$8dWU1PBl$KBmfVpNhGotb/lbYG.5BQ0", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518", random7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: $apr1$8dWU1PBl$KBmfVpNhGotb/lbYG.5BQ0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.security.MessageDigest messageDigest0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy6 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream7 = new org.apache.commons.codec.binary.Base32InputStream(inputStream1, true, (int) (byte) 0, byteArray5, codecPolicy6);
        base32InputStream7.mark((int) '-');
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, (java.io.InputStream) base32InputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        long long2 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.reset();
        pureJavaCrc32C0.update((-1877720325));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray22 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray23, inputStream24);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream26 = new org.apache.commons.codec.binary.Base64InputStream(inputStream24);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream27 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream26);
        javax.crypto.Mac mac28 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, (java.io.InputStream) base16InputStream27);
        java.io.OutputStream outputStream29 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_31 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream33 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream29, (org.apache.commons.codec.binary.BaseNCodec) base16_31, false);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str37 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray36);
        long long38 = base16_31.getEncodedLength(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str41 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray36, byteArray40);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray36);
        int int43 = base16InputStream27.read(byteArray36);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex((java.io.InputStream) base16InputStream27);
        boolean boolean45 = base16InputStream27.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac28);
        org.junit.Assert.assertNotNull(outputStream29);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\000\ufffd" + "'", str37, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4L + "'", long38 == 4L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str41, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str42, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str44, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.apache.commons.codec.binary.Base16 base16_0 = new org.apache.commons.codec.binary.Base16();
        boolean boolean2 = base16_0.isInAlphabet("AAAAAAA");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray6, true);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray6);
        boolean boolean11 = base16_0.isInAlphabet(byteArray6, true);
        org.apache.commons.codec.net.URLCodec uRLCodec13 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet14 = null;
        byte[] byteArray16 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet14, byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray17);
        byte[] byteArray19 = uRLCodec13.encode(byteArray18);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray18);
        javax.crypto.Mac mac21 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray18);
        java.lang.String str22 = base16_0.encodeAsString(byteArray18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ffffff" + "'", str8, "ffffff");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str9, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(mac21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4668897682CCD2B1EE0CAE8DC55947291F819CC59EE126F5BD243B1852577414413AEED5780B5FB11090038715BEED1B00714A15B31C8D9674FBDBDF7FD4191C" + "'", str22, "4668897682CCD2B1EE0CAE8DC55947291F819CC59EE126F5BD243B1852577414413AEED5780B5FB11090038715BEED1B00714A15B31C8D9674FBDBDF7FD4191C");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512;
        java.lang.String str1 = hmacAlgorithms0.toString();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_512));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HmacSHA512" + "'", str1, "HmacSHA512");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray3, (-1534769883));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1534769884 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 69, 54, 61, 65, 55, 61, 70, 68, 124, 61, 48, 51, 69, 108, 61, 57, 69, 85, 61, 68, 51, 61, 49, 67, 36, 61, 57, 55, 120, 86, 68, 61, 49, 68, 69, 61, 57, 70, 61, 48, 65, 61, 70, 70, 43, 61, 56, 50, 62, 61, 48, 50, 83, 43, 61, 56, 68, 69, 61, 65, 68, 61, 48, 52, 63]");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.apache.commons.codec.binary.Base32 base32_0 = new org.apache.commons.codec.binary.Base32();
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages languages4 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType2);
        org.apache.commons.codec.language.bm.Lang lang5 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Lang lang6 = org.apache.commons.codec.language.bm.Lang.loadFromResource("$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.", languages4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: $1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languages4);
// flaky:         org.junit.Assert.assertNotNull(lang5);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(true, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_9 = new org.apache.commons.codec.binary.Base16();
        boolean boolean11 = base16_9.isInAlphabet("AAAAAAA");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray15);
        boolean boolean20 = base16_9.isInAlphabet(byteArray15, true);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray21);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(mac22);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("$6$Do52jlNc$xakHCbK/kV4Fl5RNTztk6W2Qddt6ALNIcBzaauoh1UFpoahIm36hIhGxtiP3k3aF.XM6TNoCQN8huleOEIG2e.", "\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "afa3adc02e73c4b0b8223f1fcc03e1cd" + "'", str2, "afa3adc02e73c4b0b8223f1fcc03e1cd");
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        doubleMetaphone0.setMaxCodeLen((int) (byte) 10);
        int int8 = doubleMetaphone0.getMaxCodeLen();
        int int9 = doubleMetaphone0.getMaxCodeLen();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((-1621933077), byteArray9, false);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms17 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms17, byteArray22);
        org.apache.commons.codec.digest.HmacUtils hmacUtils25 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream26 = null;
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy31 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream32 = new org.apache.commons.codec.binary.Base32InputStream(inputStream26, true, (int) (byte) 0, byteArray30, codecPolicy31);
        char[] charArray33 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray30);
        java.lang.String str34 = hmacUtils25.hmacHex(byteArray30);
        java.nio.ByteBuffer byteBuffer36 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("ABUAA2IAEE======");
        java.lang.String str38 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer36, true);
        byte[] byteArray39 = hmacUtils25.hmac(byteBuffer36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = base32_16.encode((java.lang.Object) hmacUtils25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms17 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms17.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy31 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy31.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str34, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "414255414132494145453d3d3d3d3d3d" + "'", str38, "414255414132494145453d3d3d3d3d3d");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream23 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base16InputStream22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str24, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha256("SHA-384");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms17 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms17, byteArray22);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray29);
        java.lang.String str32 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray29, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray29);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray29);
        javax.crypto.Mac mac36 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms17, byteArray29);
        byte[] byteArray37 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray29);
        byte[] byteArray38 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray16, byteArray29);
        byte[] byteArray39 = quotedPrintableCodec1.encode(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray16, 2, (-64519185), (-237789309));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -64519184 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[99, 38, -77, 37, -76, -88, -70, 75, 36, -86, -100, 50, 57, -117, -62, 68, 1, -19, 53, -38, 39, -22, -16, -23, -121, -47, 25, -17, -125, -93, -84, -21]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms17 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms17.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str32, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AAAAAAA" + "'", str33, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str34, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str35, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-70, 124, 33, -58, 101, -103, -8, -99, 90, -32, 14, 8, 25, -89, 14, 100, -19, 5, -81, 65, -123, -19, 0, -80, -124, -34, 38, 116, 100, 63, -61, -41, -27, -65, 107, -15, -40, 88, -38, -102, 74, -116, -121, 119, -41, 75, 90, -91, 109, 38, 44, 22, -24, 49, -7, -60, 63, 13, -24, -39, -40, -96, 108, 115]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[99, 38, 61, 66, 51, 37, 61, 66, 52, 61, 65, 56, 61, 66, 65, 75, 36, 61, 65, 65, 61, 57, 67, 50, 57, 61, 56, 66, 61, 67, 50, 68, 61, 48, 49, 61, 69, 68, 53, 61, 68, 65, 39, 61, 69, 65, 61, 70, 48, 61, 69, 57, 61, 56, 55, 61, 68, 49, 61, 49, 57, 61, 69, 70, 61, 56, 51, 61, 65, 51, 61, 65, 67, 61, 69, 66]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.net.BCodec bCodec5 = new org.apache.commons.codec.net.BCodec(charset4);
        java.lang.String str7 = bCodec5.encode("\u4c82\u5d0d\u7890\u46d6\u6e5e\u9534\uc248\u8f23\u5616\u6c3b\ue3cb\ubde9\ue001\u02cd\u8e6d\ued79\u0467\u9e29\ub558\u3015\u1acc\ubd9c\u2d4c\ud4fc");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "=?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=" + "'", str7, "=?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-4, -108, -53, 108, -39, 40, 56, 37, 118, 29, 64, -67, -25, -111, 96, -4, -118, 53, -98, -116, -10, 112, -36, -77, -43, 68, -53, 7, 19, 9, 92, -24]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.Object obj4 = matchRatingApproachEncoder0.encode((java.lang.Object) "ISO-8859-1");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "E99B98" + "'", str2, "E99B98");
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + "IS8591" + "'", obj4, "IS8591");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32((-64519185));
        long long2 = xXHash32_1.getValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3813731004L + "'", long2 == 3813731004L);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md5("AWrLOQlxe3HJg");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[65, -30, -108, 30, -3, 74, -95, -69, -102, 121, -26, 6, 85, -92, -116, -6]");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray19);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "28c614425d5e992b2e041bff2c562bf078635574" + "'", str23, "28c614425d5e992b2e041bff2c562bf078635574");
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        boolean boolean5 = caverphone0.isCaverphoneEqual("$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/", "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.apache.commons.codec.net.PercentCodec percentCodec6 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray7 = null;
        byte[] byteArray8 = percentCodec6.encode(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = caverphone0.encode((java.lang.Object) byteArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray8);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("rules");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-114, 84, 95, 14, -54, -94, -40, -59, 76, -116, -19, -119, 13, 19, 14, 83, 116, 90, 71, -105, 119, -105, -37, -58, 106, -120, 74, -119]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[19, -89, -82, -48, -77, -93, 78, 31, -23, 19, -121, 42, -21, -24, 68, 38, 53, -46, 104, -46, 78, 28, -111, 34, 28, -14, 93, -125]");
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.shaHex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str6, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("SHA-1");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-55, 22, 28, 85, -23, 6, 27, 51, 88, 23, -4, 75, -10, 10, 66, 9, 67, 121, -68, 115, -12, -126, 73, -38, 4, 111, -33, 7, 83, 49, -90, -10]");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.String str1 = org.apache.commons.codec.digest.UnixCrypt.crypt("f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "VT3t7HwO9d9O2" + "'", str1, "VT3t7HwO9d9O2");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        java.lang.String str6 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.md2(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str4, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream21);
        java.lang.Object obj25 = quotedPrintableCodec1.encode((java.lang.Object) byteArray18);
        byte[] byteArray26 = null;
        byte[] byteArray27 = quotedPrintableCodec1.decode(byteArray26);
        java.nio.ByteBuffer byteBuffer29 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = quotedPrintableCodec1.encode((java.lang.Object) byteBuffer29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type java.nio.HeapByteBuffer cannot be quoted-printable encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str22, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac15 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac("e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90", byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90 not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CgFkAQE" + "'", str14, "CgFkAQE");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec("SA11111111");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: SA11111111");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils2 = new org.apache.commons.codec.digest.DigestUtils(messageDigest1);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        byte[] byteArray16 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray17, inputStream18);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream20 = new org.apache.commons.codec.binary.Base64InputStream(inputStream18);
        int int21 = base64InputStream20.available();
        byte[] byteArray22 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray8, (java.io.InputStream) base64InputStream20);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream25 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream20, false, true);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, (java.io.InputStream) base64InputStream20);
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.getDigest("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1", messageDigest26);
        java.io.RandomAccessFile randomAccessFile28 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest27, randomAccessFile28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str19, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.digest.HmacUtils hmacUtils21 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.lang.String str23 = hmacUtils21.hmacHex("AGgAaQAh");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2329ac90da8f021a7ab03b9651172d4e2743a491e6bf53a8f2cf6f53" + "'", str23, "2329ac90da8f021a7ab03b9651172d4e2743a491e6bf53a8f2cf6f53");
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils("SHA3-224", "org.apache.commons.codec.EncoderException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm SHA3-224 not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        java.lang.String str11 = uRLCodec1.getDefaultCharset();
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray15);
        byte[] byteArray18 = uRLCodec1.encode(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        java.lang.String str21 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str17, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$75da6acc$oyNM9tBh8syHhbU1A.bBA." + "'", str20, "$apr1$75da6acc$oyNM9tBh8syHhbU1A.bBA.");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\000" + "'", str21, "\000");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec4 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.net.BCodec bCodec8 = new org.apache.commons.codec.net.BCodec(charset6, codecPolicy7);
        org.apache.commons.codec.net.QCodec qCodec9 = new org.apache.commons.codec.net.QCodec(charset6);
        java.lang.String str10 = quotedPrintableCodec4.decode("D123", charset6);
        java.lang.String str12 = quotedPrintableCodec4.decode("00001010000011010110100001000001010100010110000101000001011001110100011101000001");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "D123" + "'", str10, "D123");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00001010000011010110100001000001010100010110000101000001011001110100011101000001" + "'", str12, "00001010000011010110100001000001010100010110000101000001011001110100011101000001");
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        int int7 = base64InputStream5.read();
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        java.lang.String str8 = doubleMetaphone0.doubleMetaphone("", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("dfdda15d09ab512f6f012e71da796e6d22ff94eede59f4b13bbe9064", "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        long[] longArray3 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[122, -26, -9, 38, -67, -63, -22, -61, 118, 17, -42, -101, -35, -40, 121, -65, -1, -88, -23, -116, 68, -18, 114, -92, 110, 93, -41, -108, 126, -47, 84, 55, 42, -33, -42, -26, -10, 101, -50, 23, 9, 49, 37, -9, 5, 5, 83, 80]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[7153316316496570401, -822477568862995498]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream1 = org.apache.commons.codec.Resources.getInputStream("=?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: =?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("2ef0725975afd171e9cb76444b4969c3", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[40, 124, 24, -46, 24, 96, 14, 11, 88, 89, -53, 21, -81, 45, 3, -25, -57, 95, 92, -48]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "6d3ba00fc231ec220cd6c6dd28fef753175b769b3e7670d6f171b845" + "'", str3, "6d3ba00fc231ec220cd6c6dd28fef753175b769b3e7670d6f171b845");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray9, "kBAwnYFpJm7aQ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: kBAwnYFpJm7aQ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[82, 109, 105, 74, 100, 111, 76, 77, 48, 114, 72, 117, 68, 75, 54, 78, 120, 86, 108, 72, 75, 82, 43, 66, 110, 77, 87, 101, 52, 83, 98, 49, 118, 83, 81, 55, 71, 70, 74, 88, 100, 66, 82, 66, 79, 117, 55, 86, 101, 65, 116, 102, 115, 82, 67, 81, 65, 52, 99, 86, 118, 117, 48, 98, 65, 72, 70, 75, 70, 98, 77, 99, 106, 90, 90, 48, 13, 10, 43, 57, 118, 102, 102, 57, 81, 90, 72, 65, 61, 61, 13, 10]");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.lang.String str8 = bCodec2.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = bCodec2.decode("b407da1ada9e730a682b465654ce978c");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary("75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        doubleMetaphoneResult4.appendPrimary('4');
        doubleMetaphoneResult4.append("E99B98");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.Object obj2 = metaphone0.encode((java.lang.Object) "$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/");
        int int3 = metaphone0.getMaxCodeLen();
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "PRSK" + "'", obj2, "PRSK");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray35 = hmacUtils32.hmac(byteBuffer34);
        java.io.File file36 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = hmacUtils32.hmac(file36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest4);
        java.io.OutputStream outputStream7 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream8 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream7);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec12 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray18);
        java.lang.Object obj25 = quotedPrintableCodec12.decode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream26 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream8, true, 1, byteArray18);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false, 1757052779);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest4, byteArray30);
        java.io.RandomAccessFile randomAccessFile32 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest4, randomAccessFile32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream7);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAAAAAA" + "'", str22, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str24, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, false);
        byte[] byteArray19 = org.apache.commons.codec.digest.Blake3.hash(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0A01640101" + "'", str18, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90" + "'", str20, "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[127, 78, -21, -107, 91, -13, -38, 115, 18, 18, -25, 66, -127, -57, -120, -20, -38, 122, -43, -116, 72, 62, 97, 37, 80, -3, -117, -65, 37, 127, 84, -108, -65, -7, -36, -64, 119, -103, 122, -82, 66, -76, -22, 94, 126, -108, 122, 3, 62, 80, 35, 127, -6, -49, -41, -93, 71, -47, 120, 96, 122, 67, 37, 116]");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        byte[] byteArray0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        org.apache.commons.codec.digest.HmacUtils hmacUtils9 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec11 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray17, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray17);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray17);
        java.lang.Object obj24 = quotedPrintableCodec11.decode((java.lang.Object) byteArray17);
        org.apache.commons.codec.digest.HmacUtils hmacUtils25 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray17);
        byte[] byteArray27 = hmacUtils25.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.codec.digest.Blake3.keyedHash(byteArray0, byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str20, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AAAAAAA" + "'", str21, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str23, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-12, 93, -49, 17, -103, 67, 92, -1, -23, 2, -103, 20, 20, 31, -14, -34, 8, 44, -47, -108, 7, -93, 58, -124, -99, -107, -50, -35]");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.String str5 = bCodec2.encode("Ptz9RTz3KVvV2");
        java.nio.charset.Charset charset6 = bCodec2.getCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "=?UTF-8?B?UHR6OVJUejNLVnZWMg==?=" + "'", str5, "=?UTF-8?B?UHR6OVJUejNLVnZWMg==?=");
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_1.reset();
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer6 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest4, byteBuffer6);
        char[] charArray9 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, true);
        byte[] byteArray10 = hex3.decode(byteBuffer6);
        xXHash32_1.update(byteBuffer6);
        char[] charArray13 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, false);
        java.lang.String str15 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer6, true);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest34, inputStream35);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream38 = new org.apache.commons.codec.binary.Base16InputStream(inputStream35, false);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.shaHex((java.io.InputStream) base16InputStream38);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.md5Hex((java.io.InputStream) base16InputStream38);
        java.lang.String str41 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray32, (java.io.InputStream) base16InputStream38);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream43 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base16InputStream38, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str39, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str40, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7516c70c482edf6875ceeebcf2f59b6e1710acbc432fa2c0f4c9551661568709b30b8b3c4025be1396f0885b975b8beba34be8451a6f8adf33ed1480ebd15181" + "'", str41, "7516c70c482edf6875ceeebcf2f59b6e1710acbc432fa2c0f4c9551661568709b30b8b3c4025be1396f0885b975b8beba34be8451a6f8adf33ed1480ebd15181");
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        boolean boolean2 = nysiis1.isStrict();
        boolean boolean3 = nysiis1.isStrict();
        java.lang.String str5 = nysiis1.encode("rules");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex7 = new org.apache.commons.codec.language.RefinedSoundex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        java.lang.String str9 = refinedSoundex7.encode("AAAAAAA");
        java.lang.Object obj10 = nysiis1.encode((java.lang.Object) "AAAAAAA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RAL" + "'", str5, "RAL");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "A6" + "'", str9, "A6");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "A" + "'", obj10, "A");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d", "2a19f01583f35572ae07990bd23d0b8062321b36");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[54, -47, -97, 76, -100, -116, 36, -40, -79, -49, -95, 52, 98, 7, -10, 93, -28, -104, -100, -51, -91, -26, 38, -12, -71, -113, 127, -24, 48, 29, 80, -18]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byteArray4);
        byte[] byteArray8 = new byte[] { (byte) -1 };
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray4, byteArray8);
        java.lang.String str10 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray4);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[107, -78, -85, -69, -98, -67, -26, -85, -106, 2, -66, 10, 61, 109, -27, -102, 4, 127, 56, -120]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$5$qyQelwDl$KPA0G4AjRS4MZy8xrKcltoARdkApaAgpLjGWZFkBwc9" + "'", str10, "$5$qyQelwDl$KPA0G4AjRS4MZy8xrKcltoARdkApaAgpLjGWZFkBwc9");
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("\000\000\000\000\000", (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin 32, end 32, length 5");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(false, (byte) 1);
        boolean boolean4 = base32_2.isInAlphabet("$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.String str4 = bCodec2.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = bCodec2.decode((java.lang.Object) "ffffff");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str32 = base32_22.encodeAsString(byteArray31);
        org.apache.commons.codec.digest.HmacUtils hmacUtils33 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray31);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray31);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ABUAA2IAEE======" + "'", str32, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AGgAaQAh" + "'", str35, "AGgAaQAh");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d" + "'", str36, "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream1 = org.apache.commons.codec.Resources.getInputStream("386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: 386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = uRLCodec1.decode("$6$YsgOW2gi$hPo13Ua1MDGerHBx2XYWh4yrERXk.LBVVOgkf5pWXZ1A9CeiRIaYNAri.c.w7Fe0fQs./a8ZF5oAG1/eOTimO1");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: hi!");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = qCodec3.decode(obj5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = qCodec3.decode("a9c412bc47e545109e63db091b6ee4b3");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray6);
        org.apache.commons.codec.net.PercentCodec percentCodec12 = new org.apache.commons.codec.net.PercentCodec(byteArray6, false);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long21 = base32_14.getEncodedLength(byteArray18);
        byte[] byteArray22 = percentCodec12.decode(byteArray18);
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray28);
        byte[] byteArray31 = uRLCodec24.decode(byteArray28);
        byte[] byteArray32 = null;
        byte[] byteArray33 = uRLCodec24.decode(byteArray32);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_43 = new org.apache.commons.codec.binary.Base16();
        boolean boolean45 = base16_43.isInAlphabet("AAAAAAA");
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str51 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray49, true);
        java.lang.String str52 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray49);
        boolean boolean54 = base16_43.isInAlphabet(byteArray49, true);
        byte[] byteArray55 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray39, byteArray49);
        byte[] byteArray56 = uRLCodec24.encode(byteArray55);
        byte[] byteArray57 = percentCodec12.decode(byteArray56);
        byte[] byteArray60 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str67 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray66);
        java.lang.String str69 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray66, false);
        java.lang.String str70 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray60, byteArray66);
        byte[] byteArray72 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray72);
        java.io.InputStream inputStream74 = java.io.InputStream.nullInputStream();
        java.lang.String str75 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray73, inputStream74);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream76 = new org.apache.commons.codec.binary.Base64InputStream(inputStream74);
        byte[] byteArray77 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray66, (java.io.InputStream) base64InputStream76);
        java.lang.String str78 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex((java.io.InputStream) base64InputStream76);
        long long80 = base64InputStream76.skip((long) 64);
        java.lang.String str81 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray56, (java.io.InputStream) base64InputStream76);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str20, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 8L + "'", long21 == 8L);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str30, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ffffff" + "'", str51, "ffffff");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str52, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 43, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str67, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0A01640101" + "'", str69, "0A01640101");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str70, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str75, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str78, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0f0a92954a6653f75e039d051a1af95b7c9eddf8" + "'", str81, "0f0a92954a6653f75e039d051a1af95b7c9eddf8");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C2 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C2.reset();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        pureJavaCrc32C2.update(byteArray6, (-690116322), (-1612190696));
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        pureJavaCrc32C2.update(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray21, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray13, byteArray21);
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray30 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet27, byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray13, byteArray29);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, true, (int) '4');
        java.io.InputStream inputStream37 = java.io.InputStream.nullInputStream();
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream37);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream39 = new org.apache.commons.codec.binary.Base32InputStream(inputStream37);
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray13, inputStream37);
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray13);
        byte[] byteArray42 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray1, byteArray13);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray42);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str22, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str24, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AAAAAAA" + "'", str25, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str31, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str38, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b" + "'", str40, "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b" + "'", str41, "4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[72, 118, -60, 39, -38, -102, 54, -49, 19, 100, 73, 58, -100, 55, -95, 47, -49, -60, 92, 53, -5, -89, 26, -49, 12, 61, 42, -101, -61, -50, -55, 53, -71, -59, -108, -71, 61, 30, -101, 80, 119, 81, 80, -58, 47, -32, -69, 35, 55, 105, 85, -21, -33, -30, 84, 104, -38, -112, 56, 9, 81, 105, 10, 76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "96dd4e7e704709544e2ff20a87f44da7dc5ebef6b0b5e59f2f680c7f8241d61a" + "'", str43, "96dd4e7e704709544e2ff20a87f44da7dc5ebef6b0b5e59f2f680c7f8241d61a");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages languages4 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType2);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType6 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang7 = org.apache.commons.codec.language.bm.Lang.instance(nameType6);
        org.apache.commons.codec.language.bm.NameType nameType8 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder9 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType10 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder9.setRuleType(ruleType10);
        org.apache.commons.codec.language.bm.NameType nameType12 = beiderMorseEncoder9.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType13 = beiderMorseEncoder9.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet14 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap15 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType8, ruleType13, languageSet14);
        org.apache.commons.codec.language.bm.NameType nameType16 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang17 = org.apache.commons.codec.language.bm.Lang.instance(nameType16);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet19 = lang17.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet21 = lang17.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap22 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType6, ruleType13, languageSet21);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap23 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType5, languageSet21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme24 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languages4);
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang7);
        org.junit.Assert.assertTrue("'" + nameType8 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType8.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType10 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType10.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType12 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType12.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType13 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType13.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + nameType16 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType16.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang17);
        org.junit.Assert.assertNotNull(languageSet19);
        org.junit.Assert.assertNotNull(languageSet21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec("$6$E7eZGjZf$Jqyd.vTGhVRwebrSYS9sFMSY.bZ6C0G9qNcPNqiyrYerzQ4USxHe5IifQhAnED5M8rhf3QGglP3T8IgI3.z68.");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: $6$E7eZGjZf$Jqyd.vTGhVRwebrSYS9sFMSY.bZ6C0G9qNcPNqiyrYerzQ4USxHe5IifQhAnED5M8rhf3QGglP3T8IgI3.z68.");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(46947589L, 629192958);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1351066954) + "'", int2 == (-1351066954));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray5);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C11 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C11.reset();
        java.util.BitSet bitSet13 = null;
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray16 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet13, byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray15);
        pureJavaCrc32C11.update(byteArray15, (-690116322), (-1612190696));
        javax.crypto.Mac mac21 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac10, byteArray15);
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray15);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str17, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(mac21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32();
        long long2 = xXHash32_1.getValue();
        xXHash32_1.reset();
        xXHash32_1.update((int) (byte) 100);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray7);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        xXHash32_1.update(byteArray7);
        javax.crypto.Mac mac11 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac12 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac("=?UTF-8?Q?=00=00=00=00=00?=", byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm =?UTF-8?Q?=00=00=00=00=00?= not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==" + "'", str9, "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
        org.junit.Assert.assertNotNull(mac11);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        int int1 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) 1595328082);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 852759869 + "'", int1 == 852759869);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray3, false);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        byte[] byteArray19 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray20, inputStream21);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream23 = new org.apache.commons.codec.binary.Base64InputStream(inputStream21);
        int int24 = base64InputStream23.available();
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray11, (java.io.InputStream) base64InputStream23);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream28 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream23, false, true);
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray5, (java.io.InputStream) base64InputStream23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-94, -71, -20, 113, -13, 85, 125, -85, -105, -45, 25, -6, 7, 28, -4, -54, 26, 118, -50, 96, 126, -92, 117, 32, 53, 51, -80, -85, -69, -86, 103, -30]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[61, 65, 50, 61, 66, 57, 61, 69, 67, 113, 61, 70, 51, 85, 125, 61, 65, 66, 61, 57, 55, 61, 68, 51, 61, 49, 57, 61, 70, 65, 61, 48, 55, 61, 49, 67, 61, 70, 67, 61, 67, 65, 61, 49, 65, 118, 61, 67, 69, 96, 126, 61, 65, 52, 117, 32, 53, 51, 61, 66, 48, 61, 65, 66, 61, 66, 66, 61, 65, 65, 103, 61, 69, 50]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str22, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "76f40729dacdcd7c7ebeae1b7e1b3f6834109961" + "'", str29, "76f40729dacdcd7c7ebeae1b7e1b3f6834109961");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray4 = quotedPrintableCodec1.decode(byteArray3);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.net.BCodec bCodec8 = new org.apache.commons.codec.net.BCodec(charset6, codecPolicy7);
        org.apache.commons.codec.net.QCodec qCodec9 = new org.apache.commons.codec.net.QCodec(charset6);
        java.nio.charset.Charset charset10 = qCodec9.getCharset();
        java.lang.String str11 = quotedPrintableCodec1.encode("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", charset10);
        org.apache.commons.codec.CodecPolicy codecPolicy12 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.net.BCodec bCodec13 = new org.apache.commons.codec.net.BCodec(charset10, codecPolicy12);
        java.nio.charset.Charset charset15 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy16 = null;
        org.apache.commons.codec.net.BCodec bCodec17 = new org.apache.commons.codec.net.BCodec(charset15, codecPolicy16);
        java.nio.charset.Charset charset19 = null;
        java.nio.charset.Charset charset20 = org.apache.commons.codec.Charsets.toCharset(charset19);
        java.lang.String str21 = bCodec17.encode("SHA-224", charset20);
        java.lang.String str22 = bCodec13.encode("231487248328134213238462342374524841746881382", charset20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0" + "'", str11, "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0");
        org.junit.Assert.assertTrue("'" + codecPolicy12 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy12.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str21, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "=?UTF-8?B?MjMxNDg3MjQ4MzI4MTM0MjEzMjM4NDYyMzQyMzc0NTI0ODQxNzQ2ODgxMzgy?=" + "'", str22, "=?UTF-8?B?MjMxNDg3MjQ4MzI4MTM0MjEzMjM4NDYyMzQyMzc0NTI0ODQxNzQ2ODgxMzgy?=");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream29);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream29);
        java.lang.String str34 = hmacUtils8.hmacHex(inputStream29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray40);
        java.lang.String str43 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray40, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray40);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray40);
        byte[] byteArray48 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        java.io.InputStream inputStream50 = java.io.InputStream.nullInputStream();
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray49, inputStream50);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream52 = new org.apache.commons.codec.binary.Base64InputStream(inputStream50);
        int int53 = base64InputStream52.available();
        byte[] byteArray54 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray40, (java.io.InputStream) base64InputStream52);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream57 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream52, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream58 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream57);
        java.lang.String str59 = hmacUtils8.hmacHex((java.io.InputStream) base16InputStream58);
        org.apache.commons.codec.binary.Base32 base32_61 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet62 = null;
        byte[] byteArray64 = new byte[] { (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet62, byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray65);
        boolean boolean68 = base32_61.isInAlphabet(byteArray66, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str71 = base32_61.encodeAsString(byteArray70);
        java.security.MessageDigest messageDigest72 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest73 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream74 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest75 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest73, inputStream74);
        java.lang.String str76 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream74);
        byte[] byteArray77 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream74);
        java.security.MessageDigest messageDigest78 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest72, inputStream74);
        java.lang.String str79 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray70, inputStream74);
        byte[] byteArray80 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream74);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream81 = new org.apache.commons.codec.binary.Base16InputStream(inputStream74);
        byte[] byteArray82 = hmacUtils8.hmac(inputStream74);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str30, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str31, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str34, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str43, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AAAAAAA" + "'", str44, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str45, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str46, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str51, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str59, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ABUAA2IAEE======" + "'", str71, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest72);
        org.junit.Assert.assertEquals(messageDigest72.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest73);
        org.junit.Assert.assertEquals(messageDigest73.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(messageDigest75);
        org.junit.Assert.assertEquals(messageDigest75.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str76, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest78);
        org.junit.Assert.assertEquals(messageDigest78.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str79, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        org.apache.commons.codec.CodecPolicy codecPolicy9 = base32_1.getCodecPolicy();
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_512("$6$DDWobXRt$xhVIH9eYUt.YhcPWJgdPO9wi10jTfEY4zKmadE5JWQtwRGLDAYg2C8j0qgku8B9jroG5NSZTzuShahiYPFC1d.");
        boolean boolean13 = base32_1.isInAlphabet(byteArray11, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy9 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy9.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-70, 48, 5, 24, 92, 122, 81, -53, 4, 74, 32, -16, 35, 10, 46, 34, 98, 100, 73, -34, 99, -57, 15, -48, -23, -102, 84, 87, -105, 67, -118, 113, -13, -22, -58, 100, -36, 64, 87, 117, -9, -65, -83, -75, -102, -32, 112, -71, -125, 55, 13, -85, 94, 89, -48, -40, -5, 89, -40, 61, 41, -57, 63, 24]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest9, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base32_17.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream3, true, (int) (byte) 0, byteArray15, codecPolicy18);
        boolean boolean20 = base32InputStream19.isStrictDecoding();
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        org.apache.commons.codec.CodecPolicy codecPolicy32 = base32_24.getCodecPolicy();
        org.apache.commons.codec.binary.Base16InputStream base16InputStream33 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base32InputStream19, false, false, codecPolicy32);
        base16InputStream33.mark(1757052779);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy32 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy32.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, inputStream6);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream8 = new org.apache.commons.codec.binary.Base64InputStream(inputStream6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream8);
        byte[] byteArray13 = base64InputStream8.readNBytes((int) ' ');
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream8);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils16 = new org.apache.commons.codec.digest.DigestUtils(messageDigest15);
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest17, byteBuffer19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer19, true);
        java.lang.String str23 = digestUtils16.digestAsHex(byteBuffer19);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, byteBuffer19);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha256("SHA-384");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms27 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet28 = null;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet28, byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray31);
        javax.crypto.Mac mac33 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms27, byteArray32);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray39);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray39);
        javax.crypto.Mac mac46 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms27, byteArray39);
        byte[] byteArray47 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray39);
        byte[] byteArray48 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray26, byteArray39);
        java.lang.String str49 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray24, byteArray39);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str7, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str9, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str10, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str23, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[99, 38, -77, 37, -76, -88, -70, 75, 36, -86, -100, 50, 57, -117, -62, 68, 1, -19, 53, -38, 39, -22, -16, -23, -121, -47, 25, -17, -125, -93, -84, -21]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms27 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms27.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AAAAAAA" + "'", str43, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str44, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str45, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-70, 124, 33, -58, 101, -103, -8, -99, 90, -32, 14, 8, 25, -89, 14, 100, -19, 5, -81, 65, -123, -19, 0, -80, -124, -34, 38, 116, 100, 63, -61, -41, -27, -65, 107, -15, -40, 88, -38, -102, 74, -116, -121, 119, -41, 75, 90, -91, 109, 38, 44, 22, -24, 49, -7, -60, 63, 13, -24, -39, -40, -96, 108, 115]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4c3f3e9fb08af3070d94c0708ce28bb02bc2d2a6680e6708c41c38fd00a9600fb9f3dd60a4129b1527eea7f742784026" + "'", str49, "4c3f3e9fb08af3070d94c0708ce28bb02bc2d2a6680e6708c41c38fd00a9600fb9f3dd60a4129b1527eea7f742784026");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = qCodec5.encode("$apr1$0Acd8L3u$xDzme7ba28RmNwAQkMJJO/", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream6 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str7, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str8, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        java.nio.charset.Charset charset2 = quotedPrintableCodec1.getCharset();
        org.junit.Assert.assertNotNull(charset2);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray10, (int) (short) 0, 1797466354);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray4 = quotedPrintableCodec1.decode(byteArray3);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.net.BCodec bCodec8 = new org.apache.commons.codec.net.BCodec(charset6, codecPolicy7);
        org.apache.commons.codec.net.QCodec qCodec9 = new org.apache.commons.codec.net.QCodec(charset6);
        java.nio.charset.Charset charset10 = qCodec9.getCharset();
        java.lang.String str11 = quotedPrintableCodec1.encode("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", charset10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = quotedPrintableCodec1.decode("2ad36d9d51748e827af1acab7568d5e2", "1f1b1baf2ac1c1535c2b941d8e8ddfa01a75c726d96e3254039db2e2219f58f0");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 1f1b1baf2ac1c1535c2b941d8e8ddfa01a75c726d96e3254039db2e2219f58f0");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0" + "'", str11, "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0");
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        byte[] byteArray8 = binaryCodec0.toByteArray("UTF-16BE");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[8]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet3, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        boolean boolean9 = base32_2.isInAlphabet(byteArray7, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray7);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest11, file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[82, 109, 105, 74, 100, 111, 76, 77, 48, 114, 72, 117, 68, 75, 54, 78, 120, 86, 108, 72, 75, 82, 43, 66, 110, 77, 87, 101, 52, 83, 98, 49, 118, 83, 81, 55, 71, 70, 74, 88, 100, 66, 82, 66, 79, 117, 55, 86, 101, 65, 116, 102, 115, 82, 67, 81, 65, 52, 99, 86, 118, 117, 48, 98, 65, 72, 70, 75, 70, 98, 77, 99, 106, 90, 90, 48, 13, 10, 43, 57, 118, 102, 102, 57, 81, 90, 72, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet5 = lang3.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme6 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languageSet5);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        int int1 = org.apache.commons.codec.digest.MurmurHash2.hash32("SHA-224");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-755363659) + "'", int1 == (-755363659));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, false);
        byte[] byteArray19 = org.apache.commons.codec.digest.Blake3.hash(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray19, true);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray19, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 32 out of bounds for length 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0A01640101" + "'", str18, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90" + "'", str20, "e08bf3a020bff7365364ffd559bdce7218cd9ce1c086aea324c4ef0a8ef642561afccf04698235cf68993f6416319c90");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "3d53bcbc17025716163721aecfb8c50c914899464fa2549d94cae78c239c5068");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "3d53bcbc17025716163721aecfb8c50c914899464fa2549d94cae78c239c5068");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[3, d, 5, 3, b, c, b, c, 1, 7, 0, 2, 5, 7, 1, 6, 1, 6, 3, 7, 2, 1, a, e, c, f, b, 8, c, 5, 0, c, 9, 1, 4, 8, 9, 9, 4, 6, 4, f, a, 2, 5, 4, 9, d, 9, 4, c, a, e, 7, 8, c, 2, 3, 9, c, 5, 0, 6, 8]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        byte[] byteArray23 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        java.io.InputStream inputStream25 = java.io.InputStream.nullInputStream();
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray24, inputStream25);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream27 = new org.apache.commons.codec.binary.Base64InputStream(inputStream25);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream27);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha256Hex((java.io.InputStream) base64InputStream27);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str35 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray34);
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray34);
        java.nio.charset.Charset charset38 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy41 = base64_40.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec42 = new org.apache.commons.codec.net.BCodec(charset38, codecPolicy41);
        org.apache.commons.codec.binary.Base16 base16_43 = new org.apache.commons.codec.binary.Base16(false, codecPolicy41);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream44 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream27, true, 0, byteArray34, codecPolicy41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) '-', byteArray13, true, codecPolicy41);
        boolean boolean46 = base64_45.isStrictDecoding();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str26, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str28, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str29, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str30, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str35, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "a9c412bc47e545109e63db091b6ee4b3" + "'", str36, "a9c412bc47e545109e63db091b6ee4b3");
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + codecPolicy41 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy41.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_512("66/bcRxcmsqC.");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[79, -106, -105, 44, -64, 88, -109, 55, -55, -55, 75, 90, -109, -64, -29, 0, -41, -30, 34, -10, 96, -16, 124, 70, 66, -105, 97, 102, 84, -45, 28, -107, 91, -6, 47, -99, 103, -36, -122, 109, -25, -25, -22, 0, -2, 20, 103, 95, -44, -106, 90, -43, 25, -112, 34, -101, -77, -24, -1, 106, -55, 102, -68, -53]");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray10);
        java.lang.String str13 = base32_1.encodeAsString(byteArray12);
        byte[] byteArray16 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        long long17 = base32_1.getEncodedLength(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===" + "'", str13, "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 56L + "'", long17 == 56L);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        boolean boolean1 = org.apache.commons.codec.digest.HmacUtils.isAvailable("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt("TPTPFFFT11", "=?UTF-16BE?Q?=00$=006=00$=00o=00l=00h=00A=00U=00V=00h=000=00$=00f=00d=002=00x=00F=00X=00N=00N=00K=00W=00O=00X=003=00f=00O=00Q=00Q=00k=00K=00u=001=00d=00E=00D=00I=007=00A=00b=00q=00o=00o=00F=00E=00N=00R=008=00N=00K=00m=00z=00v=00t=00.=00X=00I=00d=00W=00U=00U=00e=00d=00S=00G=007=00/=00q=00x=00n=003=00D=00c=00l=00g=004=00n=00o=00x=000=00C=00e=00F=00S=00D=00y=00F=00w=009=00A=00e=00y=009=00W=00M=00N=003=000?=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: $apr1$=?UTF-16BE?Q?=00$=006=00$=00o=00l=00h=00A=00U=00V=00h=000=00$=00f=00d=002=00x=00F=00X=00N=00N=00K=00W=00O=00X=003=00f=00O=00Q=00Q=00k=00K=00u=001=00d=00E=00D=00I=007=00A=00b=00q=00o=00o=00F=00E=00N=00R=008=00N=00K=00m=00z=00v=00t=00.=00X=00I=00d=00W=00U=00U=00e=00d=00S=00G=007=00/=00q=00x=00n=003=00D=00c=00l=00g=004=00n=00o=00x=000=00C=00e=00F=00S=00D=00y=00F=00w=009=00A=00e=00y=009=00W=00M=00N=003=000?=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream11 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, false);
        byte[] byteArray14 = null;
        java.io.OutputStream outputStream15 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream18 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream15, false, false);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy23 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream24 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream15, false, true, codecPolicy23);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream25 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, false, 686869806, byteArray14, codecPolicy23);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream27 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, false);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy23 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy23.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        baseNCodecOutputStream9.close();
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA-512/224");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream15 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, 629192958, byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [2Y?RJ9??;?+tm???k??W?:???\\]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[50, 89, -31, 82, 74, 57, -37, -119, -106, 59, -26, 43, 116, 109, -120, -62, -89, -100, 107, -68, -100, 87, -101, 58, -9, 4, -48, 92]");
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        beiderMorseEncoder0.setMaxPhonemes((int) (byte) 100);
        org.apache.commons.codec.language.bm.RuleType ruleType6 = beiderMorseEncoder0.getRuleType();
        beiderMorseEncoder0.setConcat(false);
        org.apache.commons.codec.language.Soundex soundex11 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator12 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex11);
        org.apache.commons.codec.language.bm.NameType nameType14 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType15 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet16 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap17 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType14, ruleType15, languageSet16);
        int int18 = stringEncoderComparator12.compare((java.lang.Object) "0Acd8L3u4hVxI", (java.lang.Object) ruleType15);
        // The following exception was thrown during execution in test generation
        try {
            beiderMorseEncoder0.setRuleType(ruleType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType6 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType6.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType14 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType14.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType15 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType15.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1);
        byte[] byteArray4 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray3);
        byte[] byteArray5 = org.apache.commons.codec.binary.Hex.decodeHex(charArray3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 2, 0, 0, 24, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream35);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream37 = new org.apache.commons.codec.binary.Base32InputStream(inputStream35);
        java.lang.String str38 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray11, inputStream35);
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str36, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b" + "'", str38, "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        java.lang.String str2 = caverphone2_0.encode("663b90c899fa25a111067be0c22ffc64dcf581c2");
        java.lang.String str4 = caverphone2_0.encode("0a01640101");
        boolean boolean7 = caverphone2_0.isEncodeEqual("9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3", "=?UTF-8?B?JDYkRzZHV0RoQVIkNEZ1aW43emdPV0w5UXB0UnFNVDZyWjRQRi5sZVV3Vzcvd21sbExRbGppT3FKTDNjNWpLaVhOeU9MbDNsb080SUpiVGdKZzZaVTVIaG04eVQzN1VhZDE=?=");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PKFPKFKTKF" + "'", str2, "PKFPKFKTKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "A111111111" + "'", str4, "A111111111");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le("3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[51, 0, 68, 0, 53, 0, 51, 0, 66, 0, 67, 0, 66, 0, 67, 0, 49, 0, 55, 0, 48, 0, 50, 0, 53, 0, 55, 0, 49, 0, 54, 0, 49, 0, 54, 0, 51, 0, 55, 0, 50, 0, 49, 0, 65, 0, 69, 0, 67, 0, 70, 0, 66, 0, 56, 0, 67, 0, 53, 0, 48, 0, 67, 0, 57, 0, 49, 0, 52, 0, 56, 0, 57, 0, 57, 0, 52, 0, 54, 0, 52, 0, 70, 0, 65, 0, 50, 0, 53, 0, 52, 0, 57, 0, 68, 0, 57, 0, 52, 0, 67, 0, 65, 0, 69, 0, 55, 0, 56, 0, 67, 0, 50, 0, 51, 0, 57, 0, 67, 0, 53, 0, 48, 0, 54, 0, 56, 0]");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("BFKF");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray1, inputStream3);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-49, -99, -62, 41, -92, -55, 40, 19, -29, 48, 14, 72, 64, -110, -103, 94, -111, -33, -31, 69]");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str5, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "b3fab8d26023752d081c315d7cf8c228" + "'", str7, "b3fab8d26023752d081c315d7cf8c228");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str8, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str13 = org.apache.commons.codec.digest.Crypt.crypt(byteArray6, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray6);
        byte[] byteArray24 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray23);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray24);
        int int26 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0Acd8L3u4hVxI" + "'", str13, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str22, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1310417787) + "'", int26 == (-1310417787));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[74, 84, 65, 119, 74, 84, 65, 119, 74, 84, 65, 119, 74, 84, 65, 119, 74, 84, 65, 119, 13, 10]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream19);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384("SHA-1");
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray25);
        java.lang.String str27 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray25);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream28 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream21, false, (-1642666625), byteArray25);
        javax.crypto.Mac mac29 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray25);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[94, -81, -34, -93, 111, 85, 21, -122, -91, 51, 5, 19, 65, 65, 60, -6, 74, 11, -111, -21, -81, -40, -24, -107, -32, 12, -76, -30, -114, -80, -20, 35, -13, 110, 45, -117, -35, 61, 121, 100, 114, -112, -92, 83, 8, 101, -14, 11]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[62, -94, 68, -91, 123, 82, -89, -2, 34, -45, -54, -41, 26, 25, -123, 67, 23, -107, -85, 115, 120, -97, -87, 66, -57, 63, -110, 111, -113, -4, -35, -62, 6, 54, -105, 34, 121, -55, 53, 74, -94, -42, 51, 18, 18, 23, 83, 94]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "WuBJ5yOAoV.rQ" + "'", str27, "WuBJ5yOAoV.rQ");
        org.junit.Assert.assertNotNull(mac29);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet3 = lang1.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet5 = lang1.guessLanguages("400000");
        java.lang.String str7 = lang1.guessLanguage("659f68d28b815b89f9f28ae0ad2798e5a63293e6a6955e14dd071e66ef7441b5");
        java.lang.String str9 = lang1.guessLanguage("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languageSet3);
        org.junit.Assert.assertNotNull(languageSet5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "any" + "'", str7, "any");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "any" + "'", str9, "any");
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern6 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr7 = rule4.getPhoneme();
        java.lang.String str8 = rule4.getPattern();
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertNotNull(rPattern6);
        org.junit.Assert.assertNull(phonemeExpr7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "d7bXONth0AIyo" + "'", str8, "d7bXONth0AIyo");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils14 = new org.apache.commons.codec.digest.DigestUtils(messageDigest13);
        java.io.OutputStream outputStream15 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_17 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream19 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream15, (org.apache.commons.codec.binary.BaseNCodec) base16_17, false);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str23 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray22);
        long long24 = base16_17.getEncodedLength(byteArray22);
        byte[] byteArray25 = digestUtils14.digest(byteArray22);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils27 = new org.apache.commons.codec.digest.DigestUtils(messageDigest26);
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer30 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest28, byteBuffer30);
        char[] charArray33 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer30, true);
        java.lang.String str34 = digestUtils27.digestAsHex(byteBuffer30);
        byte[] byteArray35 = digestUtils14.digest(byteBuffer30);
        byte[] byteArray36 = digestUtils1.digest(byteBuffer30);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\000\ufffd" + "'", str23, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4L + "'", long24 == 4L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str34, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        java.lang.String str3 = soundex1.encode("01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "D1c8" + "'", str3, "D1c8");
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        java.lang.Class<?> wildcardClass9 = base64OutputStream1.getClass();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.Blake3.hash(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        long long11 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray5);
        javax.crypto.Mac mac12 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray5);
        java.lang.String str14 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray5, "202501fe2df741220d38e4ee0487ef0aae4dbf81ea9af5e7ccb75d0eba0c5591b27fd090e0ef62e26c5813d21bf9ce1f1bb3b28da49a1b4996abb8defa283943");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str10, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7793026892456512543L) + "'", long11 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "20WJtKQG382RI" + "'", str14, "20WJtKQG382RI");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.codec.binary.Hex hex0 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer3 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, byteBuffer3);
        char[] charArray6 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer3, true);
        byte[] byteArray7 = hex0.decode(byteBuffer3);
        java.lang.Object obj9 = hex0.encode((java.lang.Object) "HmacMD5");
        java.nio.ByteBuffer byteBuffer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = hex0.decode(byteBuffer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        boolean boolean2 = nysiis1.isStrict();
        boolean boolean3 = nysiis1.isStrict();
        java.lang.String str5 = nysiis1.encode("rules");
        java.lang.String str7 = nysiis1.nysiis("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        java.lang.String str9 = nysiis1.nysiis("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RAL" + "'", str5, "RAL");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DBACDA" + "'", str7, "DBACDA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ORGAPA" + "'", str9, "ORGAPA");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-53, 75, 121, 41, -67, 74, 14, 41, -69, 35, -97, -31, 55, -125, 39, -64, 23, 76, 0, -112, -62, 60, 68, -73, 48, -36, 44, -75, 92, 61, -66, -122]");
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        int int20 = base64InputStream17.available();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str10 = doubleMetaphone0.doubleMetaphone("PKKMYF", false);
        boolean boolean14 = doubleMetaphone0.isDoubleMetaphoneEqual("1d39b7b6097d46bfec94ab93ba5cad5488e66d759f8919dd10c80cc13d46a39fa0bfe924306de0c374aecab97706b204", "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9", true);
        byte[] byteArray16 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray17, inputStream18);
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream20);
        java.lang.String str23 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray17, inputStream20);
        byte[] byteArray25 = inputStream20.readNBytes((int) ' ');
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true);
        java.lang.String str28 = org.apache.commons.codec.digest.Crypt.crypt(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = doubleMetaphone0.encode((java.lang.Object) byteArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: DoubleMetaphone encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PKMF" + "'", str10, "PKMF");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str19, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str21, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str22, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str23, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$6$l7B5hRGz$grozRpAJfPvw7NchXzxmiW8NNEEFQ3i/pBY71aPmhdv2JT64q98zldn9ODk7QLiOQDu14M8GoFC0nkCq4eern/" + "'", str28, "$6$l7B5hRGz$grozRpAJfPvw7NchXzxmiW8NNEEFQ3i/pBY71aPmhdv2JT64q98zldn9ODk7QLiOQDu14M8GoFC0nkCq4eern/");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = qCodec3.decode("28c614425d5e992b2e041bff2c562bf078635574");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream3);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.md5("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        int int12 = inputStream3.readNBytes(byteArray9, 0, 0);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-63, -43, 9, -48, -27, 77, -30, 7, -123, 13, 34, -108, 2, -113, -117, -83]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str13, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.Languages languages5 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType3);
        beiderMorseEncoder0.setNameType(nameType3);
        beiderMorseEncoder0.setMaxPhonemes((-2042891860));
        org.apache.commons.codec.language.bm.RuleType ruleType9 = org.apache.commons.codec.language.bm.RuleType.RULES;
        java.lang.String str10 = ruleType9.getName();
        // The following exception was thrown during execution in test generation
        try {
            beiderMorseEncoder0.setRuleType(ruleType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(languages5);
        org.junit.Assert.assertTrue("'" + ruleType9 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType9.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "rules" + "'", str10, "rules");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "079564" + "'", str3, "079564");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream3 = new org.apache.commons.codec.binary.Base16InputStream(inputStream0, true, true);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = base16InputStream3.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray3 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray3);
        int int7 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray4, (-679748572), (-2042891860));
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 46466694 + "'", int7 == 46466694);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("dfdda15d09ab512f6f012e71da796e6d22ff94eede59f4b13bbe9064", "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray3, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [z??&????v????y????D?r?n]?~?T7*????e???1%???SP]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[122, -26, -9, 38, -67, -63, -22, -61, 118, 17, -42, -101, -35, -40, 121, -65, -1, -88, -23, -116, 68, -18, 114, -92, 110, 93, -41, -108, 126, -47, 84, 55, 42, -33, -42, -26, -10, 101, -50, 23, 9, 49, 37, -9, 5, 5, 83, 80]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType2 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine5 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType2, false, 1164493051);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = phoneticEngine5.encode("b407da1ada9e730a682b465654ce978c");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray6);
        byte[] byteArray11 = hex2.decode(byteArray6);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils13 = new org.apache.commons.codec.digest.DigestUtils(messageDigest12);
        java.io.OutputStream outputStream14 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_16 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream18 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream14, (org.apache.commons.codec.binary.BaseNCodec) base16_16, false);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray21);
        long long23 = base16_16.getEncodedLength(byteArray21);
        byte[] byteArray24 = digestUtils13.digest(byteArray21);
        java.nio.ByteBuffer byteBuffer26 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        java.lang.String str27 = digestUtils13.digestAsHex(byteBuffer26);
        byte[] byteArray28 = hex2.encode(byteBuffer26);
        java.security.MessageDigest messageDigest30 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream31 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest32 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest30, inputStream31);
        java.security.MessageDigest messageDigest33 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = hex2.decode((java.lang.Object) messageDigest32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: class java.security.MessageDigest$Delegate cannot be cast to class [C (java.security.MessageDigest$Delegate and [C are in module java.base of loader 'bootstrap')");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000\ufffd" + "'", str22, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4L + "'", long23 == 4L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393" + "'", str27, "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(messageDigest30);
        org.junit.Assert.assertEquals(messageDigest30.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertNotNull(messageDigest32);
        org.junit.Assert.assertEquals(messageDigest32.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest33);
        org.junit.Assert.assertEquals(messageDigest33.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray3 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList4 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4, phonemeArray3);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList6 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4);
        org.apache.commons.codec.language.bm.Rule rule7 = new org.apache.commons.codec.language.bm.Rule("=?UTF-8?B?U0hBLTIyNA==?=", "$1$FivXNt8U$ItIalCUBqAE1stNT0FzGp/", "\000\000\000\000\000", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList6);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern8 = rule7.getRContext();
        org.junit.Assert.assertNotNull(phonemeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(rPattern8);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(false);
        java.lang.String str3 = daitchMokotoffSoundex1.soundex("CABAFD");
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.UTF_16BE;
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset4);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator6 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) qCodec5);
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder7 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str9 = beiderMorseEncoder7.encode("d41d8cd98f00b204e9800998ecf8427e");
        java.lang.String str11 = beiderMorseEncoder7.encode("SHA3-224");
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray15 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet12, byteArray14);
        int int16 = stringEncoderComparator6.compare((java.lang.Object) str11, (java.lang.Object) byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = daitchMokotoffSoundex1.encode((java.lang.Object) stringEncoderComparator6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "477300|577300" + "'", str3, "477300|577300");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi" + "'", str9, "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "sa|so" + "'", str11, "sa|so");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream11 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, false);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream13 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        long long1 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.update((-755363659));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.Object obj5 = bCodec2.encode((java.lang.Object) "NLKTPMA111");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec7 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray10 = quotedPrintableCodec7.decode(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = bCodec2.decode((java.lang.Object) byteArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type [B cannot be decoded using BCodec");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "=?UTF-8?B?TkxLVFBNQTExMQ==?=" + "'", obj5, "=?UTF-8?B?TkxLVFBNQTExMQ==?=");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$1$w4jbEMEx$ZO09GN3memWCgLMjNrWcX/" + "'", str3, "$1$w4jbEMEx$ZO09GN3memWCgLMjNrWcX/");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray5);
        org.apache.commons.codec.binary.Base32 base32_14 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        boolean boolean21 = base32_14.isInAlphabet(byteArray19, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str24 = base32_14.encodeAsString(byteArray23);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest26, inputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream27);
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest25, inputStream27);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray23, inputStream27);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream27);
        java.lang.String str34 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray5, inputStream27);
        java.io.OutputStream outputStream35 = null;
        java.io.OutputStream outputStream38 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream39 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream38);
        byte[] byteArray42 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream39.write(byteArray42);
        base64OutputStream39.write((int) '4');
        base64OutputStream39.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream48 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream39);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str58 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray57);
        java.lang.String str60 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray57, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        java.io.InputStream inputStream63 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream66 = new org.apache.commons.codec.binary.Base16InputStream(inputStream63, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy69 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream70 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream66, false, false, codecPolicy69);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray57, true, codecPolicy69);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream72 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream48, true, false, codecPolicy69);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream73 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream35, false, true, codecPolicy69);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream74 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base16OutputStream73);
        long long75 = inputStream27.transferTo((java.io.OutputStream) base16OutputStream73);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\000\000\000\000\000" + "'", str12, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ABUAA2IAEE======" + "'", str24, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str32, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str34, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(outputStream38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str58, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str60, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AAAAAAA" + "'", str61, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy69 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy69.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("8f198685d9e52d7a95c867c39c611cfbfe2ff43aa855b443bd8be24f265b3c00c71ecd3e49ba9ce9a5d16ea9db521edb");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 8f198685d9e52d7a95c867c39c611cfbfe2ff43aa855b443bd8be24f265b3c00c71ecd3e49ba9ce9a5d16ea9db521edb");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray5);
        int int16 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray5, 4, (int) '#');
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray5);
        java.util.Random random18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray17, random18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str13, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1650246903 + "'", int16 == 1650246903);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-114, -115, -104, 71, -74, -67, 25, -117, -79, -104, 13, -77, 52, 101, -98, -106, -95, -65, 61, -69, 92, 86, 54, -116, 111, -85, -26, -10, -75, 97, 35, 39, -112, -29, -76, 12, 29, 79, -75, 10, 25, -61, 73, -79, 11, -36, 105, 80]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        java.util.BitSet bitSet37 = null;
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray40 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet37, byteArray39);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest36, byteArray39);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms42 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet43 = null;
        byte[] byteArray45 = new byte[] { (byte) 100 };
        byte[] byteArray46 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet43, byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray46);
        javax.crypto.Mac mac48 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms42, byteArray47);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str55 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray54);
        java.lang.String str57 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray54, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray54);
        java.lang.String str59 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray54);
        java.lang.String str60 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray54);
        javax.crypto.Mac mac61 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms42, byteArray54);
        org.apache.commons.codec.binary.Base32 base32_63 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet64 = null;
        byte[] byteArray66 = new byte[] { (byte) 100 };
        byte[] byteArray67 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet64, byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray67);
        boolean boolean70 = base32_63.isInAlphabet(byteArray68, false);
        byte[] byteArray72 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str73 = base32_63.encodeAsString(byteArray72);
        org.apache.commons.codec.digest.HmacUtils hmacUtils74 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms42, byteArray72);
        java.nio.ByteBuffer byteBuffer76 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray77 = hmacUtils74.hmac(byteBuffer76);
        java.security.MessageDigest messageDigest78 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest41, byteBuffer76);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms42 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms42.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str55, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str57, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AAAAAAA" + "'", str58, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str59, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str60, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ABUAA2IAEE======" + "'", str73, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(messageDigest78);
        org.junit.Assert.assertEquals(messageDigest78.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        java.lang.String str7 = doubleMetaphone0.doubleMetaphone("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d");
        java.lang.String str10 = doubleMetaphone0.doubleMetaphone("4304ae58307f209e0235ba9cfe90913ce5c2822ebff2eea1e4a4232b2cb091bd749c5b2b9a60934fe7a781ab453262653fce318fda150f2cfa0d2a2f4b434310", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PFTP" + "'", str7, "PFTP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FPKF" + "'", str10, "FPKF");
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType2 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine5 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType2, false, 1164493051);
        java.lang.String str6 = nameType0.getName();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gen" + "'", str6, "gen");
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray27);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = hmacUtils8.hmac("f0960da20c9ad08441e24e9b4b4cd4a5");
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byteArray25);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-32, -20, 12, -86, -123, 94, -15, -79, -7, -32, 63, 79, -52, 85, -108, -45, 99, 11, -87, -8, -99, -101, -114, 55, -122, 67, -92, -82]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2ae39cff3e50240fa72d20b73b7d5707ac8412676d680473d59e1ad4298e506c87b17a1f069a76103f416e4c5e3ab4353ead745e5aea6ee73f27e55a30383d66" + "'", str26, "2ae39cff3e50240fa72d20b73b7d5707ac8412676d680473d59e1ad4298e506c87b17a1f069a76103f416e4c5e3ab4353ead745e5aea6ee73f27e55a30383d66");
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.lang.String str3 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 629192958);
        char[] charArray8 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000" + "'", str3, "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "00111101001100000100100001101001011101010111011100101111011001110111011001001111001101010101011101110111011010100101000001110111011110100110001001110110010011010110100101001001001101110110010100110010001101110101000001110011");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "00111101001100000100100001101001011101010111011100101111011001110111011001001111001101010101011101110111011010100101000001110111011110100110001001110110010011010110100101001001001101110110010100110010001101110101000001110011");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1]");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        long long9 = base16_2.getEncodedLength(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray7, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray7);
        java.util.Random random15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray13, "HXRVYJ3rI5njqeid9obvIItpLUW+F9LijCHabojojS4=", random15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: HXRVYJ3rI5njqeid9obvIItpLUW+F9LijCHabojojS4=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\000\ufffd" + "'", str8, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str12, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[6, -21, 125, 106, 105, -18, 25, -27, -5, -33, 116, -112, 24, -45, -46, -85, -6, 4, -68, -67, 19, 101, -37, 49, 46, -72, 109, -57, 22, -109, -119, -72]");
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha256Hex("o92wQ6/Y2DoOA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "bd0be5cc3381016e156ac44b77f4eb8f9fa98304fb499a95659142fe479acd17" + "'", str1, "bd0be5cc3381016e156ac44b77f4eb8f9fa98304fb499a95659142fe479acd17");
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray5);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 65, 65, 65, 65, 65, 65, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "93cf3609a40cc888d4990b10d81b48cb85f9b046" + "'", str13, "93cf3609a40cc888d4990b10d81b48cb85f9b046");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("1nualuGt.TbmU");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException(throwable2);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException();
        decoderException3.addSuppressed((java.lang.Throwable) encoderException4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException(throwable6);
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException();
        decoderException7.addSuppressed((java.lang.Throwable) encoderException8);
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        java.lang.Throwable[] throwableArray11 = encoderException8.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException12 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException8);
        decoderException1.addSuppressed((java.lang.Throwable) decoderException12);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        boolean boolean1 = org.apache.commons.codec.digest.DigestUtils.isAvailable("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex("FF6U");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dbb7d22dda2c3576b94231d317be2db6353182c14b97e4dfb046d5e8c5089b8e049ba2edd62658e1084f1ddbee39fce1bbbd710cbb7d3bf3c2699abe0b72e3fb" + "'", str1, "dbb7d22dda2c3576b94231d317be2db6353182c14b97e4dfb046d5e8c5089b8e049ba2edd62658e1084f1ddbee39fce1bbbd710cbb7d3bf3c2699abe0b72e3fb");
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream21);
        java.lang.Object obj25 = quotedPrintableCodec1.encode((java.lang.Object) byteArray18);
        javax.crypto.Mac mac26 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray18);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str22, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(mac26);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.apache.commons.codec.language.Soundex soundex0 = org.apache.commons.codec.language.Soundex.US_ENGLISH;
        soundex0.setMaxLength((-1612190696));
        java.lang.String str4 = soundex0.encode("dba775cd82010b877fd28af00fbcb6db02bfa1f71407c48744737ad5dd19b6f1");
        java.lang.String str6 = soundex0.soundex("pOCLKm.YovXnk");
        org.junit.Assert.assertNotNull(soundex0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "D123" + "'", str4, "D123");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "P242" + "'", str6, "P242");
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUnchecked("AKMLFPKMTK", "=?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: =?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=: java.io.UnsupportedEncodingException: =?UTF-8?B?5LKC5bSN56KQ5JuW5rme6ZS07ImI6Lyj5ZiW5rC77o+L67ep7oCBy43oua3utbnRp+m4qeuVmOOAleGrjOu2nOK1jO2TvA==?=");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream8 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream5, true, false);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha384Hex((java.io.InputStream) base16InputStream8);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str9, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray5);
        byte[] byteArray9 = uRLCodec1.decode(byteArray5);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str22 = org.apache.commons.codec.digest.Crypt.crypt(byteArray15, "0A01640101");
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray15);
        byte[] byteArray24 = uRLCodec1.encode(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = uRLCodec1.encode("44c9a137a4038a1ef0411ae025aec0e06a9209a3");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: hi!");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$1$khlkPESf$AjqsvxFbY2Hk2eUWX7u1J0" + "'", str8, "$1$khlkPESf$AjqsvxFbY2Hk2eUWX7u1J0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0Acd8L3u4hVxI" + "'", str22, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str23, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.digest.HmacUtils hmacUtils21 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.lang.String str22 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "HmacSHA224" + "'", str22, "HmacSHA224");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16();
        boolean boolean12 = base16_10.isInAlphabet("AAAAAAA");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str18 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray16, true);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray16);
        boolean boolean21 = base16_10.isInAlphabet(byteArray16, true);
        byte[] byteArray22 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray6, byteArray16);
        java.io.OutputStream outputStream23 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream24 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream23);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec28 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray34);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray34);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray34);
        java.lang.Object obj41 = quotedPrintableCodec28.decode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream42 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream24, true, 1, byteArray34);
        java.lang.String str43 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray16, byteArray34);
        java.lang.String str44 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray34);
        java.io.OutputStream outputStream47 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream48 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream47);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec52 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str59 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray58);
        java.lang.String str61 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray58, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray58);
        java.lang.String str64 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray58);
        java.lang.Object obj65 = quotedPrintableCodec52.decode((java.lang.Object) byteArray58);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream66 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream48, true, 1, byteArray58);
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str72 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray71);
        java.lang.String str73 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray71);
        java.nio.charset.Charset charset74 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy77 = base64_76.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec78 = new org.apache.commons.codec.net.BCodec(charset74, codecPolicy77);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream79 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream48, true, (int) (short) 1, byteArray71, codecPolicy77);
        org.apache.commons.codec.binary.Base32 base32_80 = new org.apache.commons.codec.binary.Base32((-488200341), byteArray34, false, (byte) 0, codecPolicy77);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ffffff" + "'", str18, "ffffff");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str19, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream23);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AAAAAAA" + "'", str38, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str39, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str40, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str43, "9b9e60058fae476c9ee6ef8fc698d89e");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tOzNXEQKaeU6Q" + "'", str44, "tOzNXEQKaeU6Q");
        org.junit.Assert.assertNotNull(outputStream47);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str59, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str61, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AAAAAAA" + "'", str62, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str63, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str64, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\000\ufffd" + "'", str72, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\377" + "'", str73, "\377");
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertTrue("'" + codecPolicy77 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy77.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        java.lang.String str6 = colognePhonetic0.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = colognePhonetic0.encode(obj7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "828213832432323283231" + "'", str6, "828213832432323283231");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1);
        byte[] byteArray4 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.PercentCodec percentCodec7 = new org.apache.commons.codec.net.PercentCodec(byteArray5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -114");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 2, 0, 0, 24, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, -114, 101, 58, 114, 28, -116, 34, 89, -93, -123, 65, -34, 2, -6, -60, -36, 20, -13, 92, 11, 90, 42, -21, 26, 6, 57, 28]");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.String[] strArray24 = new java.lang.String[] { "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", "79d351ca4f5462d2eb5f2595220e0863", "$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.", "UTF-8", "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "CABAFD", "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.", "2ef0725975afd171e9cb76444b4969c3", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1", "ALL", "$6$G6GWDhAR$4Fuin7zgOWL9QptRqMT6rZ4PF.leUwW7/wmllLQljiOqJL3c5jKiXNyOLl3loO4IJbTgJg6ZU5Hhm8yT37Uad1", "16fd67a8bb44f961f07f53972686acb3", "F", "d", "c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da", "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4", "any", "AGgAaQAh", "2ad36d9d51748e827af1acab7568d5e2", "8350e5a3e24c153df2275c9f80692773", "83d93cffb05d8435fffd7cd6e362a48eefb66689" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet27 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet25);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet28 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet25);
        boolean boolean29 = languageSet28.isSingleton();
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(languageSet27);
        org.junit.Assert.assertNotNull(languageSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1;
        java.io.OutputStream outputStream1 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_3 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream5 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream1, (org.apache.commons.codec.binary.BaseNCodec) base16_3, false);
        baseNCodecOutputStream5.eof();
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream10 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream5, (org.apache.commons.codec.binary.BaseNCodec) base32_8, true);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray14 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.lang.String str17 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray13);
        byte[] byteArray18 = org.apache.commons.codec.digest.Blake3.hash(byteArray13);
        baseNCodecOutputStream10.write(byteArray18);
        org.apache.commons.codec.digest.HmacUtils hmacUtils20 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray26);
        java.lang.String str29 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray26, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        javax.crypto.Mac mac31 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray26);
        java.lang.String str33 = hmacUtils20.hmacHex(byteArray32);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1));
        org.junit.Assert.assertNotNull(outputStream1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str15, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-81, 19, 73, -71, -11, -7, -95, -90, -96, 64, 77, -22, 54, -36, -55, 73, -101, -53, 37, -55, -83, -63, 18, -73, -52, -102, -109, -54, -28, 31, 50, 98]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str27, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str29, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AAAAAAA" + "'", str30, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[103, 112, 42, 14, -46, 90, 80, -60, 111, -64, -96, -5, 70, -90, -33, -65, 83, 51, -55, -36, 37, 69, 26, -67, -79, -18, -84, -109, -15, -23, 104, -43]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "aace6559ecc58307ece3bd5691fb952229eb3c80" + "'", str33, "aace6559ecc58307ece3bd5691fb952229eb3c80");
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex("AF");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "bb60977c691dee70aa7d2d68438472df3e85e26bb8fe71ea2dbbaea6566b33f48908a3a70562dcd00fca6d76766d025b" + "'", str1, "bb60977c691dee70aa7d2d68438472df3e85e26bb8fe71ea2dbbaea6566b33f48908a3a70562dcd00fca6d76766d025b");
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        long long10 = pureJavaCrc32C0.getValue();
        org.apache.commons.codec.net.URLCodec uRLCodec12 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet13 = null;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet13, byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray16);
        byte[] byteArray19 = uRLCodec12.decode(byteArray16);
        byte[] byteArray20 = null;
        byte[] byteArray21 = uRLCodec12.decode(byteArray20);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray27);
        java.lang.String str30 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray27, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_31 = new org.apache.commons.codec.binary.Base16();
        boolean boolean33 = base16_31.isInAlphabet("AAAAAAA");
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str39 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray37, true);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray37);
        boolean boolean42 = base16_31.isInAlphabet(byteArray37, true);
        byte[] byteArray43 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray27, byteArray37);
        byte[] byteArray44 = uRLCodec12.encode(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = uRLCodec12.decode(byteArray47);
        pureJavaCrc32C0.update(byteArray48, 10, (-1612190696));
        byte[] byteArray52 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        pureJavaCrc32C0.update(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52);
        java.lang.String str55 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray54);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str18, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str28, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str30, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ffffff" + "'", str39, "ffffff");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str40, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[68, 81, 111, 61]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "689ecf52143b9ba32e80a53feba1a5dc78a7d76c983ca59e5036594c" + "'", str55, "689ecf52143b9ba32e80a53feba1a5dc78a7d76c983ca59e5036594c");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("074144668286427481268138212338282381323183123");
        int int4 = refinedSoundex1.difference("bcce83622206284126038d877e184c2a80a54c5eae29897917b64bcda570c827dd2e7d0f195a31c1018fe15da1f37d47a1affa6445ab0f7d2fc7ebc0c64e7b46", "0Acd8L3u4hVxI");
        java.lang.String str6 = refinedSoundex1.soundex("47c8df524e807cc8d8df75fcb19f11b078ee64c5224017601c09a81ceb58decf82479db44489a9726c283054792aa9860654951f7b9389205ae7c224166161f7");
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str19 = org.apache.commons.codec.digest.Crypt.crypt(byteArray12, "0A01640101");
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray12);
        org.apache.commons.codec.net.PercentCodec percentCodec22 = new org.apache.commons.codec.net.PercentCodec(byteArray12, true);
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray28);
        byte[] byteArray31 = uRLCodec24.decode(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray28);
        java.lang.Object obj33 = percentCodec22.decode((java.lang.Object) byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = refinedSoundex1.encode((java.lang.Object) byteArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to RefinedSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C41414747404714170404704" + "'", str6, "C41414747404714170404704");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0Acd8L3u4hVxI" + "'", str19, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str20, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str30, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[60, 54, 56, 54, -49, 78, 22, 102, 102, 105, -94, 93, -94, -128, -95, -122, 92, 45, 40, 116]");
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray5);
        org.apache.commons.codec.net.PercentCodec percentCodec15 = new org.apache.commons.codec.net.PercentCodec(byteArray5, true);
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray21);
        byte[] byteArray24 = uRLCodec17.decode(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray21);
        java.lang.Object obj26 = percentCodec15.decode((java.lang.Object) byteArray21);
        java.lang.String str27 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray21);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str13, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str23, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[60, 54, 56, 54, -49, 78, 22, 102, 102, 105, -94, 93, -94, -128, -95, -122, 92, 45, 40, 116]");
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "$5$.IFl5cJx$Djr8PtcoCuvb2ncdSng057qDIXQpjqs020RpQC7vpw5" + "'", str27, "$5$.IFl5cJx$Djr8PtcoCuvb2ncdSng057qDIXQpjqs020RpQC7vpw5");
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        beiderMorseEncoder0.setMaxPhonemes((int) (byte) 100);
        org.apache.commons.codec.language.bm.RuleType ruleType6 = beiderMorseEncoder0.getRuleType();
        java.lang.String str7 = ruleType6.getName();
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType6 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType6.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "exact" + "'", str7, "exact");
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec6 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset3, false);
        org.apache.commons.codec.net.QCodec qCodec7 = new org.apache.commons.codec.net.QCodec(charset3);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        byte[] byteArray3 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray3);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, inputStream5);
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream7);
        java.lang.String str10 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, inputStream7);
        byte[] byteArray12 = inputStream7.readNBytes((int) ' ');
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray14);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.binary.Base16 base16_19 = new org.apache.commons.codec.binary.Base16(false, codecPolicy18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray14, true, codecPolicy18);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) -1, byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str6, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str8, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str9, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str10, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$6$in6uu3Dc$G.vUvC4LUrlLGwdPxDFPecVe63PLY7/qLDajB9BO5JZ0wTjcs0Ex2NO1bgJVeutlDX.bAaYWErP0JHmPL4bA.." + "'", str15, "$6$in6uu3Dc$G.vUvC4LUrlLGwdPxDFPecVe63PLY7/qLDajB9BO5JZ0wTjcs0Ex2NO1bgJVeutlDX.bAaYWErP0JHmPL4bA..");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        base64OutputStream1.write((int) (short) 100);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        org.apache.commons.codec.net.PercentCodec percentCodec8 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray9 = null;
        byte[] byteArray10 = percentCodec8.encode(byteArray9);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray14 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray17 = percentCodec8.decode(byteArray13);
        boolean boolean19 = base32_7.isInAlphabet(byteArray17, true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream21 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base64OutputStream1, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream22 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream21);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str34 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        javax.crypto.Mac mac35 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray30);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream39);
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream39);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream39);
        byte[] byteArray46 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_48 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet49 = null;
        byte[] byteArray51 = new byte[] { (byte) 100 };
        byte[] byteArray52 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet49, byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray52);
        boolean boolean55 = base32_48.isInAlphabet(byteArray53, false);
        org.apache.commons.codec.CodecPolicy codecPolicy56 = base32_48.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream57 = new org.apache.commons.codec.binary.Base32InputStream(inputStream39, false, (-965378730), byteArray46, codecPolicy56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream58 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream22, true, (-237789309), byteArray37, codecPolicy56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [AAAAAAA=]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str15, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AAAAAAA" + "'", str34, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65, 65, 65, 65, 65, 65, 61]");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(messageDigest40);
        org.junit.Assert.assertEquals(messageDigest40.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str41, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str42, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy56 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy56.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.String[] strArray38 = new java.lang.String[] { "ffffff", "663b90c899fa25a111067be0c22ffc64dcf581c2", "SHA-224", "0Acd8L3u4hVxI", "UTF-16LE", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "2ef0725975afd171e9cb76444b4969c3", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "ffffff", "6IiiRyxmjcARw", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "0A01640101", "2ef0725975afd171e9cb76444b4969c3", "663b90c899fa25a111067be0c22ffc64dcf581c2", "", "ffffff", "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", "c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", "6IiiRyxmjcARw", "663b90c899fa25a111067be0c22ffc64dcf581c2", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "MD2", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "99448658175a0534e08dbca1fe67b58231a53eec", "0A01640101", "0A01640101", "1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "SHA3-256", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "", "663b90c899fa25a111067be0c22ffc64dcf581c2", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet41 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = languageSet41.isSingleton();
        boolean boolean43 = languageSet41.isEmpty();
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(languageSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        int int1 = org.apache.commons.codec.digest.MurmurHash2.hash32("a7ca851e4a459e091ff0e864d15d0ce595d93c9cf70fbcb7f8de5ac8");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1464809304) + "'", int1 == (-1464809304));
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.PercentCodec percentCodec4 = new org.apache.commons.codec.net.PercentCodec(byteArray2, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -26");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet6 = null;
        byte[] byteArray8 = new byte[] { (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet6, byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray9);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray9);
        long long12 = base32_5.getEncodedLength(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = hex2.decode(byteArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Odd number of characters.");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str11, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 8L + "'", long12 == 8L);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.lang.String str3 = org.apache.commons.codec.digest.Crypt.crypt(byteArray1, "63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[48, 102, 48, 99, 102, 57, 50, 56, 54, 102, 48, 54, 53, 97, 50, 102, 51, 56, 101, 51, 99, 52, 101, 52, 56, 56, 54, 53, 55, 56, 101, 51, 53, 97, 102, 52, 48, 53, 48, 99, 49, 48, 56, 101, 53, 48, 55, 57, 57, 56, 97, 48, 53, 56, 56, 56, 99, 57, 56, 54, 54, 55, 101, 97]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "63IhWfn9C4Ars" + "'", str3, "63IhWfn9C4Ars");
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(629192958);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-3076895487182150456L) + "'", long1 == (-3076895487182150456L));
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, inputStream6);
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream8);
        java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, inputStream8);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms13 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet14 = null;
        byte[] byteArray16 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet14, byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray17);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms13, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray25, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray25);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray25);
        javax.crypto.Mac mac32 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms13, byteArray25);
        java.lang.String str33 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray25);
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest34, inputStream35);
        byte[] byteArray38 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        java.io.InputStream inputStream40 = java.io.InputStream.nullInputStream();
        java.lang.String str41 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray39, inputStream40);
        java.io.InputStream inputStream42 = java.io.InputStream.nullInputStream();
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream42);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream42);
        java.lang.String str45 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray39, inputStream42);
        java.security.MessageDigest messageDigest46 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest34, inputStream42);
        java.lang.String str47 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray25, inputStream42);
        java.security.MessageDigest messageDigest48 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest12, byteArray25);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str7, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str9, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str10, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str11, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms13 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms13.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str28, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AAAAAAA" + "'", str29, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str30, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str31, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\000\000\000\000\000" + "'", str33, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str41, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str43, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str44, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str45, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(messageDigest46);
        org.junit.Assert.assertEquals(messageDigest46.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str47, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(messageDigest48);
        org.junit.Assert.assertEquals(messageDigest48.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex hex1 = new org.apache.commons.codec.binary.Hex("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.codec.digest.MurmurHash2.hash64("68f99a2f771f3830e1487a6aad4372fc28e3736eee4ed16fd02cf1bd47fe6224745ac0321f687d153a44c9875e5e53a2", 1595328082, (-679748572));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin 1595328082, end 915579510, length 96");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest3);
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest3);
        java.security.MessageDigest messageDigest6 = digestUtils5.getMessageDigest();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder2 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder2.setRuleType(ruleType3);
        java.lang.String str6 = beiderMorseEncoder2.encode("0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder2.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList9 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType0, ruleType7, languageSet8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kabevdegdZafkebbeadZadpfbbdetf|kabevdegdZafkebbeakadpfbbdetf|kabevdegdZavdZebbeadZadpfbbdetf|kabevdegdZavdZebbeakadpfbbdetf|kabevdekafkebbajakadpfbbdetf|kabevdekafkebbeadZadpfbbdetf|kabevdekafkebbeakadpfbbdetf|kabevdekafkebbeatsadpfbbdetf|kabevdekafkebbiakadpfbbdetf|kabevdekaftsebbeakadpfbbdetf|kabevdekaftsebbeatsadpfbbdetf|kabevdekavdZebbeadZadpfbbdetf|kabevdekavdZebbeakadpfbbdetf|kabevdektsafkebbeakadpfbbdetf|kabevdektsafkebbeatsadpfbbdetf|kabevdektsaftsebbeakadpfbbdetf|kabevdektsaftsebbeatsadpfbbdetf|kabevdetskafkebbeakadpfbbdetf|kabevdetskafkebbeatsadpfbbdetf|kabevdetskaftsebbeakadpfbbdetf" + "'", str6, "kabevdegdZafkebbeadZadpfbbdetf|kabevdegdZafkebbeakadpfbbdetf|kabevdegdZavdZebbeadZadpfbbdetf|kabevdegdZavdZebbeakadpfbbdetf|kabevdekafkebbajakadpfbbdetf|kabevdekafkebbeadZadpfbbdetf|kabevdekafkebbeakadpfbbdetf|kabevdekafkebbeatsadpfbbdetf|kabevdekafkebbiakadpfbbdetf|kabevdekaftsebbeakadpfbbdetf|kabevdekaftsebbeatsadpfbbdetf|kabevdekavdZebbeadZadpfbbdetf|kabevdekavdZebbeakadpfbbdetf|kabevdektsafkebbeakadpfbbdetf|kabevdektsafkebbeatsadpfbbdetf|kabevdektsaftsebbeakadpfbbdetf|kabevdektsaftsebbeatsadpfbbdetf|kabevdetskafkebbeakadpfbbdetf|kabevdetskafkebbeatsadpfbbdetf|kabevdetskaftsebbeakadpfbbdetf");
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        int int27 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray25);
        byte[] byteArray28 = quotedPrintableCodec1.encode(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray25);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-690116322) + "'", int27 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[40, -58, 20, 66, 93, 94, -103, 43, 46, 4, 27, -1, 44, 86, 43, -16, 120, 99, 85, 116]");
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset1);
        java.lang.String str3 = bCodec2.getDefaultCharset();
        java.lang.String str5 = bCodec2.encode("9e94d40db15fea4995fd0833d5869ddbf127395bf77f09a1714e05ce630f75377905d7531831f16ef9adb4e9b8345cb3");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = bCodec2.encode("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "041312381228231821282818232313");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 041312381228231821282818232313");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "=?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=" + "'", str5, "=?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("$6$DDWobXRt$xhVIH9eYUt.YhcPWJgdPO9wi10jTfEY4zKmadE5JWQtwRGLDAYg2C8j0qgku8B9jroG5NSZTzuShahiYPFC1d.");
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((short) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-3032679231428807052L) + "'", long1 == (-3032679231428807052L));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str16 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray14, true);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray14, true, codecPolicy18);
        org.apache.commons.codec.CodecPolicy codecPolicy20 = base64_19.getCodecPolicy();
        boolean boolean21 = base64_19.isUrlSafe();
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream23 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base64_19, false);
        byte[] byteArray24 = null;
        byte[] byteArray25 = base64_19.decode(byteArray24);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ffffff" + "'", str16, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + codecPolicy20 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy20.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(byteArray25);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1);
        pureJavaCrc32_0.update(64);
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest5, inputStream6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream6);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream6);
        java.io.InputStream inputStream10 = java.io.InputStream.nullInputStream();
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream10);
        byte[] byteArray12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray9, inputStream10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy16 = base64_15.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_17 = new org.apache.commons.codec.binary.Base16(false, codecPolicy16);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray23);
        java.lang.String str26 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray23, false);
        byte[] byteArray27 = org.apache.commons.codec.digest.Blake3.hash(byteArray23);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray23);
        long long29 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray23);
        javax.crypto.Mac mac30 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray23);
        java.lang.String str31 = base16_17.encodeAsString(byteArray23);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray9, byteArray23);
        long long35 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray9, (int) '#', (int) (byte) 10);
        char[] charArray36 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        pureJavaCrc32_0.update(byteArray9, (int) (short) 0, (-679748572));
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str8, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str11, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy16 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy16.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str24, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str28, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-7793026892456512543L) + "'", long29 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0A01640101" + "'", str31, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2297536217941592444L) + "'", long35 == (-2297536217941592444L));
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms6 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet7, byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray10);
        javax.crypto.Mac mac12 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms6, byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray18);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac12, byteArray18);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream22);
        javax.crypto.Mac mac26 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac20, inputStream22);
        byte[] byteArray28 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.io.InputStream inputStream30 = java.io.InputStream.nullInputStream();
        java.lang.String str31 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray29, inputStream30);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream32 = new org.apache.commons.codec.binary.Base64InputStream(inputStream30);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream33 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream32);
        javax.crypto.Mac mac34 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac20, (java.io.InputStream) base16InputStream33);
        java.io.OutputStream outputStream35 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_37 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream39 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream35, (org.apache.commons.codec.binary.BaseNCodec) base16_37, false);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str43 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray42);
        long long44 = base16_37.getEncodedLength(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str47 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray42, byteArray46);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray42);
        int int49 = base16InputStream33.read(byteArray42);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, (java.io.InputStream) base16InputStream33);
        java.nio.file.Path path51 = null;
        java.nio.file.OpenOption[] openOptionArray52 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray53 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, path51, openOptionArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms6 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms6.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str31, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac34);
        org.junit.Assert.assertNotNull(outputStream35);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000\ufffd" + "'", str43, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 4L + "'", long44 == 4L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str47, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str48, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(openOptionArray52);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("TPKTFPKFPF");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 84, 0, 80, 0, 75, 0, 84, 0, 70, 0, 80, 0, 75, 0, 70, 0, 80, 0, 70]");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.digest.Crypt.crypt(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "$6$MCDDAW.J$ETWChr4..DhSrr2XaWwsRh8ETGyAe5gZYrceRVmyOTU3QiK1kQmn/1znY2E.8oXmr3fdUayd7V.pRtby.7NH11" + "'", str5, "$6$MCDDAW.J$ETWChr4..DhSrr2XaWwsRh8ETGyAe5gZYrceRVmyOTU3QiK1kQmn/1znY2E.8oXmr3fdUayd7V.pRtby.7NH11");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray10);
        java.lang.String str14 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-48, -22, 41, 91, 10, -98, -103, -21, -35, 56, -99, 79, -50, 32, -9, -82, 76, -12, -22, -96, -15, -128, 121, 9, 64, 72, 68, 121, 91, -24, 78, 27]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\000h\000i\000!" + "'", str14, "\000h\000i\000!");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            blake3_13.doFinalize(byteArray21, 852759869, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Offset 852759869 and length 10 out of bounds with buffer length 164");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, -90, -123, -32, 42, -95, -33, 64, -31, -105, -123, -83, -1, 122, 97, 127, 14, 90, 96, -1]");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        long[] longArray5 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray1, 64, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 0]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[88, 87, 85, 87, 69, 78, 65, 80, 77, 78, 88, 68, 80, 50, 77, 74, 65, 79, 75, 84, 83, 82, 71, 80, 52, 73, 87, 89, 54, 72, 88, 87, 87, 86, 83, 79, 76, 80, 86, 69, 74, 74, 76, 86, 54, 74, 73, 65, 77, 83, 72, 84, 76, 89, 85, 71, 54, 54, 84, 78, 88, 79, 90, 71, 52, 85, 82, 69, 77, 70, 73, 50, 78, 84, 73, 70, 76, 51, 76, 84, 79, 65, 76, 84, 85, 75, 74, 72, 86, 70, 85, 68, 54, 74, 73, 85, 72, 66, 67, 80, 55, 75, 65, 61, 51, 68]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-48, -127, 78, 47, 13, 54, 77, -114, 6, -43, -78, -19, -59, -90, 41, 91, 55, -43, 107, 101, 21, -123, 87, -111, 29, 59, 4, -119, 60, 13, -42, 95, -97, 4, 81, 103, 78, -111, -86, -76, 56, -84, 97, -59, -103, -75, 98, 60, -91, 63, 53, 18, 51, 56, -126, -117, 36, -70, -47, 58, 43, 24, 60, -68]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.colognePhonetic("$6$in6uu3Dc$G.vUvC4LUrlLGwdPxDFPecVe63PLY7/qLDajB9BO5JZ0wTjcs0Ex2NO1bgJVeutlDX.bAaYWErP0JHmPL4bA..");
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = colognePhonetic0.encode((java.lang.Object) byteArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: This method's parameter was expected to be of the type java.lang.String. But actually it was of the type [B.");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "06843385754321482318315452183284861432524813716151" + "'", str4, "06843385754321482318315452183284861432524813716151");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[51, -4, 89, -125, 45, -96, -29, 36, -24, 23, -27, -54, -108, -114, -26, -15]");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream0);
        byte[] byteArray3 = inputStream0.readAllBytes();
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec7 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        java.lang.Object obj20 = quotedPrintableCodec7.decode((java.lang.Object) byteArray13);
        java.nio.charset.Charset charset22 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str23 = quotedPrintableCodec7.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset22);
        org.apache.commons.codec.net.URLCodec uRLCodec25 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet26 = null;
        byte[] byteArray28 = new byte[] { (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet26, byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray29);
        byte[] byteArray32 = uRLCodec25.decode(byteArray29);
        byte[] byteArray33 = null;
        byte[] byteArray34 = uRLCodec25.decode(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray40);
        java.lang.String str43 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_44 = new org.apache.commons.codec.binary.Base16();
        boolean boolean46 = base16_44.isInAlphabet("AAAAAAA");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str52 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray50, true);
        java.lang.String str53 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray50);
        boolean boolean55 = base16_44.isInAlphabet(byteArray50, true);
        byte[] byteArray56 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray40, byteArray50);
        byte[] byteArray57 = uRLCodec25.encode(byteArray56);
        byte[] byteArray58 = quotedPrintableCodec7.decode(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32InputStream base32InputStream59 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, false, 10, byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [%1DtU%60%9D%EB%23%99%E3%A9%E8%9D%F6%86%EF+%8Bi-E%BE%17%D2%E2%8C%21%DAn%88%E8%8D.]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str2, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str23, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str31, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str43, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ffffff" + "'", str52, "ffffff");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str53, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha1((java.io.InputStream) base64InputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.md2((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream14 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, inputStream14);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream14);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream14);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest12, inputStream14);
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray10, inputStream14);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream14);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream21 = new org.apache.commons.codec.binary.Base16InputStream(inputStream14);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA-512/224");
        java.lang.String str24 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = inputStream14.readNBytes(byteArray23, 0, 3527094);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 3527094) out of bounds for length 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str16, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str19, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[50, 89, -31, 82, 74, 57, -37, -119, -106, 59, -26, 43, 116, 109, -120, -62, -89, -100, 107, -68, -100, 87, -101, 58, -9, 4, -48, 92]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c" + "'", str24, "\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        long long30 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray4, (int) '#', (int) (byte) 10);
        char[] charArray31 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray4);
        javax.crypto.Mac mac32 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray4);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-2297536217941592444L) + "'", long30 == (-2297536217941592444L));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
        org.junit.Assert.assertNotNull(mac32);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream12 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream15 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base16OutputStream12, false, true);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = hex2.encode(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray6);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 100, 48, 101, 52, 99, 53, 101, 97, 102, 97, 55, 102, 49, 49, 50, 49, 97, 49, 57, 48, 53, 56, 51, 56, 54, 48, 56, 49, 52, 97, 50, 55, 57, 97, 53, 55, 101, 54, 101, 101, 53, 100, 48, 101, 51, 50, 54, 98, 57, 53, 53, 50, 55, 98, 50]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$1$/Jg9Gww/$yXkKNLUvcUcD10p7Ne53O." + "'", str9, "$1$/Jg9Gww/$yXkKNLUvcUcD10p7Ne53O.");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        boolean boolean6 = phoneticEngine4.isConcat();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = phoneticEngine4.getRuleType();
        boolean boolean8 = phoneticEngine4.isConcat();
        boolean boolean9 = phoneticEngine4.isConcat();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(ruleType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.io.OutputStream outputStream1 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream2 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream1);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray6, true);
        base64OutputStream2.write(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = binaryCodec0.decode((java.lang.Object) base64OutputStream2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ffffff" + "'", str8, "ffffff");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        boolean boolean21 = base64OutputStream19.isStrictDecoding();
        org.apache.commons.codec.net.URLCodec uRLCodec25 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet26 = null;
        byte[] byteArray28 = new byte[] { (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet26, byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray29);
        byte[] byteArray31 = uRLCodec25.encode(byteArray30);
        javax.crypto.Mac mac32 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray30);
        java.security.MessageDigest messageDigest33 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream34 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest33, inputStream34);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream37 = new org.apache.commons.codec.binary.Base16InputStream(inputStream34, false);
        javax.crypto.Mac mac38 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac32, inputStream34);
        java.security.MessageDigest messageDigest39 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream40 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest39, inputStream40);
        javax.crypto.Mac mac42 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac38, inputStream40);
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.sha256(inputStream40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream44 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream19, true, 760066800, byteArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [??B???????s?o?$'?A?d??L????xR?U]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac32);
        org.junit.Assert.assertNotNull(messageDigest33);
        org.junit.Assert.assertEquals(messageDigest33.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(mac38);
        org.junit.Assert.assertNotNull(messageDigest39);
        org.junit.Assert.assertEquals(messageDigest39.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(mac42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-29, -80, -60, 66, -104, -4, 28, 20, -102, -5, -12, -56, -103, 111, -71, 36, 39, -82, 65, -28, 100, -101, -109, 76, -92, -107, -103, 27, 120, 82, -72, 85]");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.String str2 = org.apache.commons.codec.digest.UnixCrypt.crypt("0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000", "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "232Ij7fYg6/WQ" + "'", str2, "232Ij7fYg6/WQ");
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream5 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        base16OutputStream5.write((-237789309));
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary('a');
        java.lang.String str7 = doubleMetaphoneResult4.getPrimary();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a" + "'", str7, "a");
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (-965378730), (long) 64);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-847692125) + "'", int2 == (-847692125));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.nio.charset.Charset charset1 = null;
        java.nio.charset.Charset charset2 = org.apache.commons.codec.Charsets.toCharset(charset1);
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex(charset2);
        java.lang.String str4 = hex3.toString();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        java.lang.String str11 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray7);
        byte[] byteArray12 = hex3.decode(byteArray7);
        java.lang.Object obj13 = binaryCodec0.decode((java.lang.Object) byteArray12);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex15 = new org.apache.commons.codec.language.RefinedSoundex("074144668286427481268138212338282381323183123");
        int int18 = refinedSoundex15.difference("bcce83622206284126038d877e184c2a80a54c5eae29897917b64bcda570c827dd2e7d0f195a31c1018fe15da1f37d47a1affa6445ab0f7d2fc7ebc0c64e7b46", "0Acd8L3u4hVxI");
        java.lang.String str20 = refinedSoundex15.soundex("47c8df524e807cc8d8df75fcb19f11b078ee64c5224017601c09a81ceb58decf82479db44489a9726c283054792aa9860654951f7b9389205ae7c224166161f7");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = binaryCodec0.encode((java.lang.Object) str20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C41414747404714170404704" + "'", str20, "C41414747404714170404704");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("A");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "65a992ad19967492b5780d76a4733af553f796f688b79102d01ec7fde5590cab" + "'", str1, "65a992ad19967492b5780d76a4733af553f796f688b79102d01ec7fde5590cab");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-59, -53, 30, -71, -90, 7, -101, -22, -104, 64, -67, -44, -77, -122, 72, 75, 114, -103, 28, 33, 42, 115, 102, -11, -105, 127, 53, 76]");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.apache.commons.codec.digest.HmacUtils hmacUtils0 = new org.apache.commons.codec.digest.HmacUtils();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        org.apache.commons.codec.digest.HmacUtils hmacUtils9 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream10 = null;
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy15 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream16 = new org.apache.commons.codec.binary.Base32InputStream(inputStream10, true, (int) (byte) 0, byteArray14, codecPolicy15);
        char[] charArray17 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray14);
        java.lang.String str18 = hmacUtils9.hmacHex(byteArray14);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream20);
        java.lang.String str24 = hmacUtils9.hmacHex(inputStream20);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        java.io.InputStream inputStream30 = java.io.InputStream.nullInputStream();
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream30);
        java.lang.String str32 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream30);
        java.lang.String str33 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream30);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream30);
        java.lang.String str35 = hmacUtils9.hmacHex(inputStream30);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = hmacUtils0.hmacHex(inputStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy15 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy15.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str18, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str24, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str31, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str32, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str33, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str34, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str35, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getHmacSha256(byteArray22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(mac23);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MTAwMTAwMTAxMDAxMTEwMTAxMDExMDAwMDEwMDEwMTAwMTEwMTAwMTExMDAxMDExMDExMDAxMTExMDAxMTAxMTAwMDExMDAwMDAwMDExMDAxMDExMDExMDAwMDEwMDAxMTEwMDExMDEwMDAxMDAxMTExMTAxMDAwMDAwMDExMDEwMTExMDAwMDEwMDAwMDExMTAxMTAwMTAxMTAxMTAwMTAwMTEwMDAwMTExMDExMDAxMDEwMDEwMDAwMDAxMDExMDAxMTExMDEwMDExMTExMDExMDEwMTEwMTAxMTAxMTE=" + "'", str7, "MTAwMTAwMTAxMDAxMTEwMTAxMDExMDAwMDEwMDEwMTAwMTEwMTAwMTExMDAxMDExMDExMDAxMTExMDAxMTAxMTAwMDExMDAwMDAwMDExMDAxMDExMDExMDAwMDEwMDAxMTEwMDExMDEwMDAxMDAxMTExMTAxMDAwMDAwMDExMDEwMTExMDAwMDEwMDAwMDExMTAxMTAwMTAxMTAxMTAwMTAwMTEwMDAwMTExMDExMDAxMDEwMDEwMDAwMDAxMDExMDAxMTExMDEwMDExMTExMDExMDEwMTEwMTAxMTAxMTE=");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("SHA3-512");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        byte[] byteArray26 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray25);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray32, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray32);
        java.lang.String str39 = org.apache.commons.codec.digest.Crypt.crypt(byteArray32, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec41 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet42 = null;
        byte[] byteArray44 = new byte[] { (byte) 100 };
        byte[] byteArray45 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet42, byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray45);
        byte[] byteArray47 = uRLCodec41.encode(byteArray46);
        java.lang.String str48 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray32, byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray32);
        java.io.InputStream inputStream50 = java.io.InputStream.nullInputStream();
        java.lang.String str51 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream50);
        byte[] byteArray52 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray32, inputStream50);
        byte[] byteArray53 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream50);
        byte[] byteArray54 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray25, inputStream50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = soundex1.encode((java.lang.Object) inputStream50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Soundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str33, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str35, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AAAAAAA" + "'", str36, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str37, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0Acd8L3u4hVxI" + "'", str39, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str48, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str51, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset4);
        qCodec5.setEncodeBlanks(true);
        java.lang.String str8 = qCodec5.getDefaultCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        long long2 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.reset();
        pureJavaCrc32C0.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        int int1 = org.apache.commons.codec.digest.MurmurHash2.hash32("FRLMFK");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1209621995) + "'", int1 == (-1209621995));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        java.nio.charset.Charset charset7 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy8 = null;
        org.apache.commons.codec.net.BCodec bCodec9 = new org.apache.commons.codec.net.BCodec(charset7, codecPolicy8);
        java.nio.charset.Charset charset10 = org.apache.commons.codec.Charsets.toCharset(charset7);
        org.apache.commons.codec.net.QCodec qCodec11 = new org.apache.commons.codec.net.QCodec(charset7);
        java.lang.String str12 = qCodec3.encode("SHA-1", charset7);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "=?UTF-8?Q?SHA-1?=" + "'", str12, "=?UTF-8?Q?SHA-1?=");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.apache.commons.codec.binary.Hex hex0 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer3 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, byteBuffer3);
        char[] charArray6 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer3, true);
        byte[] byteArray7 = hex0.decode(byteBuffer3);
        java.lang.String str8 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray7);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$6$z69expz7$sOVlycqle/TbrroHMLe6Ezodc9LcXsTit5JcMvZtfLcBjMULYHVyPSo1LY.otAbAyAfFbBzBTim3F.ja41N4x1" + "'", str8, "$6$z69expz7$sOVlycqle/TbrroHMLe6Ezodc9LcXsTit5JcMvZtfLcBjMULYHVyPSo1LY.otAbAyAfFbBzBTim3F.ja41N4x1");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme0 = null;
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme1 = null;
        java.lang.String[] strArray40 = new java.lang.String[] { "ffffff", "663b90c899fa25a111067be0c22ffc64dcf581c2", "SHA-224", "0Acd8L3u4hVxI", "UTF-16LE", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "2ef0725975afd171e9cb76444b4969c3", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "ffffff", "6IiiRyxmjcARw", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "0A01640101", "2ef0725975afd171e9cb76444b4969c3", "663b90c899fa25a111067be0c22ffc64dcf581c2", "", "ffffff", "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", "c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", "6IiiRyxmjcARw", "663b90c899fa25a111067be0c22ffc64dcf581c2", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "MD2", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "99448658175a0534e08dbca1fe67b58231a53eec", "0A01640101", "0A01640101", "1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "SHA3-256", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "", "663b90c899fa25a111067be0c22ffc64dcf581c2", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet43 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet41);
        boolean boolean44 = languageSet43.isSingleton();
        org.apache.commons.codec.language.bm.NameType nameType45 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang46 = org.apache.commons.codec.language.bm.Lang.instance(nameType45);
        org.apache.commons.codec.language.bm.Languages languages47 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType45);
        org.apache.commons.codec.language.bm.RuleType ruleType48 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType49 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang50 = org.apache.commons.codec.language.bm.Lang.instance(nameType49);
        org.apache.commons.codec.language.bm.NameType nameType51 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder52 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType53 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder52.setRuleType(ruleType53);
        org.apache.commons.codec.language.bm.NameType nameType55 = beiderMorseEncoder52.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType56 = beiderMorseEncoder52.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet57 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap58 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType51, ruleType56, languageSet57);
        org.apache.commons.codec.language.bm.NameType nameType59 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang60 = org.apache.commons.codec.language.bm.Lang.instance(nameType59);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet62 = lang60.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet64 = lang60.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap65 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType49, ruleType56, languageSet64);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap66 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType45, ruleType48, languageSet64);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet67 = languageSet43.restrictTo(languageSet64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Rule.Phoneme phoneme68 = new org.apache.commons.codec.language.bm.Rule.Phoneme(phoneme0, phoneme1, languageSet64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(languageSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + nameType45 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType45.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang46);
        org.junit.Assert.assertNotNull(languages47);
        org.junit.Assert.assertTrue("'" + ruleType48 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType48.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType49 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType49.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang50);
        org.junit.Assert.assertTrue("'" + nameType51 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType51.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType53 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType53.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType55 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType55.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType56 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType56.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + nameType59 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType59.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang60);
        org.junit.Assert.assertNotNull(languageSet62);
        org.junit.Assert.assertNotNull(languageSet64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(languageSet67);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("a ", true);
        int int3 = soundex2.getMaxLength();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(true);
        org.apache.commons.codec.net.PercentCodec percentCodec2 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray3 = null;
        byte[] byteArray4 = percentCodec2.encode(byteArray3);
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray11 = percentCodec2.decode(byteArray7);
        boolean boolean13 = base32_1.isInAlphabet(byteArray11, true);
        byte[] byteArray16 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea", "$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray11, byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[41, -39, -23, -55, -31, -120, -62, -54, 81, -69, 110, -117, 31, -126, 37, -12, 16, 46, 12, -128, -92, -59, -26, -45, -34, 55, -52, 32, -101, -127, 45, -89, -43, -54, 92, -2, -49, -76, 120, 85, 94, 5, -117, -121, -101, 9, 1, 72]");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(inputStream23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str26, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        int int8 = doubleMetaphone0.getMaxCodeLen();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder1 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder1.setRuleType(ruleType2);
        org.apache.commons.codec.language.bm.RuleType ruleType4 = beiderMorseEncoder1.getRuleType();
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine7 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType4, true, (-488200341));
        int int8 = phoneticEngine7.getMaxPhonemes();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-488200341) + "'", int8 == (-488200341));
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream1 = org.apache.commons.codec.Resources.getInputStream("MD5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: MD5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32("SHA-384", 1797466354, 3527094);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: begin 1797466354, end 1800993448, length 7");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream8 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream5, true, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base16InputStream8);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("00340031003400310034003100340031003400310034003100340031003300640030006400300061");
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str2 = uRLCodec1.getEncoding();
        java.lang.String str3 = uRLCodec1.getEncoding();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, inputStream7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream7);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream7);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream11 = new org.apache.commons.codec.binary.Base16InputStream(inputStream7);
        byte[] byteArray12 = digestUtils5.digest(inputStream7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = uRLCodec1.decode((java.lang.Object) inputStream7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type java.io.InputStream$1 cannot be URL decoded");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str2, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str3, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str9, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((short) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-8280562508237401750L) + "'", long1 == (-8280562508237401750L));
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex hex1 = new org.apache.commons.codec.binary.Hex("PFFPPPKTPS");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: PFFPPPKTPS");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray1, byteArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        int int1 = metaphone0.getMaxCodeLen();
        boolean boolean4 = metaphone0.isMetaphoneEqual("6B4BC7", "bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1797466354);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_4 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray3);
        java.lang.String str5 = base64_1.encodeAsString(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "V1pfTqZZ29Y2mg8XmixRfA==\r\n" + "'", str5, "V1pfTqZZ29Y2mg8XmixRfA==\r\n");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        long[] longArray11 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray6, (int) (short) 0, (int) (byte) 0, (-2042891860));
        org.apache.commons.codec.digest.Blake3 blake3_12 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray6);
        byte[] byteArray14 = blake3_12.doFinalize((int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[6932822957065537513, -327338885100050123]");
        org.junit.Assert.assertNotNull(blake3_12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[91, 22, -49, 125, -52, 83, 44, -48, -43, 115]");
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        int int4 = doubleMetaphone0.getMaxCodeLen();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages languages2 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType4 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang5 = org.apache.commons.codec.language.bm.Lang.instance(nameType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder7 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType8 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder7.setRuleType(ruleType8);
        org.apache.commons.codec.language.bm.NameType nameType10 = beiderMorseEncoder7.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType11 = beiderMorseEncoder7.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet12 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap13 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType6, ruleType11, languageSet12);
        org.apache.commons.codec.language.bm.NameType nameType14 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang15 = org.apache.commons.codec.language.bm.Lang.instance(nameType14);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet17 = lang15.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet19 = lang15.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap20 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType4, ruleType11, languageSet19);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap21 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, languageSet19);
        boolean boolean23 = languageSet19.contains("ORGAPA");
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languages2);
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType4 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType4.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang5);
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType8 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType8.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType11 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType11.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + nameType14 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType14.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang15);
        org.junit.Assert.assertNotNull(languageSet17);
        org.junit.Assert.assertNotNull(languageSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "A");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        qCodec3.setEncodeBlanks(true);
        java.lang.String str7 = qCodec3.encode("\000\000\000\000\000");
        java.nio.charset.Charset charset9 = org.apache.commons.codec.Charsets.UTF_16LE;
        java.lang.String str10 = qCodec3.encode("\000\ufffd", charset9);
        org.apache.commons.codec.net.QCodec qCodec11 = new org.apache.commons.codec.net.QCodec(charset9);
        java.nio.charset.Charset charset13 = org.apache.commons.codec.Charsets.US_ASCII;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec15 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset13, false);
        java.lang.String str16 = qCodec11.encode("", charset13);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "=?UTF-8?Q?=00=00=00=00=00?=" + "'", str7, "=?UTF-8?Q?=00=00=00=00=00?=");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "=?UTF-16LE?Q?=00=00=FD=FF?=" + "'", str10, "=?UTF-16LE?Q?=00=00=FD=FF?=");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "=?US-ASCII?Q??=" + "'", str16, "=?US-ASCII?Q??=");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream2 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex((java.io.InputStream) base32InputStream2);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str3, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms4 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet5, byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray8);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms4, byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray16);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms4, byteArray16);
        org.apache.commons.codec.binary.Base32 base32_25 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet26 = null;
        byte[] byteArray28 = new byte[] { (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet26, byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray29);
        boolean boolean32 = base32_25.isInAlphabet(byteArray30, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str35 = base32_25.encodeAsString(byteArray34);
        org.apache.commons.codec.digest.HmacUtils hmacUtils36 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms4, byteArray34);
        java.nio.ByteBuffer byteBuffer38 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray39 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer38);
        java.lang.String str40 = hmacUtils36.hmacHex(byteBuffer38);
        byte[] byteArray41 = hex2.decode(byteBuffer38);
        org.apache.commons.codec.digest.XXHash32 xXHash32_43 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_43.reset();
        org.apache.commons.codec.binary.Hex hex45 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest46 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer48 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest49 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest46, byteBuffer48);
        char[] charArray51 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer48, true);
        byte[] byteArray52 = hex45.decode(byteBuffer48);
        xXHash32_43.update(byteBuffer48);
        java.lang.String str54 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer48);
        byte[] byteArray55 = hex2.encode(byteBuffer48);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms4 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms4.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AAAAAAA" + "'", str20, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str21, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str22, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ABUAA2IAEE======" + "'", str35, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str40, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(messageDigest46);
        org.junit.Assert.assertEquals(messageDigest46.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(messageDigest49);
        org.junit.Assert.assertEquals(messageDigest49.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray2);
        java.io.RandomAccessFile randomAccessFile4 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest3, randomAccessFile4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.nio.charset.Charset charset20 = org.apache.commons.codec.Charsets.UTF_16BE;
        java.lang.String str21 = quotedPrintableCodec1.encode("00001010000011010110100001000001010100010110000101000001011001110100011101000001", charset20);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.lang.String str25 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 629192958);
        byte[] byteArray30 = quotedPrintableCodec1.encode(byteArray29);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001" + "'", str21, "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000" + "'", str25, "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61, 51, 68]");
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        pureJavaCrc32C0.update(3527094);
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray21);
        byte[] byteArray24 = uRLCodec17.decode(byteArray21);
        byte[] byteArray25 = null;
        byte[] byteArray26 = uRLCodec17.decode(byteArray25);
        java.lang.String str27 = uRLCodec17.getDefaultCharset();
        java.util.BitSet bitSet28 = null;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet28, byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray31);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray31);
        byte[] byteArray34 = uRLCodec17.encode(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32C0.update(byteArray34, (-2042891860), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -2042891860 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str23, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str33, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.String str4 = bCodec2.getDefaultCharset();
        boolean boolean5 = bCodec2.isStrictDecoding();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = bCodec2.decode("$1$Zio6Xtdu$dLf9ZKkJAqnhOMStTXq2z.");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        int int27 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray25);
        byte[] byteArray28 = quotedPrintableCodec1.encode(byteArray25);
        java.lang.String str30 = quotedPrintableCodec1.encode("\u42f9\u0892\u952a\ub7ae\ua633\u8e61\uf18c\ud06d\u8bd7\u0336\u064f\u36cd\u22c8\u5b3c");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec33 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray39);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray39);
        java.lang.Object obj46 = quotedPrintableCodec33.decode((java.lang.Object) byteArray39);
        java.nio.charset.Charset charset48 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str49 = quotedPrintableCodec33.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset48);
        java.lang.String str52 = quotedPrintableCodec33.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5", "UTF-8");
        java.lang.String str54 = quotedPrintableCodec33.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        java.nio.charset.Charset charset55 = quotedPrintableCodec33.getCharset();
        java.lang.String str56 = quotedPrintableCodec1.decode("0355bde7b7848c70ff66faf6409afbddae72a0b4", charset55);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-690116322) + "'", int27 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC" + "'", str30, "=E4=8B=B9=E0=A2=92=E9=94=AA=EB=9E=AE=EA=98=B3=E8=B9=A1=EF=86=8C=ED=81=AD=E8=\r\n=AF=97=CC=B6=D9=8F=E3=9B=8D=E2=8B=88=E5=AC=BC");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AAAAAAA" + "'", str43, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str44, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str45, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str49, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str52, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException" + "'", str54, "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0355bde7b7848c70ff66faf6409afbddae72a0b4" + "'", str56, "0355bde7b7848c70ff66faf6409afbddae72a0b4");
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, false);
        byte[] byteArray8 = base64InputStream7.readAllBytes();
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray8);
        long[] longArray11 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray10);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[7245835147859050754, 3480524516467701361]");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32((int) (byte) 100);
        xXHash32_1.update((int) 'a');
        xXHash32_1.reset();
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray5);
        byte[] byteArray9 = uRLCodec1.decode(byteArray5);
        java.util.Random random10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, random10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$1$IpOtNue1$b1gsC6NayGKAKmy1zdkQj0" + "'", str8, "$1$IpOtNue1$b1gsC6NayGKAKmy1zdkQj0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0]");
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream12 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream9, true, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream13 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream12);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        base64OutputStream13.write(byteArray15);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteBuffer4);
        char[] charArray7 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer4, true);
        java.lang.String str8 = digestUtils1.digestAsHex(byteBuffer4);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        java.lang.String str13 = digestUtils1.digestAsHex(byteBuffer11);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream19);
        long long23 = base64InputStream19.skip((long) ' ');
        base64InputStream19.mark((int) (short) 10);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream19);
        java.lang.String str27 = digestUtils1.digestAsHex((java.io.InputStream) base64InputStream19);
        java.io.File file28 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray29 = digestUtils1.digest(file28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str8, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str13, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str20, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str21, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str26, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str27, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray3 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList4 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4, phonemeArray3);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList6 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4);
        org.apache.commons.codec.language.bm.Rule rule7 = new org.apache.commons.codec.language.bm.Rule("=?UTF-8?B?U0hBLTIyNA==?=", "$1$FivXNt8U$ItIalCUBqAE1stNT0FzGp/", "\000\000\000\000\000", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList6);
        java.lang.String str8 = rule7.getPattern();
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr9 = rule7.getPhoneme();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern10 = rule7.getRContext();
        org.junit.Assert.assertNotNull(phonemeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str8, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(phonemeExpr9);
        org.junit.Assert.assertNotNull(rPattern10);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str5 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray4);
        byte[] byteArray6 = base16_2.encode(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((-1209621995), byteArray4, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [??>=???0??p?????????g?iJX??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str5, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(inputStream1);
        java.util.BitSet bitSet8 = null;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str21 = org.apache.commons.codec.digest.Crypt.crypt(byteArray14, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec23 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet24 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet24, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        byte[] byteArray29 = uRLCodec23.encode(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray14, byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray14);
        byte[] byteArray32 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet8, byteArray31);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray38);
        java.lang.String str41 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray38, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray38);
        java.lang.String str45 = org.apache.commons.codec.digest.Crypt.crypt(byteArray38, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec47 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet48 = null;
        byte[] byteArray50 = new byte[] { (byte) 100 };
        byte[] byteArray51 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet48, byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray51);
        byte[] byteArray53 = uRLCodec47.encode(byteArray52);
        java.lang.String str54 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray38, byteArray52);
        byte[] byteArray55 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray38);
        java.io.InputStream inputStream56 = java.io.InputStream.nullInputStream();
        java.lang.String str57 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream56);
        byte[] byteArray58 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray38, inputStream56);
        byte[] byteArray59 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream56);
        byte[] byteArray60 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray31, inputStream56);
        java.lang.String str61 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray7, inputStream56);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0Acd8L3u4hVxI" + "'", str21, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str30, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str39, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str41, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "AAAAAAA" + "'", str42, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str43, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0Acd8L3u4hVxI" + "'", str45, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str54, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str57, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2f8570af520161ee797832c792b086c2f502d8c78c7f11e44b23665cde8ff459" + "'", str61, "2f8570af520161ee797832c792b086c2f502d8c78c7f11e44b23665cde8ff459");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("SHA3-512");
        java.nio.file.Path path2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, path2, openOptionArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-512 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Le("MD5");
        java.io.InputStream inputStream2 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream2, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy8 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream9 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream5, false, false, codecPolicy8);
        boolean boolean10 = base16InputStream5.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray1, (java.io.InputStream) base16InputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[77, 0, 68, 0, 53, 0]");
        org.junit.Assert.assertTrue("'" + codecPolicy8 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy8.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray5);
        byte[] byteArray9 = uRLCodec1.decode(byteArray5);
        char[] charArray10 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Hex.decodeHex(charArray10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$1$hph3J0Rg$YLJ79SIv3neqL6nh1e1Qw1" + "'", str8, "$1$hph3J0Rg$YLJ79SIv3neqL6nh1e1Qw1");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "000000000000000000000000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "000000000000000000000000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        int int5 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray3, 0);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-965378730) + "'", int5 == (-965378730));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        java.lang.String str6 = colognePhonetic0.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.String str8 = colognePhonetic0.colognePhonetic("f4e1697970fc1349ee187dd1e09052bd093b566a7baf611521e0a2cb");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "828213832432323283231" + "'", str6, "828213832432323283231");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "33821211381" + "'", str8, "33821211381");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        java.lang.String str11 = uRLCodec1.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = uRLCodec1.encode("SHA-512/224");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: hi!");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Languages languages1 = org.apache.commons.codec.language.bm.Languages.getInstance("tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("BDABFA");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 66, 0, 68, 0, 65, 0, 66, 0, 70, 0, 65]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec3 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray9, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray9);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray9);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray9);
        java.lang.Object obj16 = quotedPrintableCodec3.decode((java.lang.Object) byteArray9);
        java.lang.String str17 = quotedPrintableCodec3.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec3.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec3.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec22 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        byte[] byteArray28 = uRLCodec22.encode(byteArray27);
        int int29 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray27);
        byte[] byteArray30 = quotedPrintableCodec3.encode(byteArray27);
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray30, true, (byte) -1);
        org.apache.commons.codec.digest.XXHash32 xXHash32_34 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet35 = null;
        byte[] byteArray37 = new byte[] { (byte) 100 };
        byte[] byteArray38 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet35, byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray38);
        xXHash32_34.update(byteArray40, (int) (byte) 10, (-690116322));
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        byte[] byteArray45 = base32_33.decode(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils46 = new org.apache.commons.codec.digest.HmacUtils("$1$UYtF..0A$qlvzexZps/99jmTbfJRm11", byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm $1$UYtF..0A$qlvzexZps/99jmTbfJRm11 not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str12, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AAAAAAA" + "'", str13, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str14, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str15, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTF-8" + "'", str17, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTF-8" + "'", str18, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-690116322) + "'", int29 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MDExMDAxMDA" + "'", str44, "MDExMDAxMDA");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 66, 0, 4, 0]");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.String[] strArray24 = new java.lang.String[] { "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", "79d351ca4f5462d2eb5f2595220e0863", "$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.", "UTF-8", "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "CABAFD", "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.", "2ef0725975afd171e9cb76444b4969c3", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1", "ALL", "$6$G6GWDhAR$4Fuin7zgOWL9QptRqMT6rZ4PF.leUwW7/wmllLQljiOqJL3c5jKiXNyOLl3loO4IJbTgJg6ZU5Hhm8yT37Uad1", "16fd67a8bb44f961f07f53972686acb3", "F", "d", "c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da", "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4", "any", "AGgAaQAh", "2ad36d9d51748e827af1acab7568d5e2", "8350e5a3e24c153df2275c9f80692773", "83d93cffb05d8435fffd7cd6e362a48eefb66689" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet27 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet25);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet28 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet25);
        java.lang.String str29 = languageSet28.getAny();
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(languageSet27);
        org.junit.Assert.assertNotNull(languageSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6" + "'", str29, "728e7e7fe175a32ac1c5fa6786a0ca765daf419e5b76f5e89f105b541267b7a6");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1);
        long long3 = pureJavaCrc32_0.getValue();
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet6 = null;
        byte[] byteArray8 = new byte[] { (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet6, byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray9);
        boolean boolean12 = base32_5.isInAlphabet(byteArray10, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str15 = base32_5.encodeAsString(byteArray14);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32_0.update(byteArray14, 100, 1650246903);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2768625435L + "'", long3 == 2768625435L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ABUAA2IAEE======" + "'", str15, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream0);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream0);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream5 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, false);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512_224((java.io.InputStream) base32InputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base32InputStream5);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str2, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream31 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, true, codecPolicy30);
        base16OutputStream31.eof();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "e0046cd0dfa81607b750a185c35c89faef150679" + "'", str1, "e0046cd0dfa81607b750a185c35c89faef150679");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -119, -47, 37, 54, -32, -26, 90, 13, 102, -125, -62, -17, -82, -42, 127, 17, 79, -93, -47, -47, -37, -83, 106, -71, 42, 49, 70]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1949d07c900ec5bb8c2a26a6b1fc8faa1ad64bb36c17cc7ace38172381cecf21308c73111beb88e7369b5c8d20e48d29" + "'", str8, "1949d07c900ec5bb8c2a26a6b1fc8faa1ad64bb36c17cc7ace38172381cecf21308c73111beb88e7369b5c8d20e48d29");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.OutputStream outputStream5 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream5, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        baseNCodecOutputStream9.eof();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream14 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream9, (org.apache.commons.codec.binary.BaseNCodec) base16_12, false);
        long long15 = inputStream1.transferTo((java.io.OutputStream) baseNCodecOutputStream14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream1);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(inputStream1);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(outputStream5);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str17, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str18, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str14 = org.apache.commons.codec.digest.Crypt.crypt(byteArray7, "0A01640101");
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        java.lang.String str16 = base32_1.encodeToString(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = base32_1.encode((java.lang.Object) "ee68702b6ce9cfbd31f66fbcd66ff2d0");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0Acd8L3u4hVxI" + "'", str14, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str16, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray2);
        java.io.RandomAccessFile randomAccessFile4 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, randomAccessFile4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream36 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest35, inputStream36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest37);
        org.apache.commons.codec.net.URLCodec uRLCodec40 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet41 = null;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray44 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet41, byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray44);
        byte[] byteArray47 = uRLCodec40.decode(byteArray44);
        byte[] byteArray48 = null;
        byte[] byteArray49 = uRLCodec40.decode(byteArray48);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str56 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray55);
        java.lang.String str58 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray55, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_59 = new org.apache.commons.codec.binary.Base16();
        boolean boolean61 = base16_59.isInAlphabet("AAAAAAA");
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str67 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray65, true);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray65);
        boolean boolean70 = base16_59.isInAlphabet(byteArray65, true);
        byte[] byteArray71 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray55, byteArray65);
        byte[] byteArray72 = uRLCodec40.encode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest37, byteArray72);
        byte[] byteArray74 = uRLCodec1.decode(byteArray73);
        javax.crypto.Mac mac75 = org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byteArray74);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str46, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str56, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str58, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ffffff" + "'", str67, "ffffff");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str68, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertNotNull(mac75);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        boolean boolean5 = qCodec3.isEncodeBlanks();
        java.nio.charset.Charset charset6 = qCodec3.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = qCodec3.decode("U=QF");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        base64OutputStream1.write((int) (short) 100);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        org.apache.commons.codec.net.PercentCodec percentCodec8 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray9 = null;
        byte[] byteArray10 = percentCodec8.encode(byteArray9);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray14 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray17 = percentCodec8.decode(byteArray13);
        boolean boolean19 = base32_7.isInAlphabet(byteArray17, true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream21 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base64OutputStream1, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream23 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str15, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.Languages languages5 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType3);
        beiderMorseEncoder0.setNameType(nameType3);
        boolean boolean7 = beiderMorseEncoder0.isConcat();
        beiderMorseEncoder0.setConcat(false);
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(languages5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        base64OutputStream1.write((int) '4');
        base64OutputStream1.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream10 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1);
        boolean boolean11 = base64OutputStream1.isStrictDecoding();
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream17);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream17);
        java.io.OutputStream outputStream23 = null;
        java.io.OutputStream outputStream26 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream27 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream26);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream27.write(byteArray30);
        base64OutputStream27.write((int) '4');
        base64OutputStream27.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream36 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream27);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray45);
        java.lang.String str48 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray45, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray45);
        java.io.InputStream inputStream51 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream54 = new org.apache.commons.codec.binary.Base16InputStream(inputStream51, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy57 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream58 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream54, false, false, codecPolicy57);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray45, true, codecPolicy57);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream60 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream36, true, false, codecPolicy57);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream61 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream23, false, true, codecPolicy57);
        org.apache.commons.codec.binary.Base16 base16_62 = new org.apache.commons.codec.binary.Base16(true, codecPolicy57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32OutputStream base32OutputStream63 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 686869806, byteArray21, codecPolicy57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [?9??^kK?2U??`??????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(outputStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str46, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str48, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AAAAAAA" + "'", str49, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy57 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy57.equals(org.apache.commons.codec.CodecPolicy.STRICT));
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        byte[] byteArray5 = digestUtils1.digest("c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byteArray5);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[120, -123, 96, -18, -56, -24, 111, 82, -85, 10, -94, -42, 108, 105, -108, -90, 92, 87, 13, -15, 20, 9, -55, 48, 23, -88, 27, 106, 106, -102, 90, -100, -115, -5, -31, 75, -37, -104, 30, -99, -94, 4, 52, -102, 120, -19, -67, -14]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1a8b0c056a68adf6aa082a0a1251c0d77c7f2519a27d869b0c6a134243fa2b6dc0acbaca33b153b0ae7190e7b53f0a4b4e7f211628e25f39a8c9a6a737d1caa7" + "'", str6, "1a8b0c056a68adf6aa082a0a1251c0d77c7f2519a27d869b0c6a134243fa2b6dc0acbaca33b153b0ae7190e7b53f0a4b4e7f211628e25f39a8c9a6a737d1caa7");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.codec.digest.Crypt.crypt(byteArray3, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_256("f677e3ff7fcad6865eb5c8b2cafaf3fc9ff5058b");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[92, 65, -124, -70, 127, -13, -59, -56, -53, 45, -69, 126, 77, -19, -1, 65, 37, -90, 32, -4, -7, -123, 16, -77, 19, 21, 30, -29, 106, 13, 65, -70]");
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        boolean boolean9 = phoneticEngine4.isConcat();
        int int10 = phoneticEngine4.getMaxPhonemes();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("ab58a8ecd617b254b3bfc56ff14d5a91d6b42d26a5b0a13d1caa38fbca4cef66", "410f9e3083fb61704291e52188ef15b99f7a7db5addab258278ed70f0adaea3c");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[92, -96, 117, 114, 103, -7, 73, -96, 53, 12, 80, 97, -33, 97, 31, 75, -43, 126, 106, 79]");
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha512_224(inputStream0);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex hex1 = new org.apache.commons.codec.binary.Hex("8350e5a3e24c153df2275c9f80692773");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 8350e5a3e24c153df2275c9f80692773");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray10, false);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray4, byteArray10);
        char[] charArray15 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray10);
        boolean boolean17 = base64_1.isInAlphabet(byteArray10, true);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream18);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream21 = new org.apache.commons.codec.binary.Base64InputStream(inputStream18, false);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray10, (java.io.InputStream) base64InputStream21);
        int int25 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray10, (int) (short) 1, (-965378730));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0A01640101" + "'", str13, "0A01640101");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str14, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "30518803fd404b638c1766a65a9a9e5fd86d0fc2" + "'", str22, "30518803fd404b638c1766a65a9a9e5fd86d0fc2");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2140710732) + "'", int25 == (-2140710732));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex("5981d4f7892cfca9e4089cf1f1b8423bc7b33e98a0d594757ac8dd55", "dbb7d22dda2c3576b94231d317be2db6353182c14b97e4dfb046d5e8c5089b8e049ba2edd62658e1084f1ddbee39fce1bbbd710cbb7d3bf3c2699abe0b72e3fb");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4071539fc50bfd06fe9bf8002f6a05197e2be5e824a2071beb9973fc9db759218db9682aba68f61000dd64b0f4db7e64" + "'", str2, "4071539fc50bfd06fe9bf8002f6a05197e2be5e824a2071beb9973fc9db759218db9682aba68f61000dd64b0f4db7e64");
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str11, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.lang.String str34 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray30, "$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        // The following exception was thrown during execution in test generation
        try {
            int int37 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray30, (int) ' ', (-64519185));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3." + "'", str34, "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex("$apr1$FFFFFF$gNzyWPaeMX71d75Kk4laA1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "287093274421628213c056d880ab6b8ffd857123ce9fc58aee0b8585374729e81ade598af1b06f4d40e555a0924a6761b99e3bc1409d529606ab673fde5ee579" + "'", str1, "287093274421628213c056d880ab6b8ffd857123ce9fc58aee0b8585374729e81ade598af1b06f4d40e555a0924a6761b99e3bc1409d529606ab673fde5ee579");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        java.lang.String str6 = colognePhonetic0.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.String str8 = colognePhonetic0.colognePhonetic("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        java.lang.String str10 = colognePhonetic0.colognePhonetic("d7bXONth0AIyo");
        org.apache.commons.codec.language.bm.NameType nameType11 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang12 = org.apache.commons.codec.language.bm.Lang.instance(nameType11);
        org.apache.commons.codec.language.bm.NameType nameType13 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType14 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap16 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType13, ruleType14, languageSet15);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet17 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap18 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType11, ruleType14, languageSet17);
        boolean boolean20 = languageSet17.contains("\000h\000i\000!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = colognePhonetic0.encode((java.lang.Object) languageSet17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: This method's parameter was expected to be of the type java.lang.String. But actually it was of the type org.apache.commons.codec.language.bm.Languages$2.");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "828213832432323283231" + "'", str6, "828213832432323283231");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "074144668286427481268138212338282381323183123" + "'", str8, "074144668286427481268138212338282381323183123");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "214862" + "'", str10, "214862");
        org.junit.Assert.assertTrue("'" + nameType11 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType11.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang12);
        org.junit.Assert.assertTrue("'" + nameType13 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType13.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType14 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType14.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(languageSet17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms4 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet5, byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray8);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms4, byteArray9);
        org.apache.commons.codec.digest.HmacUtils hmacUtils12 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms4, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream13 = null;
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy18 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream13, true, (int) (byte) 0, byteArray17, codecPolicy18);
        char[] charArray20 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray17);
        java.lang.String str21 = hmacUtils12.hmacHex(byteArray17);
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest22, inputStream23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream23);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream23);
        java.lang.String str27 = hmacUtils12.hmacHex(inputStream23);
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        java.io.InputStream inputStream31 = java.io.InputStream.nullInputStream();
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray30, inputStream31);
        java.io.InputStream inputStream33 = java.io.InputStream.nullInputStream();
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream33);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream33);
        java.lang.String str36 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray30, inputStream33);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream33);
        java.lang.String str38 = hmacUtils12.hmacHex(inputStream33);
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream33);
        java.lang.String str40 = digestUtils1.digestAsHex(inputStream33);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms4 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms4.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str21, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str25, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str27, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str34, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str35, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str36, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str37, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str38, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str40, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("hi!");
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream3 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream2);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream5 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream3, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream7 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream3, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_10 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray14);
        xXHash32_10.update(byteArray16, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream20 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream3, true, 760066800, byteArray16);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream22);
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray16, inputStream22);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream22);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray1, inputStream22);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream22);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-64, -35, -42, 44, 119, 23, 24, 14, 127, -5, -118, 21, -69, -106, 116, -45, -20, -110, 89, 46, 11, 122, -57, -47, -43, 40, -104, 54, -76, 85, 59, -30]");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str26, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str27, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[125, -104, -107, -120, 43, -101, 25, -54, -33, 60, 55, -44, 70, -93, -40, -87, -72, -127, 17, -46, 69, 17, 88, 11, -32, 80, 3, 97, -69, -59, -123, -67, -32, 31, 5, -122, 59, -46, 81, 46, 17, -2, 117, -61, -112, -18, 43, -101]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str29, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern0 = org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER;
        boolean boolean2 = rPattern0.isMatch((java.lang.CharSequence) "63IhWfn9C4Ars");
        org.junit.Assert.assertNotNull(rPattern0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        pureJavaCrc32C0.update(3527094);
        pureJavaCrc32C0.update((-1310417787));
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = base64_18.decode("33d13b80afa35b65372c55f03977305eb5625afe39ef95e46a4f81117c28c5226f4a27c0966b35419b9d6ef2dfb6655ff80d041462abddf7e3b5f29f7573795e");
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray20);
        pureJavaCrc32C0.update(byteArray20);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-33, 119, 117, -35, -65, 52, 105, -10, -73, -27, -66, -71, -33, -67, -100, -25, -105, -12, -33, -34, -5, -33, 78, 94, 111, -98, -74, -27, -89, -34, -33, -41, -97, -9, -105, -72, -23, -82, 31, -13, 93, 117, -19, -51, -68, 115, -99, -74, -23, -2, 26, -37, -73, 52, -9, -82, -101, -33, -98, 53, -11, -65, 93, -23, -25, -10, 117, -10, -6, -21, -98, 95, 127, -51, 29, -45, -115, 120, -21, 102, -101, 117, -41, -5, 123, 118, -7, 127, 111, 95, -17, -98, -9, -17, -34, 94]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-120, -100, -6, 49, 73, -34, -114, -96, 118, 41, 11, 115, -65, 69, -52, 91, -53, -74, -46, 39, -47, -74, -54, -64, -34, 33, 111, -66]");
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((short) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-8280562508237401750L) + "'", long1 == (-8280562508237401750L));
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        boolean boolean6 = base64OutputStream5.isStrictDecoding();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream24);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream24);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray22, byteArray27);
        long[] longArray29 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str26, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, 71, 108, -2, -39, 32, -105, -28, -46, 120, 125, 64, -100, 82, 88, 109]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-5762188015396591942, -3155733092595323925]");
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        org.apache.commons.codec.digest.DigestUtils digestUtils37 = new org.apache.commons.codec.digest.DigestUtils(messageDigest36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream39);
        java.nio.ByteBuffer byteBuffer42 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest40, byteBuffer42);
        java.lang.String str44 = digestUtils37.digestAsHex(byteBuffer42);
        byte[] byteArray47 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str54 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray53);
        java.lang.String str56 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray53, false);
        java.lang.String str57 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray47, byteArray53);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        javax.crypto.Mac mac59 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray53);
        byte[] byteArray60 = digestUtils37.digest(byteArray53);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(messageDigest40);
        org.junit.Assert.assertEquals(messageDigest40.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe" + "'", str44, "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str54, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0A01640101" + "'", str56, "0A01640101");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str57, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(mac59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[25, 73, -48, 124, -112, 14, -59, -69, -116, 42, 38, -90, -79, -4, -113, -86, 26, -42, 75, -77, 108, 23, -52, 122, -50, 56, 23, 35, -127, -50, -49, 33, 48, -116, 115, 17, 27, -21, -120, -25, 54, -101, 92, -115, 32, -28, -115, 41]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.lang.String str9 = bCodec2.encode("54d7107aa24bc36b8e80134b8e4ea34c0185bf226a305b9511a3711173b8f450e7494952770ec663d90fe5f906df8f27");
        java.nio.charset.Charset charset11 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy12 = null;
        org.apache.commons.codec.net.BCodec bCodec13 = new org.apache.commons.codec.net.BCodec(charset11, codecPolicy12);
        java.nio.charset.Charset charset14 = org.apache.commons.codec.Charsets.toCharset(charset11);
        java.nio.charset.Charset charset15 = org.apache.commons.codec.Charsets.toCharset(charset14);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec17 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset14, false);
        java.lang.String str18 = bCodec2.encode("Ptz9RTz3KVvV2", charset14);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=" + "'", str9, "=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=");
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "=?UTF-8?B?UHR6OVJUejNLVnZWMg==?=" + "'", str18, "=?UTF-8?B?UHR6OVJUejNLVnZWMg==?=");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream6 = new org.apache.commons.codec.binary.Base32OutputStream(outputStream0, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream9 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, false);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_384("$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-48, -45, 37, 4, 71, 13, -3, 36, 79, 70, 99, 54, 6, -72, 61, -104, 43, 88, -56, -44, 28, 7, -23, 110, 83, 8, 46, -60, 116, 68, -88, 115, -84, -125, -19, -69, -57, 0, -74, -15, -61, 71, 122, 101, 78, 103, -81, 101]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.util.BitSet bitSet0 = null;
        java.io.OutputStream outputStream1 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream2 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream2.write(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray5, false);
        org.junit.Assert.assertNotNull(outputStream1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fa0ab302e8502bdf706a9c45df0c8842" + "'", str7, "fa0ab302e8502bdf706a9c45df0c8842");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 69, 54, 61, 65, 55, 61, 70, 68, 124, 61, 48, 51, 69, 108, 61, 57, 69, 85, 61, 68, 51, 61, 49, 67, 36, 61, 57, 55, 120, 86, 68, 61, 49, 68, 69, 61, 57, 70, 61, 48, 65, 61, 70, 70, 43, 61, 56, 50, 62, 61, 48, 50, 83, 43, 61, 56, 68, 69, 61, 65, 68, 61, 48, 52, 63]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream26);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray8, inputStream26);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream26);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream26, false);
        java.lang.String str32 = hmacUtils2.hmacHex(inputStream26);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream34 = new org.apache.commons.codec.binary.Base64InputStream(inputStream26, true);
        org.apache.commons.codec.net.URLCodec uRLCodec36 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet37 = null;
        byte[] byteArray39 = new byte[] { (byte) 100 };
        byte[] byteArray40 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet37, byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray40);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray40);
        byte[] byteArray43 = uRLCodec36.decode(byteArray40);
        byte[] byteArray44 = null;
        byte[] byteArray45 = uRLCodec36.decode(byteArray44);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str52 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray51);
        java.lang.String str54 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray51, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_55 = new org.apache.commons.codec.binary.Base16();
        boolean boolean57 = base16_55.isInAlphabet("AAAAAAA");
        byte[] byteArray61 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str63 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray61, true);
        java.lang.String str64 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray61);
        boolean boolean66 = base16_55.isInAlphabet(byteArray61, true);
        byte[] byteArray67 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray51, byteArray61);
        byte[] byteArray68 = uRLCodec36.encode(byteArray67);
        int int69 = base64InputStream34.read(byteArray68);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str27, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "a9580121fcdd7da9ddacbfbdf9d824ea" + "'", str32, "a9580121fcdd7da9ddacbfbdf9d824ea");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str42, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str52, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str54, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ffffff" + "'", str63, "ffffff");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str64, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream5);
        byte[] byteArray10 = inputStream5.readNBytes((int) ' ');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true);
        java.lang.String str13 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str6, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str7, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str8, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("hi!", "964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[44, 60, -106, -118, -79, 66, 26, 102, 64, 24, -49, -23, -85, -50, 119, 28, 104, 112, -25, -120, -82, -12, -63, 68, 7, 79, -38, -105, -66, 52, 35, -85, 53, -58, 97, 34, 15, -51, -57, -73, -61, -106, 49, 47, 116, 122, -82, 4]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec18 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray24);
        java.lang.String str27 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray24, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray24);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray24);
        java.lang.Object obj31 = quotedPrintableCodec18.decode((java.lang.Object) byteArray24);
        java.lang.String str32 = quotedPrintableCodec18.getDefaultCharset();
        java.lang.String str33 = quotedPrintableCodec18.getDefaultCharset();
        java.lang.String str35 = quotedPrintableCodec18.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.nio.charset.Charset charset37 = org.apache.commons.codec.Charsets.UTF_16BE;
        java.lang.String str38 = quotedPrintableCodec18.encode("00001010000011010110100001000001010100010110000101000001011001110100011101000001", charset37);
        java.lang.String str39 = quotedPrintableCodec1.decode("$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/", charset37);
        org.apache.commons.codec.net.QCodec qCodec40 = new org.apache.commons.codec.net.QCodec(charset37);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str25, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str27, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AAAAAAA" + "'", str28, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str29, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str30, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTF-8" + "'", str32, "UTF-8");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTF-8" + "'", str33, "UTF-8");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str35, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001" + "'", str38, "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u2461\u7072\u3124\u3979\u746e\u3936\u4666\u2476\u4578\u4541\u7364\u4330\u3252\u6336\u6c42\u4643\u3270\u4878\ufffd" + "'", str39, "\u2461\u7072\u3124\u3979\u746e\u3936\u4666\u2476\u4578\u4541\u7364\u4330\u3252\u6336\u6c42\u4643\u3270\u4878\ufffd");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = hex2.encode(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 100, 48, 101, 52, 99, 53, 101, 97, 102, 97, 55, 102, 49, 49, 50, 49, 97, 49, 57, 48, 53, 56, 51, 56, 54, 48, 56, 49, 52, 97, 50, 55, 57, 97, 53, 55, 101, 54, 101, 101, 53, 100, 48, 101, 51, 50, 54, 98, 57, 53, 53, 50, 55, 98, 50]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9754045ec0d64afb4659d131f20b4fe2f99442bd" + "'", str9, "9754045ec0d64afb4659d131f20b4fe2f99442bd");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("76f40729dacdcd7c7ebeae1b7e1b3f6834109961");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "d769ec1a57fac1174c7731a9862103e8c34872272673d33161f4798a3a47f28e" + "'", str1, "d769ec1a57fac1174c7731a9862103e8c34872272673d33161f4798a3a47f28e");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms6 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet7, byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray10);
        javax.crypto.Mac mac12 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms6, byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_19 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray18);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac12, byteArray18);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream22);
        javax.crypto.Mac mac26 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac20, inputStream22);
        byte[] byteArray28 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.io.InputStream inputStream30 = java.io.InputStream.nullInputStream();
        java.lang.String str31 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray29, inputStream30);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream32 = new org.apache.commons.codec.binary.Base64InputStream(inputStream30);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream33 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream32);
        javax.crypto.Mac mac34 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac20, (java.io.InputStream) base16InputStream33);
        java.io.OutputStream outputStream35 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_37 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream39 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream35, (org.apache.commons.codec.binary.BaseNCodec) base16_37, false);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str43 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray42);
        long long44 = base16_37.getEncodedLength(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str47 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray42, byteArray46);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray42);
        int int49 = base16InputStream33.read(byteArray42);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, (java.io.InputStream) base16InputStream33);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream52 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream33, false);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms6 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms6.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str31, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac34);
        org.junit.Assert.assertNotNull(outputStream35);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000\ufffd" + "'", str43, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 4L + "'", long44 == 4L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str47, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str48, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        int int7 = base64InputStream5.read();
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str8, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base64InputStream5);
        boolean boolean8 = base64InputStream5.markSupported();
        org.apache.commons.codec.binary.Base16InputStream base16InputStream11 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream5, true, true);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex((java.io.InputStream) base16InputStream11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str12, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream8);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream8);
        java.io.InputStream inputStream12 = java.io.InputStream.nullInputStream();
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream12);
        byte[] byteArray14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, inputStream12);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base64_17.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_19 = new org.apache.commons.codec.binary.Base16(false, codecPolicy18);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray25, false);
        byte[] byteArray29 = org.apache.commons.codec.digest.Blake3.hash(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray25);
        long long31 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray25);
        javax.crypto.Mac mac32 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray25);
        java.lang.String str33 = base16_19.encodeAsString(byteArray25);
        byte[] byteArray34 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray25);
        byte[] byteArray35 = binaryCodec0.decode(byteArray11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str10, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str13, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0A01640101" + "'", str28, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str30, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-7793026892456512543L) + "'", long31 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0A01640101" + "'", str33, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str8 = doubleMetaphoneResult7.getPrimary();
        doubleMetaphoneResult7.append("$6$aXMHILof$fPCmrwTDKP8tgRiPtqfSVmcQzOW1qIhrD.i6V2/8GwacU7XIg3Ddqv8lo6b6knjXoaS0GEuA3UvBQb/Av1NXt.");
        doubleMetaphoneResult7.append('#');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray5);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray11, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-95, 9, 9, -62, -51, -54, -11, -83, -73, -26, -80, -110, -92, -6, -70, 85, -117, 98, -67, -106]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "a10909c2cdcaf5adb7e6b092a4faba558b62bd96" + "'", str13, "a10909c2cdcaf5adb7e6b092a4faba558b62bd96");
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.lang.String str3 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 629192958);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray7, "44c9a137a4038a1ef0411ae025aec0e06a9209a3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 44c9a137a4038a1ef0411ae025aec0e06a9209a3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000" + "'", str3, "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex("$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.", "980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "62a9e8f20e18c44395f008bc32cd29d6f518a7d8" + "'", str2, "62a9e8f20e18c44395f008bc32cd29d6f518a7d8");
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        org.apache.commons.codec.digest.HmacUtils hmacUtils4 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "00340031003400310034003100340031003400310034003100340031003300640030006400300061");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult2 = doubleMetaphone0.new DoubleMetaphoneResult((-1642666625));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to org.apache.commons.codec.language.DoubleMetaphone$DoubleMetaphoneResult with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_3 = new org.apache.commons.codec.binary.Base32(629192958, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [WZ_N?Y??6????,Q|]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream5);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray4, inputStream5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy11 = base64_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(false, codecPolicy11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        byte[] byteArray22 = org.apache.commons.codec.digest.Blake3.hash(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray18);
        long long24 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray18);
        javax.crypto.Mac mac25 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        java.lang.String str26 = base16_12.encodeAsString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray4, byteArray18);
        java.lang.String str28 = org.apache.commons.codec.digest.Crypt.crypt(byteArray4);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str6, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertTrue("'" + codecPolicy11 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy11.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str23, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-7793026892456512543L) + "'", long24 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A01640101" + "'", str26, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, -83, -7, -24, -76, 56, -95, 56, -28, -88, 23, -117, 36, 13, -22, -56, 19, -91, 103, -21, -97, 64, 16, -31, 22, 121, -10, 104, 19, 80, 45, 94, 85, 10, 11, -96, -65, 26, 60, -56, -13, -5, 107, 33, 96, 23, 59, -85]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$6$gCyu2PUu$CQCkPKu2Bt349RpUqy8wsNkQitdKoEMJPGt6x4QzOVsjWJXAePcu8iVl.j3IBHzZ4601f9qzGGNapL/YAXO9k." + "'", str28, "$6$gCyu2PUu$CQCkPKu2Bt349RpUqy8wsNkQitdKoEMJPGt6x4QzOVsjWJXAePcu8iVl.j3IBHzZ4601f9qzGGNapL/YAXO9k.");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.BCodec bCodec1 = new org.apache.commons.codec.net.BCodec("0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.apache.commons.codec.DecoderException decoderException0 = new org.apache.commons.codec.DecoderException();
        java.lang.Throwable throwable1 = null;
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException(throwable1);
        org.apache.commons.codec.EncoderException encoderException3 = new org.apache.commons.codec.EncoderException();
        decoderException2.addSuppressed((java.lang.Throwable) encoderException3);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException(throwable5);
        org.apache.commons.codec.EncoderException encoderException7 = new org.apache.commons.codec.EncoderException();
        decoderException6.addSuppressed((java.lang.Throwable) encoderException7);
        encoderException3.addSuppressed((java.lang.Throwable) encoderException7);
        java.lang.Throwable[] throwableArray10 = encoderException3.getSuppressed();
        java.lang.Throwable[] throwableArray11 = encoderException3.getSuppressed();
        decoderException0.addSuppressed((java.lang.Throwable) encoderException3);
        java.lang.String str13 = encoderException3.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.codec.EncoderException" + "'", str13, "org.apache.commons.codec.EncoderException");
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.colognePhonetic("079564");
        java.lang.String str4 = colognePhonetic0.colognePhonetic("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
        java.lang.String str6 = colognePhonetic0.colognePhonetic("964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "13132184822182828" + "'", str6, "13132184822182828");
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        char[] charArray4 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray2, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "B0FEF67BB22232F6F3C0F8F05B93AF83FC2E887D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "B0FEF67BB22232F6F3C0F8F05B93AF83FC2E887D");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[B, 0, F, E, F, 6, 7, B, B, 2, 2, 2, 3, 2, F, 6, F, 3, C, 0, F, 8, F, 0, 5, B, 9, 3, A, F, 8, 3, F, C, 2, E, 8, 8, 7, D]");
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("PKMF", "ffaRlX9TmFOkk");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "bf5f40469b2eaeb2fcf2ebc705f0510a" + "'", str2, "bf5f40469b2eaeb2fcf2ebc705f0510a");
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray23);
        byte[] byteArray26 = uRLCodec19.decode(byteArray23);
        byte[] byteArray27 = null;
        byte[] byteArray28 = uRLCodec19.decode(byteArray27);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_38 = new org.apache.commons.codec.binary.Base16();
        boolean boolean40 = base16_38.isInAlphabet("AAAAAAA");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str46 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray44, true);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray44);
        boolean boolean49 = base16_38.isInAlphabet(byteArray44, true);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray34, byteArray44);
        byte[] byteArray51 = uRLCodec19.encode(byteArray50);
        byte[] byteArray52 = quotedPrintableCodec1.decode(byteArray51);
        java.nio.charset.Charset charset53 = quotedPrintableCodec1.getCharset();
        java.nio.charset.Charset charset54 = quotedPrintableCodec1.getCharset();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str25, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ffffff" + "'", str46, "ffffff");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str47, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charset54);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        boolean boolean9 = phoneticEngine4.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType10 = phoneticEngine4.getNameType();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(nameType10);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha1Digest();
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, file1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-1 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base64InputStream5);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isBase64(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray12 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray7, 1137768543, (int) (byte) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1137768543 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250", false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream2 = new org.apache.commons.codec.binary.Base16InputStream(inputStream0, true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "5bcbd9ee079fb44bfdb83f466e99643c469590c71bd8ee7eb600134b07289677" + "'", str1, "5bcbd9ee079fb44bfdb83f466e99643c469590c71bd8ee7eb600134b07289677");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.Lang lang9 = phoneticEngine4.getLang();
        org.apache.commons.codec.language.bm.Lang lang10 = phoneticEngine4.getLang();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = phoneticEngine4.encode("ca73f0c17889db16a65cc87b97ac0bcd537d3f9d");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(lang9);
        org.junit.Assert.assertNull(lang10);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest1, byteBuffer4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, inputStream7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream7);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream7);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet17, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray20);
        boolean boolean23 = base32_16.isInAlphabet(byteArray21, false);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_16.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream25 = new org.apache.commons.codec.binary.Base32InputStream(inputStream7, false, (-965378730), byteArray14, codecPolicy24);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, (java.io.InputStream) base32InputStream25);
        java.nio.file.Path path27 = null;
        java.nio.file.OpenOption openOption28 = null;
        java.nio.file.OpenOption[] openOptionArray29 = new java.nio.file.OpenOption[] { openOption28 };
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest30 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, path27, openOptionArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str9, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str10, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(openOptionArray29);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = org.apache.commons.codec.digest.MurmurHash2.hash64(byteArray1, (-1351066954), (-1310417787));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1351066955 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray4 = hmacUtils2.hmac("ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray6 = hmacUtils2.hmac(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[22, 100, 68, -1, 43, 82, -88, -45, -49, -113, -63, -85, -101, -94, -62, 18]");
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("00471739705a2c31cecb8fb10ee39fd74bad5cc9c783a49c72bed49fb902ccd0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "8bad4233adc69ef1ec8bebffcc637aa87ec2aa48" + "'", str1, "8bad4233adc69ef1ec8bebffcc637aa87ec2aa48");
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        java.lang.Object obj15 = quotedPrintableCodec2.decode((java.lang.Object) byteArray8);
        java.lang.String str16 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str19 = quotedPrintableCodec2.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec21 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        byte[] byteArray27 = uRLCodec21.encode(byteArray26);
        int int28 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray26);
        byte[] byteArray29 = quotedPrintableCodec2.encode(byteArray26);
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray29, true, (byte) -1);
        org.apache.commons.codec.digest.XXHash32 xXHash32_33 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray37 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet34, byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray37);
        xXHash32_33.update(byteArray39, (int) (byte) 10, (-690116322));
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        byte[] byteArray44 = base32_32.decode(byteArray39);
        org.apache.commons.codec.binary.Base16 base16_46 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray48 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str49 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray48);
        byte[] byteArray50 = base16_46.encode(byteArray48);
        org.apache.commons.codec.CodecPolicy codecPolicy51 = base16_46.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj52 = base32_32.encode((java.lang.Object) base16_46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base-N encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTF-8" + "'", str17, "UTF-8");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-690116322) + "'", int28 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "MDExMDAxMDA" + "'", str43, "MDExMDAxMDA");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 66, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str49, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy51 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy51.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException(throwable2);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException();
        decoderException3.addSuppressed((java.lang.Throwable) encoderException4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException(throwable6);
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException();
        decoderException7.addSuppressed((java.lang.Throwable) encoderException8);
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        java.lang.Throwable[] throwableArray11 = encoderException4.getSuppressed();
        java.lang.Throwable[] throwableArray12 = encoderException4.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d", (java.lang.Throwable) encoderException4);
        org.apache.commons.codec.EncoderException encoderException14 = new org.apache.commons.codec.EncoderException("bf5f40469b2eaeb2fcf2ebc705f0510a", (java.lang.Throwable) decoderException13);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        pureJavaCrc32C0.update((int) (byte) -1);
        byte[] byteArray6 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray12, false);
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray6, byteArray12);
        char[] charArray17 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray12);
        byte[] byteArray18 = org.apache.commons.codec.binary.Hex.decodeHex(charArray17);
        pureJavaCrc32C0.update(byteArray18, 2, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0A01640101" + "'", str15, "0A01640101");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str16, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 1, 0, 0, 0, 1, 1, 16, 1, 0, 0, 0, 0, 1, 0, 0, 16, 16]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType7, languageSet8);
        org.apache.commons.codec.language.bm.NameType nameType10 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang11 = org.apache.commons.codec.language.bm.Lang.instance(nameType10);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet13 = lang11.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = lang11.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap16 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType7, languageSet15);
        org.apache.commons.codec.language.Soundex soundex19 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator20 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex19);
        org.apache.commons.codec.language.bm.NameType nameType22 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType23 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet24 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap25 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType22, ruleType23, languageSet24);
        int int26 = stringEncoderComparator20.compare((java.lang.Object) "0Acd8L3u4hVxI", (java.lang.Object) ruleType23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine29 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType23, true, (-1877720325));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang11);
        org.junit.Assert.assertNotNull(languageSet13);
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + nameType22 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType22.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType23 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType23.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray6 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList7 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList7, phonemeArray6);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList9 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList7);
        org.apache.commons.codec.language.bm.Rule rule10 = new org.apache.commons.codec.language.bm.Rule("=?UTF-8?B?U0hBLTIyNA==?=", "$1$FivXNt8U$ItIalCUBqAE1stNT0FzGp/", "\000\000\000\000\000", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList9);
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr11 = rule10.getPhoneme();
        java.lang.Iterable<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeIterable12 = phonemeExpr11.getPhonemes();
        org.apache.commons.codec.language.bm.Rule rule13 = new org.apache.commons.codec.language.bm.Rule("BTFT", "AGgAaQAh", "76f40729dacdcd7c7ebeae1b7e1b3f6834109961", phonemeExpr11);
        org.junit.Assert.assertNotNull(phonemeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(phonemeExpr11);
        org.junit.Assert.assertNotNull(phonemeIterable12);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-128, -2, 71, 50, 45, 69, -52, -117, 31, 41, 110, -18, -59, -30, -123, 110, -116, -79, -3, 115, -34, 30, 100, 111, 29, 25, 23, 67, 69, 63, 124, 114]");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("b2Aup9HxaW1JY");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[98, 50, 65, 117, 112, 57, 72, 120, 97, 87, 49, 74, 89]");
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        boolean boolean5 = caverphone0.isCaverphoneEqual("$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/", "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        java.lang.String str7 = caverphone0.caverphone("980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
        org.apache.commons.codec.net.URLCodec uRLCodec9 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet10 = null;
        byte[] byteArray12 = new byte[] { (byte) 100 };
        byte[] byteArray13 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet10, byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray13);
        byte[] byteArray16 = uRLCodec9.decode(byteArray13);
        byte[] byteArray17 = null;
        byte[] byteArray18 = uRLCodec9.decode(byteArray17);
        java.lang.String str19 = uRLCodec9.getDefaultCharset();
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray23);
        byte[] byteArray26 = uRLCodec9.encode(byteArray23);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray26, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = caverphone0.encode((java.lang.Object) byteArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PFFPPPKTPS" + "'", str7, "PFFPPPKTPS");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str15, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "96978c0796ce94f7beb31576946b6bed" + "'", str25, "96978c0796ce94f7beb31576946b6bed");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$75da6acc$oyNM9tBh8syHhbU1A.bBA." + "'", str28, "$apr1$75da6acc$oyNM9tBh8syHhbU1A.bBA.");
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset8 = bCodec2.getCharset();
        boolean boolean9 = bCodec2.isStrictDecoding();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray13);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str32 = base32_22.encodeAsString(byteArray31);
        org.apache.commons.codec.digest.HmacUtils hmacUtils33 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms1, byteArray31);
        java.nio.ByteBuffer byteBuffer35 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray36 = hmacUtils33.hmac(byteBuffer35);
        org.apache.commons.codec.digest.XXHash32 xXHash32_37 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet38 = null;
        byte[] byteArray40 = new byte[] { (byte) 100 };
        byte[] byteArray41 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet38, byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray41);
        xXHash32_37.update(byteArray43, (int) (byte) 10, (-690116322));
        byte[] byteArray47 = hmacUtils33.hmac(byteArray43);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str53 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray52);
        org.apache.commons.codec.binary.Base32 base32_54 = new org.apache.commons.codec.binary.Base32((int) '4', byteArray52);
        org.apache.commons.codec.CodecPolicy codecPolicy55 = base32_54.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-488200341), byteArray43, false, codecPolicy55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [01100100]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ABUAA2IAEE======" + "'", str32, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[39, 4, -121, 49, -15, -74, 40, -101, -30, 112, -27, -46, -54, 76, 90, -119, -70, 103, 3, -89, 123, -127, 7, -109, 39, 83, 44, 42]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\000\ufffd" + "'", str53, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + codecPolicy55 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy55.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        java.io.OutputStream outputStream50 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream51 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream50);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream53 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream55 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_58 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet59 = null;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        byte[] byteArray62 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet59, byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray62);
        xXHash32_58.update(byteArray64, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream68 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true, 760066800, byteArray64);
        java.security.MessageDigest messageDigest69 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream70 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest71 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest69, inputStream70);
        java.lang.String str72 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream70);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream70);
        java.lang.String str74 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray64, inputStream70);
        java.lang.String str75 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray41, inputStream70);
        byte[] byteArray76 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray41);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(outputStream50);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest69);
        org.junit.Assert.assertEquals(messageDigest69.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(messageDigest71);
        org.junit.Assert.assertEquals(messageDigest71.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str72, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str74, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str75, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-95, 9, 9, -62, -51, -54, -11, -83, -73, -26, -80, -110, -92, -6, -70, 85, -117, 98, -67, -106]");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator3 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex2);
        java.lang.String str5 = soundex2.soundex("");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec1.decode("cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray23);
        java.lang.String str26 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray23, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray23);
        java.lang.String str30 = org.apache.commons.codec.digest.Crypt.crypt(byteArray23, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec32 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet33 = null;
        byte[] byteArray35 = new byte[] { (byte) 100 };
        byte[] byteArray36 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet33, byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray36);
        byte[] byteArray38 = uRLCodec32.encode(byteArray37);
        java.lang.String str39 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray23, byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray23);
        byte[] byteArray41 = quotedPrintableCodec1.decode(byteArray40);
        byte[] byteArray44 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str51 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray50);
        java.lang.String str53 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray50, false);
        java.lang.String str54 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray44, byteArray50);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray50);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        byte[] byteArray57 = quotedPrintableCodec1.decode(byteArray56);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str17, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str24, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str26, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AAAAAAA" + "'", str27, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str28, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0Acd8L3u4hVxI" + "'", str30, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str39, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str51, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0A01640101" + "'", str53, "0A01640101");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str54, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream5);
        byte[] byteArray10 = base64InputStream5.readNBytes((int) ' ');
        int int11 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-965378730) + "'", int11 == (-965378730));
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray5);
        org.apache.commons.codec.net.PercentCodec percentCodec15 = new org.apache.commons.codec.net.PercentCodec(byteArray5, true);
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray21);
        byte[] byteArray24 = uRLCodec17.decode(byteArray21);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray21);
        java.lang.Object obj26 = percentCodec15.decode((java.lang.Object) byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray32, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray32);
        java.lang.String str39 = org.apache.commons.codec.digest.Crypt.crypt(byteArray32, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec41 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet42 = null;
        byte[] byteArray44 = new byte[] { (byte) 100 };
        byte[] byteArray45 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet42, byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray45);
        byte[] byteArray47 = uRLCodec41.encode(byteArray46);
        java.lang.String str48 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray32, byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray46);
        java.lang.String str50 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byteArray46);
        byte[] byteArray51 = percentCodec15.decode(byteArray46);
        java.io.OutputStream outputStream52 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream53 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream52);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec57 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str64 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray63);
        java.lang.String str66 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray63, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray63);
        java.lang.String str69 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray63);
        java.lang.Object obj70 = quotedPrintableCodec57.decode((java.lang.Object) byteArray63);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream71 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream53, true, 1, byteArray63);
        byte[] byteArray72 = percentCodec15.decode(byteArray63);
        org.apache.commons.codec.net.PercentCodec percentCodec74 = new org.apache.commons.codec.net.PercentCodec(byteArray63, false);
        java.util.Random random76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray63, "477300|577300", random76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 477300|577300");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str13, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str23, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[60, 54, 56, 54, -49, 78, 22, 102, 102, 105, -94, 93, -94, -128, -95, -122, 92, 45, 40, 116]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str33, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str35, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AAAAAAA" + "'", str36, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str37, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0Acd8L3u4hVxI" + "'", str39, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str48, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952" + "'", str50, "2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(outputStream52);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str64, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str66, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "AAAAAAA" + "'", str67, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str68, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str69, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 0, 0, 0]");
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.lang.String str5 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, inputStream4);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream4);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha256Hex((java.io.InputStream) base64InputStream6);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str14 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray13);
        java.nio.charset.Charset charset17 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy20 = base64_19.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec21 = new org.apache.commons.codec.net.BCodec(charset17, codecPolicy20);
        org.apache.commons.codec.binary.Base16 base16_22 = new org.apache.commons.codec.binary.Base16(false, codecPolicy20);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream23 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream6, true, 0, byteArray13, codecPolicy20);
        byte[] byteArray24 = percentCodec0.encode(byteArray13);
        java.lang.String str26 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray24, "000000");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str5, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str8, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str9, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "a9c412bc47e545109e63db091b6ee4b3" + "'", str15, "a9c412bc47e545109e63db091b6ee4b3");
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + codecPolicy20 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy20.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$apr1$000000$ou.zfWkkW561mymARAgg2/" + "'", str26, "$apr1$000000$ou.zfWkkW561mymARAgg2/");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.apache.commons.codec.language.Caverphone2 caverphone2_0 = new org.apache.commons.codec.language.Caverphone2();
        java.lang.String str2 = caverphone2_0.encode("b29f8a352ed4b801dd66c530b4838ecdb3d500668d794fcd935a8b6f5d3a0daf38890a5bd65f5a49abfe8bbb8eedeedaf57a14baa3b3976e07182235c979aa9d");
        java.lang.String str4 = caverphone2_0.encode("b2jpL.fGw/.fo");
        java.lang.String str6 = caverphone2_0.encode("EFDBAC");
        java.lang.Object obj7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = caverphone2_0.encode(obj7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PFTPTKPKTP" + "'", str2, "PFTPTKPKTP");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PPFKFA1111" + "'", str4, "PPFKFA1111");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AFTPK11111" + "'", str6, "AFTPK11111");
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.io.OutputStream outputStream4 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream4);
        byte[] byteArray8 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream5.write(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str13 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray8, byteArray12);
        byte[] byteArray15 = hex2.encode(byteArray8);
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest17, byteBuffer19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer19, true);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest16, byteBuffer19);
        byte[] byteArray24 = hex2.encode(byteBuffer19);
        java.lang.String str25 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer19);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(outputStream4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\000\ufffd" + "'", str13, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str14, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[101, 54, 97, 55, 102, 100, 55, 99, 48, 51, 52, 53, 54, 99, 57, 101, 53, 53, 100, 51, 49, 99, 50, 52, 57, 55, 55, 56, 53, 54, 52, 52, 49, 100, 52, 53, 57, 102, 48, 97, 102, 102, 50, 98, 56, 50, 51, 101, 48, 50, 53, 51, 50, 98, 56, 100, 52, 53, 97, 100, 48, 52, 51, 102]");
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512/256 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        java.lang.String str4 = caverphone0.encode("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        java.lang.String str6 = caverphone0.encode("$6$aXMHILof$fPCmrwTDKP8tgRiPtqfSVmcQzOW1qIhrD.i6V2/8GwacU7XIg3Ddqv8lo6b6knjXoaS0GEuA3UvBQb/Av1NXt.");
        org.apache.commons.codec.language.Soundex soundex9 = new org.apache.commons.codec.language.Soundex("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", true);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator10 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) soundex9);
        org.apache.commons.codec.language.bm.NameType nameType12 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType13 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet14 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap15 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType12, ruleType13, languageSet14);
        int int16 = stringEncoderComparator10.compare((java.lang.Object) "0Acd8L3u4hVxI", (java.lang.Object) ruleType13);
        java.lang.Object obj17 = null;
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha384("$6$olhAUVh0$fd2xFXNNKWOX3fOQQkKu1dEDI7AbqooFENR8NKmzvt.XIdWUUedSG7/qxn3Dclg4nox0CeFSDyFw9Aey9WMN30");
        int int20 = stringEncoderComparator10.compare(obj17, (java.lang.Object) byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = caverphone0.encode((java.lang.Object) int20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TPKTFPKFPF" + "'", str4, "TPKTFPKFPF");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AKMLFPKMTK" + "'", str6, "AKMLFPKMTK");
        org.junit.Assert.assertTrue("'" + nameType12 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType12.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType13 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType13.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-52, 110, 77, -11, 61, -50, -33, 45, 79, 25, 89, -18, 82, 46, -127, -81, 25, -118, -11, 81, -37, 127, -92, 107, 17, -71, -36, 112, -109, -117, 62, 15, 89, -23, 70, -74, 70, -18, -99, 6, 108, 32, 10, -123, -125, -32, 14, -82]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((-4882430424691764007L), (-1L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-557514842) + "'", int2 == (-557514842));
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.String str2 = org.apache.commons.codec.digest.Crypt.crypt("5bcbd9ee079fb44bfdb83f466e99643c469590c71bd8ee7eb600134b07289677", "AGgAaQAh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AGvJ9ZFQg9W16" + "'", str2, "AGvJ9ZFQg9W16");
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream36 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest35, inputStream36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest37);
        org.apache.commons.codec.net.URLCodec uRLCodec40 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet41 = null;
        byte[] byteArray43 = new byte[] { (byte) 100 };
        byte[] byteArray44 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet41, byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray44);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray44);
        byte[] byteArray47 = uRLCodec40.decode(byteArray44);
        byte[] byteArray48 = null;
        byte[] byteArray49 = uRLCodec40.decode(byteArray48);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str56 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray55);
        java.lang.String str58 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray55, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_59 = new org.apache.commons.codec.binary.Base16();
        boolean boolean61 = base16_59.isInAlphabet("AAAAAAA");
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str67 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray65, true);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray65);
        boolean boolean70 = base16_59.isInAlphabet(byteArray65, true);
        byte[] byteArray71 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray55, byteArray65);
        byte[] byteArray72 = uRLCodec40.encode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest37, byteArray72);
        byte[] byteArray74 = uRLCodec1.decode(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = uRLCodec1.decode("=?UTF-8?Q?67702a0ed25a50c46fc0a0fb46a6dfbf5333c9dc25451abdb1eeac93f1e968d5?=", "6IiiRyxmjcARw");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 6IiiRyxmjcARw");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str46, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str56, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str58, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ffffff" + "'", str67, "ffffff");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str68, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.apache.commons.codec.EncoderException encoderException1 = new org.apache.commons.codec.EncoderException("B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        long long3 = org.apache.commons.codec.digest.MurmurHash2.hash64("0f0a92954a6653f75e039d051a1af95b7c9eddf8", (int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-7207201254813729732L) + "'", long3 == (-7207201254813729732L));
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray5);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray14);
        javax.crypto.Mac mac16 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac10, byteArray14);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream17);
        byte[] byteArray19 = inputStream17.readAllBytes();
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac10, inputStream17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "QE/cRmw971eow" + "'", str15, "QE/cRmw971eow");
        org.junit.Assert.assertNotNull(mac16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str18, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(mac20);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang3 = org.apache.commons.codec.language.bm.Lang.instance(nameType2);
        org.apache.commons.codec.language.bm.Languages languages4 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType2);
        org.apache.commons.codec.language.bm.Lang lang5 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages4);
        java.util.Set<java.lang.String> strSet6 = languages4.getLanguages();
        java.util.Set<java.lang.String> strSet7 = languages4.getLanguages();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Lang lang8 = org.apache.commons.codec.language.bm.Lang.loadFromResource("d41d8cd98f00b204e9800998ecf8427e", languages4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: d41d8cd98f00b204e9800998ecf8427e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang3);
        org.junit.Assert.assertNotNull(languages4);
// flaky:         org.junit.Assert.assertNotNull(lang5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(7774503706986060106L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 8909086924533244219L + "'", long1 == 8909086924533244219L);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.Languages languages5 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType3);
        beiderMorseEncoder0.setNameType(nameType3);
        boolean boolean7 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType8 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_9 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        incrementalHash32x86_9.start(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = beiderMorseEncoder0.encode((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: BeiderMorseEncoder encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(languages5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + nameType8 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType8.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray6);
        byte[] byteArray11 = hex2.decode(byteArray6);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils13 = new org.apache.commons.codec.digest.DigestUtils(messageDigest12);
        java.io.OutputStream outputStream14 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_16 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream18 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream14, (org.apache.commons.codec.binary.BaseNCodec) base16_16, false);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray21);
        long long23 = base16_16.getEncodedLength(byteArray21);
        byte[] byteArray24 = digestUtils13.digest(byteArray21);
        java.nio.ByteBuffer byteBuffer26 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        java.lang.String str27 = digestUtils13.digestAsHex(byteBuffer26);
        byte[] byteArray28 = hex2.encode(byteBuffer26);
        java.lang.String str29 = hex2.getCharsetName();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000\ufffd" + "'", str22, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4L + "'", long23 == 4L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393" + "'", str27, "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTF-8" + "'", str29, "UTF-8");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        long long2 = xXHash32_0.getValue();
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = new byte[] { (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet7, byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray10);
        boolean boolean13 = base32_6.isInAlphabet(byteArray11, false);
        int int14 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray11);
        java.lang.String str15 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray4, byteArray11);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.md2(byteArray4);
        xXHash32_0.update(byteArray16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-690116322) + "'", int14 == (-690116322));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "16fd67a8bb44f961f07f53972686acb3" + "'", str15, "16fd67a8bb44f961f07f53972686acb3");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[42, -45, 109, -99, 81, 116, -114, -126, 122, -15, -84, -85, 117, 104, -43, -30]");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest4);
        java.io.OutputStream outputStream7 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream8 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream7);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec12 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray18);
        java.lang.Object obj25 = quotedPrintableCodec12.decode((java.lang.Object) byteArray18);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream26 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream8, true, 1, byteArray18);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, false, 1757052779);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest4, byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray31, (-488200341));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -488200342 out of bounds for length 64");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream7);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAAAAAA" + "'", str22, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str24, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        base64OutputStream1.write((int) (short) 100);
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32(true);
        org.apache.commons.codec.net.PercentCodec percentCodec8 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray9 = null;
        byte[] byteArray10 = percentCodec8.encode(byteArray9);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray14 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet11, byteArray13);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray13);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray17 = percentCodec8.decode(byteArray13);
        boolean boolean19 = base32_7.isInAlphabet(byteArray17, true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream21 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base64OutputStream1, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        boolean boolean23 = base32_7.isInAlphabet((byte) 10);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str15, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = caverphone0.encode((java.lang.Object) 2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("KPNF", "44c9a137a4038a1ef0411ae025aec0e06a9209a3");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "cee6ad850031330b534f083f4ee64dea" + "'", str2, "cee6ad850031330b534f083f4ee64dea");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.String str2 = org.apache.commons.codec.digest.UnixCrypt.crypt("", "FPPT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "FPVV6wdYZOZ5U" + "'", str2, "FPVV6wdYZOZ5U");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_384("CABAFD");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[81, -35, 95, -82, -44, -73, 105, -40, -98, -115, -26, 98, 19, -81, 14, -9, 39, 36, 55, 20, -32, 50, 3, -102, 37, -95, 41, -67, -19, 69, 62, -117, -83, 90, -94, -112, -85, 26, 47, -75, 32, 22, -41, -59, -114, 124, 103, 7]");
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(4);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-8850715195782932281L) + "'", long1 == (-8850715195782932281L));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream23 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream22);
        boolean boolean24 = base16InputStream22.isStrictDecoding();
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base16InputStream22);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex((java.io.InputStream) base16InputStream22);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str25, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str26, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = qCodec3.decode("PPFKFA1111");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertNotNull(charset5);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex("TPTPFFFT11", "ufbubltiina|ufbubltiino|ufbuxbltiina|ufbuxbltiino|utfbubltiina|utfbubltiino|utfbuvltiina|utfbuvltiino|utfbuxbltiina|utfbuxbltiino|utfbuxvltiina|utfbuxvltiino|utfvubltiina|utfvubltiino|utfvuvltiina|utfvuvltiino|utfvuxbltiina|utfvuxbltiino|utfvuxvltiina|utfvuxvltiino");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "5513a056208d06021ab0ccfa9fb6a5da98711cb09e23187e6f9f688ea05af398" + "'", str2, "5513a056208d06021ab0ccfa9fb6a5da98711cb09e23187e6f9f688ea05af398");
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.net.QCodec qCodec4 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str6 = qCodec4.encode("07839f3f2ce2a945c4636a0413fb83722520cb1d91a271db0609aa223b2c0edb");
        java.util.BitSet bitSet7 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms8 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray13);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray20, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray20);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray20);
        javax.crypto.Mac mac27 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray20);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str39 = base32_29.encodeAsString(byteArray38);
        org.apache.commons.codec.digest.HmacUtils hmacUtils40 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms8, byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet7, byteArray38);
        byte[] byteArray42 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = qCodec4.decode((java.lang.Object) byteArray42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Objects of type [B cannot be decoded using Q codec");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?Q?07839f3f2ce2a945c4636a0413fb83722520cb1d91a271db0609aa223b2c0edb?=" + "'", str6, "=?UTF-8?Q?07839f3f2ce2a945c4636a0413fb83722520cb1d91a271db0609aa223b2c0edb?=");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms8 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms8.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str21, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str23, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AAAAAAA" + "'", str24, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str25, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str26, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ABUAA2IAEE======" + "'", str39, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[29, -124, 85, 32, 82, 6, 23, 18, -118, 103, 11, 88, -82, -53, -69, 85, -37, 89, -42, -33]");
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        org.apache.commons.codec.digest.HmacUtils hmacUtils11 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream12 = null;
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream18 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, true, (int) (byte) 0, byteArray16, codecPolicy17);
        char[] charArray19 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray16);
        java.lang.String str20 = hmacUtils11.hmacHex(byteArray16);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream22);
        java.lang.String str26 = hmacUtils11.hmacHex(inputStream22);
        org.apache.commons.codec.digest.XXHash32 xXHash32_28 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_28.reset();
        org.apache.commons.codec.binary.Hex hex30 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer33 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest31, byteBuffer33);
        char[] charArray36 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer33, true);
        byte[] byteArray37 = hex30.decode(byteBuffer33);
        xXHash32_28.update(byteBuffer33);
        byte[] byteArray39 = hmacUtils11.hmac(byteBuffer33);
        java.lang.String str40 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer33);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteBuffer33);
        java.security.MessageDigest messageDigest42 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils43 = new org.apache.commons.codec.digest.DigestUtils(messageDigest42);
        java.security.MessageDigest messageDigest44 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer46 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest47 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest44, byteBuffer46);
        char[] charArray49 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer46, true);
        java.lang.String str50 = digestUtils43.digestAsHex(byteBuffer46);
        java.security.MessageDigest messageDigest51 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer53 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest54 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest51, byteBuffer53);
        java.lang.String str55 = digestUtils43.digestAsHex(byteBuffer53);
        byte[] byteArray57 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        java.io.InputStream inputStream59 = java.io.InputStream.nullInputStream();
        java.lang.String str60 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray58, inputStream59);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream61 = new org.apache.commons.codec.binary.Base64InputStream(inputStream59);
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        long long65 = base64InputStream61.skip((long) ' ');
        base64InputStream61.mark((int) (short) 10);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str69 = digestUtils43.digestAsHex((java.io.InputStream) base64InputStream61);
        byte[] byteArray70 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream61);
        java.io.RandomAccessFile randomAccessFile71 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, randomAccessFile71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str20, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str26, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest42);
        org.junit.Assert.assertEquals(messageDigest42.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest44);
        org.junit.Assert.assertEquals(messageDigest44.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(messageDigest47);
        org.junit.Assert.assertEquals(messageDigest47.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str50, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest51);
        org.junit.Assert.assertEquals(messageDigest51.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(messageDigest54);
        org.junit.Assert.assertEquals(messageDigest54.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str55, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str60, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str62, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str63, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str68, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str69, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        metaphone0.setMaxCodeLen((-2042891860));
        java.lang.String str8 = metaphone0.encode("$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.");
        java.lang.Object obj10 = metaphone0.encode((java.lang.Object) "$apr1$FFFFFF$gNzyWPaeMX71d75Kk4laA1");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "" + "'", obj10, "");
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = uRLCodec1.decode("6IiiRyxmjcARw");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: 3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("$6$DDWobXRt$xhVIH9eYUt.YhcPWJgdPO9wi10jTfEY4zKmadE5JWQtwRGLDAYg2C8j0qgku8B9jroG5NSZTzuShahiYPFC1d.");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C2 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C2.reset();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        pureJavaCrc32C2.update(byteArray6, (-690116322), (-1612190696));
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        pureJavaCrc32C2.update(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray21, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray13, byteArray21);
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray30 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet27, byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray13, byteArray29);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, true, (int) '4');
        byte[] byteArray37 = uRLCodec1.encode(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = uRLCodec1.decode("$5$qyQelwDl$KPA0G4AjRS4MZy8xrKcltoARdkApaAgpLjGWZFkBwc9", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str22, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str24, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AAAAAAA" + "'", str25, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str31, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        pureJavaCrc32C0.update((int) (byte) -1);
        pureJavaCrc32C0.reset();
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md5("65a992ad19967492b5780d76a4733af553f796f688b79102d01ec7fde5590cab");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-30, -90, -120, -118, 76, -33, -124, -47, -77, -111, 52, -92, -4, -91, -16, 102]");
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str16 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray14, true);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray14, true, codecPolicy18);
        org.apache.commons.codec.CodecPolicy codecPolicy20 = base64_19.getCodecPolicy();
        boolean boolean21 = base64_19.isUrlSafe();
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream23 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base64_19, false);
        baseNCodecOutputStream4.eof();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ffffff" + "'", str16, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + codecPolicy20 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy20.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.Blake3.hash(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        long long11 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray5);
        javax.crypto.Mac mac12 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray5);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray18);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream30 = new org.apache.commons.codec.binary.Base64InputStream(inputStream28);
        int int31 = base64InputStream30.available();
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray18, (java.io.InputStream) base64InputStream30);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream30, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream36 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream35);
        boolean boolean37 = base16InputStream35.isStrictDecoding();
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base16InputStream35);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream40 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream35, true);
        byte[] byteArray41 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, (java.io.InputStream) base16InputStream40);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str10, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-7793026892456512543L) + "'", long11 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAAAAAA" + "'", str22, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str24, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str38, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[56, -111, 116, -89, -54, 7, 81, 99, -1, -9, 30, 40, -11, 98, 125, 59, -38, 9, -79, 61, -85, 84, 104, -14, 3, -87, 73, -106, 7, 75, -16, 21]");
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) 436110042, (long) (short) 1, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 214327882 + "'", int3 == 214327882);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray5);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C11 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C11.reset();
        java.util.BitSet bitSet13 = null;
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray16 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet13, byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray15);
        pureJavaCrc32C11.update(byteArray15, (-690116322), (-1612190696));
        javax.crypto.Mac mac21 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac10, byteArray15);
        org.apache.commons.codec.net.URLCodec uRLCodec23 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet24 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet24, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray27);
        byte[] byteArray30 = uRLCodec23.decode(byteArray27);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray15, byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(mac10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str17, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(mac21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str29, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[60, 54, 56, 54, -49, 78, 22, 102, 102, 105, -94, 93, -94, -128, -95, -122, 92, 45, 40, 116]");
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset4);
        qCodec5.setEncodeBlanks(true);
        boolean boolean8 = qCodec5.isEncodeBlanks();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("");
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("UTF-8", "$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray1, byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-22, 0, -46, 104, 69, -9, -124, -117, -95, 77, -10, -97, -56, 105, -38, 29]");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang4 = org.apache.commons.codec.language.bm.Lang.instance(nameType3);
        org.apache.commons.codec.language.bm.Languages languages5 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType3);
        beiderMorseEncoder0.setNameType(nameType3);
        org.apache.commons.codec.language.bm.RuleType ruleType7 = org.apache.commons.codec.language.bm.RuleType.APPROX;
        beiderMorseEncoder0.setRuleType(ruleType7);
        java.lang.String str9 = ruleType7.getName();
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang4);
        org.junit.Assert.assertNotNull(languages5);
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "approx" + "'", str9, "approx");
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream3 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream2);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec7 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        java.lang.Object obj20 = quotedPrintableCodec7.decode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream3, true, 1, byteArray13);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, false, 1757052779);
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray1, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray25);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 99, 0, 48, 0, 99, 0, 51, 0, 100, 0, 97, 0, 99, 0, 54, 0, 50, 0, 100, 0, 55, 0, 51, 0, 53, 0, 52, 0, 54, 0, 98, 0, 102, 0, 52, 0, 52, 0, 49, 0, 54, 0, 57, 0, 56, 0, 49, 0, 99, 0, 51, 0, 101, 0, 102, 0, 102, 0, 54, 0, 53, 0, 55, 0, 51, 0, 48, 0, 100, 0, 52, 0, 57, 0, 48, 0, 99, 0, 97, 0, 56, 0, 50, 0, 52, 0, 53, 0, 97, 0, 55, 0, 102, 0, 53, 0, 54, 0, 52, 0, 55, 0, 48, 0, 55, 0, 48, 0, 97, 0, 49, 0, 50, 0, 54, 0, 97, 0, 49, 0, 53, 0, 100, 0, 97, 0, 54, 0, 51, 0, 50, 0, 53, 0, 97, 0, 54, 0, 102, 0, 51, 0, 100, 0, 102, 0, 100, 0, 56, 0, 51, 0, 56, 0, 52, 0, 99, 0, 102, 0, 52, 0, 100, 0, 101, 0, 51, 0, 101, 0, 49, 0, 101, 0, 102, 0, 51, 0, 53, 0, 98, 0, 53, 0, 53, 0, 101, 0, 51, 0, 97]");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3ab532131556053507bb19db870d70b9435a36b35ffc1519d52fbc75f4e754c56f31c71a810cf553820530e8f75c1fd2" + "'", str26, "3ab532131556053507bb19db870d70b9435a36b35ffc1519d52fbc75f4e754c56f31c71a810cf553820530e8f75c1fd2");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray1 = null;
        byte[] byteArray2 = percentCodec0.encode(byteArray1);
        org.apache.commons.codec.net.URLCodec uRLCodec4 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = new byte[] { (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet5, byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray8);
        byte[] byteArray10 = uRLCodec4.encode(byteArray9);
        java.lang.String str11 = uRLCodec4.getDefaultCharset();
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray13);
        byte[] byteArray15 = uRLCodec4.encode(byteArray13);
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest16, inputStream17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream17);
        byte[] byteArray20 = uRLCodec4.encode(byteArray19);
        byte[] byteArray21 = percentCodec0.decode(byteArray20);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d" + "'", str14, "ca73f0c17889db16a65cc87b97ac0bcd537d3f9d");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[107, 78, 37, 48, 51, 66, 54, 103, 37, 68, 66, 37, 66, 55, 37, 51, 66, 110, 37, 49, 53, 69, 79, 37, 48, 69, 37, 66, 49, 37, 65, 66, 37, 68, 52, 89, 37, 55, 70, 37, 57, 65, 37, 49, 66, 37, 48, 55, 37, 56, 69, 37, 51, 70, 37, 53, 66, 90, 107, 37, 67, 55]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_224Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, "RAL");
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, "");
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-224 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA3-224 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA3-224 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        java.lang.String str4 = caverphone0.encode("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        boolean boolean7 = caverphone0.isCaverphoneEqual("$1$UYtF..0A$qlvzexZps/99jmTbfJRm11", "c6699c7aa4c4899a7838b6472b6ae7719eda306fc3de2abefd814d5909c178da");
        java.lang.String str9 = caverphone0.encode("FPVV6wdYZOZ5U");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TPKTFPKFPF" + "'", str4, "TPKTFPKFPF");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FPFTSSA111" + "'", str9, "FPFTSSA111");
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, inputStream6);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream8 = new org.apache.commons.codec.binary.Base64InputStream(inputStream6);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream8);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream8);
        byte[] byteArray13 = base64InputStream8.readNBytes((int) ' ');
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream8);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils16 = new org.apache.commons.codec.digest.DigestUtils(messageDigest15);
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest17, byteBuffer19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer19, true);
        java.lang.String str23 = digestUtils16.digestAsHex(byteBuffer19);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, byteBuffer19);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray24);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str7, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str9, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str10, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str23, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0028f39aeccb67ac760b67ff9c49c4d86c46ae6f24a6b20e8a7c69a515c79304d356fa456bbbb6a8cc9b019d0a62b6e9" + "'", str25, "0028f39aeccb67ac760b67ff9c49c4d86c46ae6f24a6b20e8a7c69a515c79304d356fa456bbbb6a8cc9b019d0a62b6e9");
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_512("MD5");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[48, -51, 85, 107, -94, 7, -21, -19, -120, -59, -51, 36, 51, 88, 125, -1, 7, 61, 66, 13, -88, 71, -69, 114, 11, 3, -50, -11, -44, -96, -89, 60, -82, 19, -60, 85, 88, 104, -32, 120, 21, 93, -8, 95, 13, 26, 39, 62, 24, -41, 5, 45, 120, -83, -27, 62, -19, 123, 48, -86, 118, 70, 98, -110]");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Hex hex1 = new org.apache.commons.codec.binary.Hex("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str10 = doubleMetaphone0.doubleMetaphone("PKKMYF", false);
        doubleMetaphone0.setMaxCodeLen(852759869);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PKMF" + "'", str10, "PKMF");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray22 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray23, inputStream24);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream26 = new org.apache.commons.codec.binary.Base64InputStream(inputStream24);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream27 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream26);
        javax.crypto.Mac mac28 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, (java.io.InputStream) base16InputStream27);
        java.io.OutputStream outputStream29 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_31 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream33 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream29, (org.apache.commons.codec.binary.BaseNCodec) base16_31, false);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str37 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray36);
        long long38 = base16_31.getEncodedLength(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str41 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray36, byteArray40);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray36);
        int int43 = base16InputStream27.read(byteArray36);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex((java.io.InputStream) base16InputStream27);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream46 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base16InputStream27, false);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac28);
        org.junit.Assert.assertNotNull(outputStream29);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\000\ufffd" + "'", str37, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 4L + "'", long38 == 4L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str41, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str42, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str44, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("ISO-8859-1", messageDigest1);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("0f0a92954a6653f75e039d051a1af95b7c9eddf8");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 48, 0, 102, 0, 48, 0, 97, 0, 57, 0, 50, 0, 57, 0, 53, 0, 52, 0, 97, 0, 54, 0, 54, 0, 53, 0, 51, 0, 102, 0, 55, 0, 53, 0, 101, 0, 48, 0, 51, 0, 57, 0, 100, 0, 48, 0, 53, 0, 49, 0, 97, 0, 49, 0, 97, 0, 102, 0, 57, 0, 53, 0, 98, 0, 55, 0, 99, 0, 57, 0, 101, 0, 100, 0, 100, 0, 102, 0, 56]");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        java.lang.String str7 = hmacAlgorithms0.toString();
        java.lang.String str8 = hmacAlgorithms0.getName();
        java.lang.String str9 = hmacAlgorithms0.toString();
        java.lang.String str10 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "HmacSHA224" + "'", str7, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "HmacSHA224" + "'", str8, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "HmacSHA224" + "'", str9, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "HmacSHA224" + "'", str10, "HmacSHA224");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("UTF-8", "$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16();
        boolean boolean14 = base16_12.isInAlphabet("AAAAAAA");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str20 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, true);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray18);
        boolean boolean23 = base16_12.isInAlphabet(byteArray18, true);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray8, byteArray18);
        java.io.OutputStream outputStream25 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream26 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream25);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec30 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray36);
        java.lang.String str39 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray36, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray36);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray36);
        java.lang.Object obj43 = quotedPrintableCodec30.decode((java.lang.Object) byteArray36);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream44 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream26, true, 1, byteArray36);
        java.lang.String str45 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray18, byteArray36);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        byte[] byteArray47 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray2, byteArray36);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray36);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-22, 0, -46, 104, 69, -9, -124, -117, -95, 77, -10, -97, -56, 105, -38, 29]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ffffff" + "'", str20, "ffffff");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str21, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream25);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str37, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str39, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AAAAAAA" + "'", str40, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str41, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str42, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str45, "9b9e60058fae476c9ee6ef8fc698d89e");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-50, 28, 125, -106, 90, -122, -55, -120, -102, 91, 24, 115, 74, 24, -30, 125, -102, 127, -118, -97, -107, 25, 76, -96, -22, -5, -85, -59, -121, 15, 75, -110]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "478906f83d4999167616d892683e7e9e95865ed38797423b14dbe184" + "'", str48, "478906f83d4999167616d892683e7e9e95865ed38797423b14dbe184");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest3);
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest3);
        java.io.OutputStream outputStream6 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream7 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream6);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec11 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray17, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray17);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray17);
        java.lang.Object obj24 = quotedPrintableCodec11.decode((java.lang.Object) byteArray17);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream25 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream7, true, 1, byteArray17);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1757052779);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray17);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray17);
        java.security.MessageDigest messageDigest32 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, byteArray17);
        java.io.RandomAccessFile randomAccessFile33 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest3, randomAccessFile33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(outputStream6);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str20, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AAAAAAA" + "'", str21, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str23, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-114, -115, -104, 71, -74, -67, 25, -117, -79, -104, 13, -77, 52, 101, -98, -106, -95, -65, 61, -69, 92, 86, 54, -116, 111, -85, -26, -10, -75, 97, 35, 39, -112, -29, -76, 12, 29, 79, -75, 10, 25, -61, 73, -79, 11, -36, 105, 80]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "f4b1bcd96256e2dc14bb08fdf60fb975" + "'", str31, "f4b1bcd96256e2dc14bb08fdf60fb975");
        org.junit.Assert.assertNotNull(messageDigest32);
        org.junit.Assert.assertEquals(messageDigest32.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        xXHash32_0.reset();
        xXHash32_0.update((int) (byte) 100);
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_0.update(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("", "374374|374375|374537|375437|375374|375375");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        boolean boolean10 = base32_1.isInAlphabet("16fd67a8bb44f961f07f53972686acb3");
        boolean boolean12 = base32_1.isInAlphabet((byte) 0);
        boolean boolean14 = base32_1.isInAlphabet((byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        java.lang.String str6 = metaphone0.encode("=?UTF-8?Q?=00=00=00=00=00?=");
        java.lang.String str8 = metaphone0.encode("bf5f40469b2eaeb2fcf2ebc705f0510a");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TFK" + "'", str6, "TFK");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "BFFB" + "'", str8, "BFFB");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        java.nio.charset.Charset charset7 = bCodec2.getCharset();
        boolean boolean8 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset10 = org.apache.commons.codec.Charsets.UTF_16;
        java.lang.String str11 = bCodec2.encode("PFTPTKPKTP", charset10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bCodec2.decode("0010000O00002===");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "=?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=" + "'", str11, "=?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        javax.crypto.Mac mac2 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray1);
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("");
        javax.crypto.Mac mac5 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac2, byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(mac2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(mac5);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        long[] longArray1 = org.apache.commons.codec.digest.MurmurHash3.hash128("=?UTF-8?B?TkxLVFBNQTExMQ==?=");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[-8123479793862003466, -6137382506133395845]");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec6 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset3, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.io.OutputStream outputStream10 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream11 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream10);
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        base64OutputStream11.write(byteArray15);
        java.io.InputStream inputStream19 = null;
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy24 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream25 = new org.apache.commons.codec.binary.Base32InputStream(inputStream19, true, (int) (byte) 0, byteArray23, codecPolicy24);
        byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray15, byteArray23);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray9, byteArray26);
        byte[] byteArray29 = quotedPrintableCodec6.encode(byteArray26);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertNotNull(outputStream10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-16, 37, -57, -63, -51, -9, 13, 75, 7, 89, 117, -3, 104, -53, 16, -29]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, -41, 80, -109, -39, -116, 43, -105, -83, -45, -5, 83, -89, 13, -41, -5, 61, -89, 106, 99, -118, -45, 112, -64, -32, 63, 0, 5, 16, -126, -126, -119, 29, 33, -25, -80, 44, -86, -52, -97, -32, 115, -90, -74, -37, -41, -98, 109, -80, -99, -117, 79, 97, -1, 100, 11, 92, 125, 83, 104, -27, -105, 61, -112]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-62, -73, 94, 95, -21, 62, -2, -33, -91, -111, -82, 64, -31, 35, -124, 69, 31, 53, 66, 43, 100, 1, -112, -30, 112, 14, -28, 71, -80, 47, -26, 45, -91, 59, -92, -28, 119, 72, 115, 97, -106, -102, 74, -29, -39, -81, -93, 14, -118, 34, -112, -111, 110, -90, 55, 75, 94, 87, -48, 79, 96, 109, 127, 3]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[61, 70, 48, 37, 61, 67, 55, 61, 67, 49, 61, 67, 68, 61, 70, 55, 61, 48, 68, 75, 61, 48, 55, 89, 117, 61, 70, 68, 104, 61, 67, 66, 61, 49, 48, 61, 69, 51]");
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("2ad36d9d51748e827af1acab7568d5e2");
        byte[] byteArray3 = binaryCodec0.decode(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 50, 0, 97, 0, 100, 0, 51, 0, 54, 0, 100, 0, 57, 0, 100, 0, 53, 0, 49, 0, 55, 0, 52, 0, 56, 0, 101, 0, 56, 0, 50, 0, 55, 0, 97, 0, 102, 0, 49, 0, 97, 0, 99, 0, 97, 0, 98, 0, 55, 0, 53, 0, 54, 0, 56, 0, 100, 0, 53, 0, 101, 0, 50]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 1, 0, 16, 0, 0]");
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream3);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream7 = new org.apache.commons.codec.binary.Base16InputStream(inputStream3);
        byte[] byteArray8 = digestUtils1.digest(inputStream3);
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray10 = digestUtils1.digest(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str5, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("ALL");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[14, -92, 15, 8, 4, -74, 60, 106, 55, -79, 71, -23, -1, -50, -68, -45]");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.lang.String str9 = hmacAlgorithms0.toString();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "HmacSHA224" + "'", str9, "HmacSHA224");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.codec.digest.Crypt.crypt("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        java.lang.String str20 = hmacAlgorithms0.toString();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "HmacSHA224" + "'", str20, "HmacSHA224");
    }
}
