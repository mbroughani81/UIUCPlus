import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.lang.String str2 = org.apache.commons.codec.digest.Crypt.crypt("AX", "DBACDA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DBQsVOvLDdObw" + "'", str2, "DBQsVOvLDdObw");
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.codec.net.URLCodec uRLCodec0 = new org.apache.commons.codec.net.URLCodec();
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer5 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, byteBuffer5);
        char[] charArray8 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer5, true);
        byte[] byteArray9 = hex2.decode(byteBuffer5);
        byte[] byteArray12 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("org.apache.commons.codec.EncoderException", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray12);
        byte[] byteArray15 = hex2.encode(byteArray12);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32((-679748572), byteArray12, false, (byte) 1);
        byte[] byteArray19 = uRLCodec0.decode(byteArray12);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray25, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray25);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray25);
        java.lang.String str32 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray25);
        java.lang.Object obj33 = uRLCodec0.decode((java.lang.Object) str32);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[123, -52, -70, 4, 44, 20, -30, 19, -98, -42, -48, -37, 77, -68, 121, -20, -49, 120, 18, 38, -52, -102, -127, -67, 33, -121, -42, -83, 103, -35, 39, 28, -18, -18, 120, 25, -67, 95, -87, -2, -79, -14, -112, -12, 40, -32, -21, 124]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 99, 99, 55, 52, 97, 102, 97, 50, 102, 52, 99, 101, 53, 98, 100, 100, 51, 48, 54, 97, 97, 52, 54, 101, 54, 101, 49, 102, 50, 97, 99]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str28, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AAAAAAA" + "'", str29, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str30, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str31, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\000\000\000\000\000" + "'", str32, "\000\000\000\000\000");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "\000\000\000\000\000" + "'", obj33, "\000\000\000\000\000");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        byte[] byteArray1 = null;
        incrementalHash32x86_0.add(byteArray1, 104729, (-690116322));
        incrementalHash32x86_0.start(1595328082);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.codec.language.bm.NameType nameType1 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType1);
        org.apache.commons.codec.language.bm.Languages languages3 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType1);
        org.apache.commons.codec.language.bm.Lang lang4 = null; // flaky: org.apache.commons.codec.language.bm.Lang.loadFromResource("", languages3);
        java.lang.String str6 = null; // flaky: lang4.guessLanguage("2ae39cff3e50240fa72d20b73b7d5707ac8412676d680473d59e1ad4298e506c87b17a1f069a76103f416e4c5e3ab4353ead745e5aea6ee73f27e55a30383d66");
        org.junit.Assert.assertTrue("'" + nameType1 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType1.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertNotNull(languages3);
// flaky:         org.junit.Assert.assertNotNull(lang4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "any" + "'", str6, "any");
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        java.lang.String str3 = nysiis1.encode("ffffff");
        java.lang.String str5 = nysiis1.nysiis("6722041b5bd60a223b7f15e124b4b4ff2f92e560ca7d1f744e0c670185e23179");
        boolean boolean6 = nysiis1.isStrict();
        byte[] byteArray8 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = nysiis1.encode((java.lang.Object) byteArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Nysiis encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "F" + "'", str3, "F");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BDABFA" + "'", str5, "BDABFA");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 36, 0, 97, 0, 112, 0, 114, 0, 49, 0, 36, 0, 57, 0, 121, 0, 116, 0, 110, 0, 57, 0, 54, 0, 70, 0, 102, 0, 36, 0, 118, 0, 69, 0, 120, 0, 69, 0, 65, 0, 115, 0, 100, 0, 67, 0, 48, 0, 50, 0, 82, 0, 99, 0, 54, 0, 108, 0, 66, 0, 70, 0, 67, 0, 50, 0, 112, 0, 72, 0, 120, 0, 47]");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512_256(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str7, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream22 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream17, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream23 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream22);
        boolean boolean24 = base16InputStream22.isStrictDecoding();
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base16InputStream22);
        // The following exception was thrown during execution in test generation
        try {
            base16InputStream22.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (-1612190696), 1164493051);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 821153611 + "'", int2 == 821153611);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("acba47930de7dea5109181bfc00014d106f31259");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 97, 0, 99, 0, 98, 0, 97, 0, 52, 0, 55, 0, 57, 0, 51, 0, 48, 0, 100, 0, 101, 0, 55, 0, 100, 0, 101, 0, 97, 0, 53, 0, 49, 0, 48, 0, 57, 0, 49, 0, 56, 0, 49, 0, 98, 0, 102, 0, 99, 0, 48, 0, 48, 0, 48, 0, 49, 0, 52, 0, 100, 0, 49, 0, 48, 0, 54, 0, 102, 0, 51, 0, 49, 0, 50, 0, 53, 0, 57]");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        java.nio.charset.Charset charset3 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy4 = null;
        org.apache.commons.codec.net.BCodec bCodec5 = new org.apache.commons.codec.net.BCodec(charset3, codecPolicy4);
        org.apache.commons.codec.net.QCodec qCodec6 = new org.apache.commons.codec.net.QCodec(charset3);
        java.nio.charset.Charset charset7 = qCodec6.getCharset();
        org.apache.commons.codec.net.QCodec qCodec8 = new org.apache.commons.codec.net.QCodec(charset7);
        qCodec8.setEncodeBlanks(true);
        java.nio.charset.Charset charset12 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy13 = null;
        org.apache.commons.codec.net.BCodec bCodec14 = new org.apache.commons.codec.net.BCodec(charset12, codecPolicy13);
        org.apache.commons.codec.net.QCodec qCodec15 = new org.apache.commons.codec.net.QCodec(charset12);
        java.nio.charset.Charset charset16 = qCodec15.getCharset();
        java.nio.charset.Charset charset17 = qCodec15.getCharset();
        java.lang.String str18 = qCodec8.encode("acba47930de7dea5109181bfc00014d106f31259", charset17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = matchRatingApproachEncoder0.encode((java.lang.Object) charset17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "6B4BC7" + "'", str2, "6B4BC7");
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "=?UTF-8?Q?acba47930de7dea5109181bfc00014d106f31259?=" + "'", str18, "=?UTF-8?Q?acba47930de7dea5109181bfc00014d106f31259?=");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream2 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream5);
        byte[] byteArray10 = base64InputStream5.readNBytes((int) ' ');
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec20 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        byte[] byteArray26 = uRLCodec20.encode(byteArray25);
        int int27 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray25);
        byte[] byteArray28 = quotedPrintableCodec1.encode(byteArray25);
        java.nio.charset.Charset charset30 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy31 = null;
        org.apache.commons.codec.net.BCodec bCodec32 = new org.apache.commons.codec.net.BCodec(charset30, codecPolicy31);
        java.nio.charset.Charset charset33 = org.apache.commons.codec.Charsets.toCharset(charset30);
        java.nio.charset.Charset charset34 = org.apache.commons.codec.Charsets.toCharset(charset33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = quotedPrintableCodec1.encode("", charset34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -3 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-690116322) + "'", int27 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(charset34);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("SHA3-256", "ABUAA2IAEE======");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils4 = new org.apache.commons.codec.digest.HmacUtils("ash", byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm ash not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[96, 109, 56, 8, -108, -2, 121, -63, -27, -38, 30, 71, 74, 80, -13, 111, 119, 113, 39, -26, 108, 15, -1, -110, 121, -99, 65, 6, 95, -11, 100, 96]");
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("rules");
        boolean boolean2 = org.apache.commons.codec.binary.Base64.isBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-114, 84, 95, 14, -54, -94, -40, -59, 76, -116, -19, -119, 13, 19, 14, 83, 116, 90, 71, -105, 119, -105, -37, -58, 106, -120, 74, -119]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException("SHA-1", (java.lang.Throwable) decoderException2);
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException3);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        byte[] byteArray22 = uRLCodec15.decode(byteArray19);
        byte[] byteArray23 = null;
        byte[] byteArray24 = uRLCodec15.decode(byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_34 = new org.apache.commons.codec.binary.Base16();
        boolean boolean36 = base16_34.isInAlphabet("AAAAAAA");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str42 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray40, true);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray40);
        boolean boolean45 = base16_34.isInAlphabet(byteArray40, true);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, byteArray40);
        byte[] byteArray47 = uRLCodec15.encode(byteArray46);
        blake3_13.doFinalize(byteArray47);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms49 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet50 = null;
        byte[] byteArray52 = new byte[] { (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet50, byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray53);
        javax.crypto.Mac mac55 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms49, byteArray54);
        org.apache.commons.codec.digest.HmacUtils hmacUtils57 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms49, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec59 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str66 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray65);
        java.lang.String str68 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray65, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray65);
        java.lang.String str70 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray65);
        java.lang.String str71 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray65);
        java.lang.Object obj72 = quotedPrintableCodec59.decode((java.lang.Object) byteArray65);
        org.apache.commons.codec.digest.HmacUtils hmacUtils73 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms49, byteArray65);
        byte[] byteArray75 = hmacUtils73.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        blake3_13.doFinalize(byteArray75);
        blake3_13.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str21, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ffffff" + "'", str42, "ffffff");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str43, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms49 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms49.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac55);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str66, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str68, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "AAAAAAA" + "'", str69, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str70, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str71, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray9);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$lnmWT7uL$jQhvV1EQdJQJbQkJW7i0N/" + "'", str14, "$apr1$lnmWT7uL$jQhvV1EQdJQJbQkJW7i0N/");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray5);
        xXHash32_1.update(byteArray7, (int) (byte) 10, (-690116322));
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray7);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray7);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream16);
        byte[] byteArray18 = inputStream16.readAllBytes();
        byte[] byteArray19 = base64_15.decode(byteArray18);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray18);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 65]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str17, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("\n\001d\001\001");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10, 1, 100, 1, 1]");
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32(2);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray10, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray10);
        java.lang.String str17 = org.apache.commons.codec.digest.Crypt.crypt(byteArray10, "0A01640101");
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray10);
        java.lang.String str19 = base32_4.encodeToString(byteArray18);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray18);
        byte[] byteArray21 = base32_1.decode(byteArray18);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str13, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AAAAAAA" + "'", str14, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str15, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0Acd8L3u4hVxI" + "'", str17, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str19, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[15, 4, -33, -116, 105, -80, -6, 85, -46, 79, 56]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        char[] charArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        java.lang.Object obj15 = percentCodec0.decode((java.lang.Object) byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray24);
        java.lang.String str27 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray24, false);
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, byteArray24);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        byte[] byteArray31 = percentCodec0.encode(byteArray30);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str25, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0A01640101" + "'", str27, "0A01640101");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str28, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, byteArray16);
        java.nio.file.Path path21 = null;
        java.nio.file.OpenOption[] openOptionArray22 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest10, path21, openOptionArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(openOptionArray22);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream29);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream29);
        java.lang.String str34 = hmacUtils8.hmacHex(inputStream29);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream35);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream35);
        byte[] byteArray38 = inputStream35.readAllBytes();
        byte[] byteArray39 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray38);
        byte[] byteArray40 = hmacUtils8.hmac(byteArray39);
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray40);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str30, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str31, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str34, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str36, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str37, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "4dc3f404f043c6612b0ed9143f0ac6b77ab23fb47d303d8a684d249b6c1091ebfcc41c594e2009eff582c8861afe7319" + "'", str41, "4dc3f404f043c6612b0ed9143f0ac6b77ab23fb47d303d8a684d249b6c1091ebfcc41c594e2009eff582c8861afe7319");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        boolean boolean1 = org.apache.commons.codec.digest.DigestUtils.isAvailable("ffaRlX9TmFOkk");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        org.apache.commons.codec.digest.DigestUtils digestUtils7 = new org.apache.commons.codec.digest.DigestUtils(messageDigest6);
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = digestUtils7.digestAsHex(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        char[] charArray13 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray6, (-690116322), 0, true);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex14 = new org.apache.commons.codec.language.RefinedSoundex(charArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        boolean boolean2 = org.apache.commons.codec.binary.StringUtils.equals((java.lang.CharSequence) "798543", (java.lang.CharSequence) "dfdda15d09ab512f6f012e71da796e6d22ff94eede59f4b13bbe9064");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray0, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-965378730) + "'", int2 == (-965378730));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream1);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        boolean boolean17 = base32_10.isInAlphabet(byteArray15, false);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base32_10.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream1, false, (-965378730), byteArray8, codecPolicy18);
        char[] charArray20 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray8);
        org.apache.commons.codec.language.Soundex soundex21 = new org.apache.commons.codec.language.Soundex(charArray20);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str4, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "e9b10bdfa79bd9f88b9796fbeb9632c81512c38e6950ed9b0ac8d8ab5c96aff7cebb62feab9590d6ef8ca131aa1c0be989ceaacf3b595133cc852ea5bb26f0bb");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "e9b10bdfa79bd9f88b9796fbeb9632c81512c38e6950ed9b0ac8d8ab5c96aff7cebb62feab9590d6ef8ca131aa1c0be989ceaacf3b595133cc852ea5bb26f0bb");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[e, 9, b, 1, 0, b, d, f, a, 7, 9, b, d, 9, f, 8, 8, b, 9, 7, 9, 6, f, b, e, b, 9, 6, 3, 2, c, 8, 1, 5, 1, 2, c, 3, 8, e, 6, 9, 5, 0, e, d, 9, b, 0, a, c, 8, d, 8, a, b, 5, c, 9, 6, a, f, f, 7, c, e, b, b, 6, 2, f, e, a, b, 9, 5, 9, 0, d, 6, e, f, 8, c, a, 1, 3, 1, a, a, 1, c, 0, b, e, 9, 8, 9, c, e, a, a, c, f, 3, b, 5, 9, 5, 1, 3, 3, c, c, 8, 5, 2, e, a, 5, b, b, 2, 6, f, 0, b, b]");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray6);
        byte[] byteArray11 = hex2.decode(byteArray6);
        java.util.Random random14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray6, "57F9B5", "org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", random14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 57F9B5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.codec.CodecPolicy codecPolicy1 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(false, codecPolicy1);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream4);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_256(inputStream4);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = base16_2.decode(byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid octet in encoded value: -89");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + codecPolicy1 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy1.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-89, -1, -58, -8, -65, 30, -41, 102, 81, -63, 71, 86, -96, 97, -42, 98, -11, -128, -1, 77, -28, 59, 73, -6, -126, -40, 10, 75, -128, -8, 67, 74]");
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream2, false);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream2);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream6);
        java.lang.Object obj8 = binaryCodec0.decode((java.lang.Object) str7);
        java.lang.Object obj10 = binaryCodec0.decode((java.lang.Object) "\000");
        org.apache.commons.codec.EncoderException encoderException12 = new org.apache.commons.codec.EncoderException("EF");
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = binaryCodec0.decode((java.lang.Object) decoderException13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str8 = doubleMetaphoneResult7.getPrimary();
        doubleMetaphoneResult7.append("$6$aXMHILof$fPCmrwTDKP8tgRiPtqfSVmcQzOW1qIhrD.i6V2/8GwacU7XIg3Ddqv8lo6b6knjXoaS0GEuA3UvBQb/Av1NXt.");
        doubleMetaphoneResult7.append('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray35 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer34);
        java.lang.String str36 = hmacUtils32.hmacHex(byteBuffer34);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(0);
        byte[] byteArray41 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray47);
        java.lang.String str50 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray47, false);
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray41, byteArray47);
        char[] charArray52 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray47);
        boolean boolean54 = base64_38.isInAlphabet(byteArray47, true);
        java.io.InputStream inputStream55 = java.io.InputStream.nullInputStream();
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream55);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream58 = new org.apache.commons.codec.binary.Base64InputStream(inputStream55, false);
        java.lang.String str59 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray47, (java.io.InputStream) base64InputStream58);
        byte[] byteArray60 = hmacUtils32.hmac((java.io.InputStream) base64InputStream58);
        java.io.OutputStream outputStream61 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_63 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream65 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream61, (org.apache.commons.codec.binary.BaseNCodec) base16_63, false);
        baseNCodecOutputStream65.eof();
        org.apache.commons.codec.binary.Base32 base32_68 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream70 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream65, (org.apache.commons.codec.binary.BaseNCodec) base32_68, true);
        java.util.BitSet bitSet71 = null;
        byte[] byteArray73 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray74 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet71, byteArray73);
        java.lang.String str75 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        java.lang.String str77 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray73);
        byte[] byteArray78 = org.apache.commons.codec.digest.Blake3.hash(byteArray73);
        baseNCodecOutputStream70.write(byteArray78);
        int int80 = base64InputStream58.read(byteArray78);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str36, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str48, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0A01640101" + "'", str50, "0A01640101");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str51, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(inputStream55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "30518803fd404b638c1766a65a9a9e5fd86d0fc2" + "'", str59, "30518803fd404b638c1766a65a9a9e5fd86d0fc2");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-13, 19, -33, -19, 6, -82, 25, -120, 30, -114, -29, -18, -46, -2, -20, 15, -105, -5, 108, -32, -16, 17, 67, -116, 127, -123, 74, 95]");
        org.junit.Assert.assertNotNull(outputStream61);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str75, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-81, 19, 73, -71, -11, -7, -95, -90, -96, 64, 77, -22, 54, -36, -55, 73, -101, -53, 37, -55, -83, -63, 18, -73, -52, -102, -109, -54, -28, 31, 50, 98]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex("18f760be30a13d2a4fe996bf5b70a8b193594ff037916dbc37b78de00c0ec8cc2fba936a6b72526a737988f605a33080");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "5b27c866c36abb8d2357c1e2eefa440fdb0460215ac0649ea33a7f439f497b16b766840d84e5715995663a448b212491818d81a693927040dda06b787939ad30" + "'", str1, "5b27c866c36abb8d2357c1e2eefa440fdb0460215ac0649ea33a7f439f497b16b766840d84e5715995663a448b212491818d81a693927040dda06b787939ad30");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.lang.String str0 = org.apache.commons.codec.CharEncoding.US_ASCII;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "US-ASCII" + "'", str0, "US-ASCII");
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 97, -38, 91, 40, -37, 38, -112, 63, 102, 71, 63, -28, -81, 42, 92, -43, -15, -37, -51, -18, 116, -32, 100, -53, -36, -57, 58, -120, 121, 60, -20]");
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md5("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        long[] longArray2 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[123, 118, -12, -87, 41, 124, 1, 20, 35, -56, -84, -61, -49, 11, -8, -51]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-3897760812301620693, 1850759082348605938]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-36, 87, -59, 11, -115, -58, 9, -49, 1, -59, -54, -52, 88, -66, 84, 0, -89, -116, -122, 3, -20, -75, 41, -89, -105, -60, 99, -15, 28, -103, -72, 12, -126, 43, 72, -89, 42, -108, -15, -35, 12, -68, -105, 32, -54, 72, 34, -11, -26, 95, 105, 50, -40, 101, 106, -30, -23, -48, 56, 25, -23, -81, -30, -26]");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = uRLCodec1.decode("65faa9d920e0e9cff43fc3f30ab02ba2e8cf6f4643b58f7c1e64583fbec8a268e677b0ec4d54406e748becb53fda210f5d4f39cf2a5014b1ca496b0805182649", "2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha1Hex("8f198685d9e52d7a95c867c39c611cfbfe2ff43aa855b443bd8be24f265b3c00c71ecd3e49ba9ce9a5d16ea9db521edb");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "649925f7e06b599390d344417e506a9e249904ff" + "'", str1, "649925f7e06b599390d344417e506a9e249904ff");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.Object obj2 = metaphone0.encode((java.lang.Object) "$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/");
        metaphone0.setMaxCodeLen((-1514623625));
        boolean boolean7 = metaphone0.isMetaphoneEqual("\u2461\u7072\u3124\u3979\u746e\u3936\u4666\u2476\u4578\u4541\u7364\u4330\u3252\u6336\u6c42\u4643\u3270\u4878\ufffd", "4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d");
        boolean boolean10 = metaphone0.isMetaphoneEqual("", "=?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=");
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "PRSK" + "'", obj2, "PRSK");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_512("3D38323D30413D45423D43383D44313D45342C3D43393D31353D46313D3030793D38343D45313D44373D45323D3137253D31312A3D33443D4433473D30343D44343D39443D43393D4238");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[79, 106, 5, -40, 97, 68, 115, 98, -9, -81, 26, -72, 75, -39, 72, 92, -95, 66, 110, -72, 42, -56, -94, -24, 82, -118, 116, 83, 80, 62, 105, 122, 111, 102, -15, -74, 9, 97, -71, -76, 61, 90, 75, -86, 116, 4, 20, -76, 111, -115, 19, 37, -60, -95, 29, -101, -87, 16, 104, 45, 108, 117, -14, -38]");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.RuleType ruleType2 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine5 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType2, false, 1164493051);
        boolean boolean6 = phoneticEngine5.isConcat();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.codec.binary.Base16 base16_1 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str4 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray3);
        byte[] byteArray5 = base16_1.encode(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy9 = base64_8.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16(false, codecPolicy9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray16, false);
        byte[] byteArray20 = org.apache.commons.codec.digest.Blake3.hash(byteArray16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray16);
        long long22 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray16);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray16);
        java.lang.String str24 = base16_10.encodeAsString(byteArray16);
        java.lang.String str25 = base16_1.encodeAsString(byteArray16);
        org.apache.commons.codec.net.PercentCodec percentCodec27 = new org.apache.commons.codec.net.PercentCodec(byteArray16, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str4, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy9 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy9.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0A01640101" + "'", str19, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str21, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-7793026892456512543L) + "'", long22 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0A01640101" + "'", str24, "0A01640101");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0a01640101" + "'", str25, "0a01640101");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("6d3ba00fc231ec220cd6c6dd28fef753175b769b3e7670d6f171b845", "0Ac7cg1i0oNqE");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-106, 51, -41, 0, 113, -125, -66, -26, 74, 49, -11, 53, -100, -2, -127, 43]");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream26);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray8, inputStream26);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream26);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream26, false);
        java.lang.String str32 = hmacUtils2.hmacHex(inputStream26);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream34 = new org.apache.commons.codec.binary.Base64InputStream(inputStream26, true);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha512Hex((java.io.InputStream) base64InputStream34);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str27, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "a9580121fcdd7da9ddacbfbdf9d824ea" + "'", str32, "a9580121fcdd7da9ddacbfbdf9d824ea");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str35, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream4 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "rules");
        base16OutputStream4.write(byteArray7);
        base16OutputStream4.eof();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-123, 122, 75, -86, 60, 67, -64, 93, 74, 6, 45, 31, -24, 67, -120, -26, 110, -26, -56, 21]");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex0 = new org.apache.commons.codec.language.DaitchMokotoffSoundex();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        java.lang.String str7 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray4, "ffffff");
        java.lang.Object obj8 = daitchMokotoffSoundex0.encode((java.lang.Object) str7);
        java.lang.String str10 = daitchMokotoffSoundex0.soundex("t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffaRlX9TmFOkk" + "'", str7, "ffaRlX9TmFOkk");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + "798543" + "'", obj8, "798543");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "375534" + "'", str10, "375534");
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray2);
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.lang.String str5 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, inputStream4);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream4);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream6);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream6);
        byte[] byteArray11 = base64InputStream6.readNBytes((int) ' ');
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "0Acd8L3u4hVxI");
        java.io.OutputStream outputStream16 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_18 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream20 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream16, (org.apache.commons.codec.binary.BaseNCodec) base16_18, false);
        baseNCodecOutputStream20.eof();
        org.apache.commons.codec.binary.Base16 base16_23 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream25 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream20, (org.apache.commons.codec.binary.BaseNCodec) base16_23, false);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream27 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) baseNCodecOutputStream25, false);
        boolean boolean28 = base32OutputStream27.isStrictDecoding();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream29 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base32OutputStream27);
        java.io.OutputStream outputStream32 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream33 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream51 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream33, true, 1, byteArray43);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str57 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray56);
        java.lang.String str58 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray56);
        java.nio.charset.Charset charset59 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy62 = base64_61.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec63 = new org.apache.commons.codec.net.BCodec(charset59, codecPolicy62);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream64 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream33, true, (int) (short) 1, byteArray56, codecPolicy62);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream65 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream29, true, false, codecPolicy62);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64(0, byteArray11, false, codecPolicy62);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str5, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str8, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$0Acd8L3u$xDzme7ba28RmNwAQkMJJO/" + "'", str14, "$apr1$0Acd8L3u$xDzme7ba28RmNwAQkMJJO/");
        org.junit.Assert.assertNotNull(outputStream16);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(outputStream32);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\000\ufffd" + "'", str57, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\377" + "'", str58, "\377");
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + codecPolicy62 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy62.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        long long1 = pureJavaCrc32C0.getValue();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32C0.update(byteArray5, (-1310417787), 1137768543);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1310417787 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray2, true, (byte) 0);
        java.lang.Object obj8 = base32_6.decode((java.lang.Object) "073743|073753");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[51, 81, 53, 77, 88, 113, 45, 110, 56, 82, 73, 97, 71, 81, 87, 68, 104, 103, 103, 85, 111, 110, 109, 108, 102, 109, 55, 108, 48, 79, 77, 109, 117, 86, 85, 110, 115, 103]");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$6$DAAeTO.Y$KX9PBpbOi6JVKZzK/ZMUC9WeINcqAVfRRN6QSpZZAIEv/TGiNJywmjLDvqupos/gu6C5U119UUBRQUK0nHsfj." + "'", str11, "$6$DAAeTO.Y$KX9PBpbOi6JVKZzK/ZMUC9WeINcqAVfRRN6QSpZZAIEv/TGiNJywmjLDvqupos/gu6C5U119UUBRQUK0nHsfj.");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest34, inputStream35);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream38 = new org.apache.commons.codec.binary.Base16InputStream(inputStream35, false);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.shaHex((java.io.InputStream) base16InputStream38);
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.md5Hex((java.io.InputStream) base16InputStream38);
        java.lang.String str41 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray32, (java.io.InputStream) base16InputStream38);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray32);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str39, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str40, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7516c70c482edf6875ceeebcf2f59b6e1710acbc432fa2c0f4c9551661568709b30b8b3c4025be1396f0885b975b8beba34be8451a6f8adf33ed1480ebd15181" + "'", str41, "7516c70c482edf6875ceeebcf2f59b6e1710acbc432fa2c0f4c9551661568709b30b8b3c4025be1396f0885b975b8beba34be8451a6f8adf33ed1480ebd15181");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$1$b/uHIgrb$Yh8WjJ9PesjW1uMmDx8/l1" + "'", str42, "$1$b/uHIgrb$Yh8WjJ9PesjW1uMmDx8/l1");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        metaphone0.setMaxCodeLen((-2042891860));
        java.lang.String str8 = metaphone0.encode("$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.");
        boolean boolean11 = metaphone0.isMetaphoneEqual("$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0", "\377");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest2, byteBuffer4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils7 = new org.apache.commons.codec.digest.DigestUtils(messageDigest6);
        java.io.OutputStream outputStream8 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream12 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream8, (org.apache.commons.codec.binary.BaseNCodec) base16_10, false);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str16 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray15);
        long long17 = base16_10.getEncodedLength(byteArray15);
        byte[] byteArray18 = digestUtils7.digest(byteArray15);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils20 = new org.apache.commons.codec.digest.DigestUtils(messageDigest19);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer23 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, byteBuffer23);
        char[] charArray26 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer23, true);
        java.lang.String str27 = digestUtils20.digestAsHex(byteBuffer23);
        byte[] byteArray28 = digestUtils7.digest(byteBuffer23);
        java.security.MessageDigest messageDigest29 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteBuffer23);
        java.lang.Class<?> wildcardClass30 = byteBuffer23.getClass();
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream8);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000\ufffd" + "'", str16, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4L + "'", long17 == 4L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str27, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest29);
        org.junit.Assert.assertEquals(messageDigest29.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("UTF-8", "$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
        java.lang.String str3 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-22, 0, -46, 104, 69, -9, -124, -117, -95, 77, -10, -97, -56, 105, -38, 29]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uea00\ud268\u45f7\u848b\ua14d\uf69f\uc869\ufffd" + "'", str3, "\uea00\ud268\u45f7\u848b\ua14d\uf69f\uc869\ufffd");
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray22 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray23, inputStream24);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream26 = new org.apache.commons.codec.binary.Base64InputStream(inputStream24);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream27 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream26);
        javax.crypto.Mac mac28 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, (java.io.InputStream) base16InputStream27);
        javax.crypto.Mac mac30 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac28, "63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac28);
        org.junit.Assert.assertNotNull(mac30);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream11 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, false);
        byte[] byteArray14 = null;
        java.io.OutputStream outputStream15 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream18 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream15, false, false);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy23 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream24 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream15, false, true, codecPolicy23);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream25 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, false, 686869806, byteArray14, codecPolicy23);
        base64OutputStream25.flush();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertTrue("'" + codecPolicy23 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy23.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary('a');
        doubleMetaphoneResult4.append(' ', 'a');
        java.lang.String str10 = doubleMetaphoneResult4.getPrimary();
        doubleMetaphoneResult4.appendPrimary("fd3fbbe188f74146eb125cfb4e0ce6cf7173ce45705a47e691368619b4eecd2e9c925dd63bf258a4b23a787e1b2c5c4c");
        doubleMetaphoneResult4.append("IS8591", "bb2a32f21c6b2dbc3a035b35964a30b8625b80bb33cd49d0374464b77e0fbd376dd8751b8f9c5b022a3a38649a9212e9");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a " + "'", str10, "a ");
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("\u4c82\u5d0d\u7890\u46d6\u6e5e\u9534\uc248\u8f23\u5616\u6c3b\ue3cb\ubde9\ue001\u02cd\u8e6d\ued79\u0467\u9e29\ub558\u3015\u1acc\ubd9c\u2d4c\ud4fc");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-63, -13, 100, -61, 30, -93, -102, -85, 121, 15, -63, 76, 12, -113, -19, 85, 125, 73, -109, 88, 97, -122, 64, -44, 35, -30, 26, -69]");
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((-8280562508237401750L), (int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1582117539 + "'", int2 == 1582117539);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.io.InputStream inputStream1 = org.apache.commons.codec.Resources.getInputStream("");
        org.apache.commons.codec.binary.Base64InputStream base64InputStream3 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, true);
        org.junit.Assert.assertNotNull(inputStream1);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray6, 100, (int) (short) 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "28c614425d5e992b2e041bff2c562bf078635574" + "'", str9, "28c614425d5e992b2e041bff2c562bf078635574");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList3 = null;
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList4 = new org.apache.commons.codec.language.bm.Rule.PhonemeList(phonemeList3);
        org.apache.commons.codec.language.bm.Rule rule5 = new org.apache.commons.codec.language.bm.Rule("HmacSHA224", "SHA3-512", "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList4);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern6 = rule5.getLContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern7 = rule5.getRContext();
        org.junit.Assert.assertNotNull(rPattern6);
        org.junit.Assert.assertNotNull(rPattern7);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray35 = hmacUtils32.hmac(byteBuffer34);
        byte[] byteArray37 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        java.lang.String str38 = hmacUtils32.hmacHex(byteArray37);
        byte[] byteArray39 = null;
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray37, byteArray39);
        java.lang.String str41 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray37);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4" + "'", str38, "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "35e26ec08c0f17ddef19ce66ae4ca70ebaf5b129235ce2f89386aeaa53e326067f33d248a16cabf0013a1e0b055d4c2c" + "'", str40, "35e26ec08c0f17ddef19ce66ae4ca70ebaf5b129235ce2f89386aeaa53e326067f33d248a16cabf0013a1e0b055d4c2c");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uf942\u9208\u2a95\uaeb7\u33a6\u618e\u8cf1\u6dd0\ud78b\u3603\u4f06\ucd36\uc822\u3c5b" + "'", str41, "\uf942\u9208\u2a95\uaeb7\u33a6\u618e\u8cf1\u6dd0\ud78b\u3603\u4f06\ucd36\uc822\u3c5b");
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        java.lang.String str19 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str22 = quotedPrintableCodec5.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        int int31 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray29);
        byte[] byteArray32 = quotedPrintableCodec5.encode(byteArray29);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray32, true, (byte) -1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.digest.Blake3.hash(byteArray43);
        byte[] byteArray52 = base32_35.decode(byteArray51);
        blake3_2.doFinalize(byteArray51);
        org.apache.commons.codec.net.PercentCodec percentCodec54 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray56 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray56);
        java.io.InputStream inputStream58 = java.io.InputStream.nullInputStream();
        java.lang.String str59 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray57, inputStream58);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream60 = new org.apache.commons.codec.binary.Base64InputStream(inputStream58);
        java.lang.String str61 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream60);
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream60);
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.sha256Hex((java.io.InputStream) base64InputStream60);
        byte[] byteArray67 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str68 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray67);
        java.lang.String str69 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray67);
        java.nio.charset.Charset charset71 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy74 = base64_73.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec75 = new org.apache.commons.codec.net.BCodec(charset71, codecPolicy74);
        org.apache.commons.codec.binary.Base16 base16_76 = new org.apache.commons.codec.binary.Base16(false, codecPolicy74);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream77 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream60, true, 0, byteArray67, codecPolicy74);
        byte[] byteArray78 = percentCodec54.encode(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            blake3_2.update(byteArray78, (-1534769883), 76);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Offset must be non-negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_2);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTF-8" + "'", str19, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF-8" + "'", str20, "UTF-8");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-690116322) + "'", int31 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19, 28, -28, 68, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, -67, -41, -113, 95]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str59, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str61, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str62, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str63, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str68, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "a9c412bc47e545109e63db091b6ee4b3" + "'", str69, "a9c412bc47e545109e63db091b6ee4b3");
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertTrue("'" + codecPolicy74 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy74.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[37, 66, 55, 37, 68, 54, 62, 61, 11, 37, 65, 52, 37, 69, 67, 48, 37, 68, 57, 37, 66, 50, 37, 56, 51, 112, 13, 37, 69, 56, 19, 37, 67, 68, 17, 37, 66, 54, 12, 24, 37, 57, 66, 103, 37, 67, 66, 105, 74, 88, 37, 57, 68, 37, 57, 50]");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(4);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        int int10 = phoneticEngine4.getMaxPhonemes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = phoneticEngine4.encode("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray2);
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray2, true, (byte) 0);
        java.util.BitSet bitSet7 = null;
        byte[] byteArray9 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray10 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet7, byteArray9);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray2, byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, (-1877720325));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (40) than the specified maximum size of -1877720325");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[51, 81, 53, 77, 88, 113, 45, 110, 56, 82, 73, 97, 71, 81, 87, 68, 104, 103, 103, 85, 111, 110, 109, 108, 102, 109, 55, 108, 48, 79, 77, 109, 117, 86, 85, 110, 115, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str11, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[15, -80, 91, 118, 24, 26, -127, 118, -17, -52, 44, 98, -106, -113, 116, 46, 67, -18, -121, 82, 83, 88, 38, -59, 126, -82, 69, 93, 42, 73, -8, 28, 123, -97, -9, 39, -39, -115, 29, 14, 18, -87, 56, 36, 63, 5, -96, -65]");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byteArray6);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils13 = new org.apache.commons.codec.digest.DigestUtils(messageDigest12);
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest14, inputStream15);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream15);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream15);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream19 = new org.apache.commons.codec.binary.Base16InputStream(inputStream15);
        byte[] byteArray20 = digestUtils13.digest(inputStream15);
        java.security.MessageDigest messageDigest21 = digestUtils13.getMessageDigest();
        byte[] byteArray23 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray23);
        java.io.InputStream inputStream25 = java.io.InputStream.nullInputStream();
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray24, inputStream25);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream27 = new org.apache.commons.codec.binary.Base64InputStream(inputStream25);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream28 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream27);
        java.io.OutputStream outputStream29 = java.io.OutputStream.nullOutputStream();
        long long30 = base16InputStream28.transferTo(outputStream29);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream32 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream28, true);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest21, (java.io.InputStream) base16InputStream28);
        byte[] byteArray34 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray6, (java.io.InputStream) base16InputStream28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628" + "'", str11, "08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str17, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str26, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(outputStream29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-112, 43, -98, -6, -88, -97, 79, 47, 55, -72, -88, 22, 35, 47, -64, -111, 1, 102, -78, -58, -12, -99, -3, 4, 11, 57, 52, 72, 79, 31, 1, 96, -120, -90, -69, 18, 7, -27, -104, 45, 30, 57, -6, 113, 79, 100, -60, -30, 37, 117, -35, 98, 105, 57, 119, 59, 116, -76, -20, 102, 17, 92, -44, 77]");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        java.lang.String str19 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str22 = quotedPrintableCodec5.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        int int31 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray29);
        byte[] byteArray32 = quotedPrintableCodec5.encode(byteArray29);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray32, true, (byte) -1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.digest.Blake3.hash(byteArray43);
        byte[] byteArray52 = base32_35.decode(byteArray51);
        blake3_2.doFinalize(byteArray51);
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray56);
        org.apache.commons.codec.binary.Base32 base32_60 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray56, true, (byte) 0);
        java.util.BitSet bitSet61 = null;
        byte[] byteArray63 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray64 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet61, byteArray63);
        java.lang.String str65 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray63);
        byte[] byteArray66 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray56, byteArray63);
        blake3_2.doFinalize(byteArray56);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_2);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTF-8" + "'", str19, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF-8" + "'", str20, "UTF-8");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-690116322) + "'", int31 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19, 28, -28, 68, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, -67, -41, -113, 95]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[51, 81, 53, 77, 88, 113, 45, 110, 56, 82, 73, 97, 71, 81, 87, 68, 104, 103, 103, 85, 111, 110, 109, 108, 102, 109, 55, 108, 48, 79, 77, 109, 117, 86, 85, 110, 115, 103]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str65, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[15, -80, 91, 118, 24, 26, -127, 118, -17, -52, 44, 98, -106, -113, 116, 46, 67, -18, -121, 82, 83, 88, 38, -59, 126, -82, 69, 93, 42, 73, -8, 28, 123, -97, -9, 39, -39, -115, 29, 14, 18, -87, 56, 36, 63, 5, -96, -65]");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.SEPHARDIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet3 = lang1.guessLanguages("ce0fa56520426a1953c5b0733cec397dd2e68cdbd9416047d83b3acd8d5572cecbea060f1ee15aaae80f508f7e598635");
        java.lang.String str5 = lang1.guessLanguage("3ab532131556053507bb19db870d70b9435a36b35ffc1519d52fbc75f4e754c56f31c71a810cf553820530e8f75c1fd2");
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.SEPHARDIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.SEPHARDIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languageSet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "any" + "'", str5, "any");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        java.io.OutputStream outputStream50 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream51 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream50);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream53 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream55 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream51, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_58 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet59 = null;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        byte[] byteArray62 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet59, byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray62);
        xXHash32_58.update(byteArray64, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream68 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream51, true, 760066800, byteArray64);
        java.security.MessageDigest messageDigest69 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream70 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest71 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest69, inputStream70);
        java.lang.String str72 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream70);
        byte[] byteArray73 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream70);
        java.lang.String str74 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray64, inputStream70);
        java.lang.String str75 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray41, inputStream70);
        byte[] byteArray77 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        java.io.InputStream inputStream79 = java.io.InputStream.nullInputStream();
        java.lang.String str80 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray78, inputStream79);
        java.io.InputStream inputStream81 = java.io.InputStream.nullInputStream();
        java.lang.String str82 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream81);
        java.lang.String str83 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream81);
        java.lang.String str84 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray78, inputStream81);
        byte[] byteArray85 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray41, inputStream81);
        java.lang.String str86 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray85);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(outputStream50);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest69);
        org.junit.Assert.assertEquals(messageDigest69.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertNotNull(messageDigest71);
        org.junit.Assert.assertEquals(messageDigest71.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str72, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str74, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str75, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str80, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str82, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str83, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str84, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+9sdGxiqbAgyS31ktx+3Y3BpDh0=" + "'", str86, "+9sdGxiqbAgyS31ktx+3Y3BpDh0=");
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray2 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray1);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream4);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet14 = null;
        byte[] byteArray16 = new byte[] { (byte) 100 };
        byte[] byteArray17 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet14, byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray17);
        boolean boolean20 = base32_13.isInAlphabet(byteArray18, false);
        org.apache.commons.codec.CodecPolicy codecPolicy21 = base32_13.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream22 = new org.apache.commons.codec.binary.Base32InputStream(inputStream4, false, (-965378730), byteArray11, codecPolicy21);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream24 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base32InputStream22, false);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray1, (java.io.InputStream) base32InputStream24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_256((java.io.InputStream) base32InputStream24);
        boolean boolean27 = base32InputStream24.isStrictDecoding();
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base32InputStream24);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy21 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy21.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-11, -28, -76, -63, -66, 3, -93, -25, 111, -5, 6, -115, 6, -97, 60, 21]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-89, -1, -58, -8, -65, 30, -41, 102, 81, -63, 71, 86, -96, 97, -42, 98, -11, -128, -1, 77, -28, 59, 73, -6, -126, -40, 10, 75, -128, -8, 67, 74]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str28, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.apache.commons.codec.digest.Crypt.crypt("4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d", "SHA-224");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: SHA-224");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = uRLCodec1.encode("4f5f3b480cef19608e9efb35a774935e4ed8c008bb455e4ce82ce93b", "689ecf52143b9ba32e80a53feba1a5dc78a7d76c983ca59e5036594c");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 689ecf52143b9ba32e80a53feba1a5dc78a7d76c983ca59e5036594c");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec35 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray41);
        java.lang.String str44 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray41, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray41);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray41);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray41);
        java.lang.Object obj48 = quotedPrintableCodec35.decode((java.lang.Object) byteArray41);
        byte[] byteArray49 = uRLCodec1.encode(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = uRLCodec1.encode("a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a", "ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str42, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str44, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "AAAAAAA" + "'", str45, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str46, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str47, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        int int1 = metaphone0.getMaxCodeLen();
        metaphone0.setMaxCodeLen(1);
        metaphone0.setMaxCodeLen(1650246903);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.lang.Object obj6 = hex2.encode((java.lang.Object) byteArray5);
        java.lang.String str7 = hex2.getCharsetName();
        org.apache.commons.codec.binary.Hex hex8 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        char[] charArray14 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer11, true);
        byte[] byteArray15 = hex8.decode(byteBuffer11);
        byte[] byteArray16 = hex2.decode(byteBuffer11);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha512_256("08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628");
        byte[] byteArray19 = hex2.encode(byteArray18);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF-8" + "'", str7, "UTF-8");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-104, 24, 98, -100, -27, 124, -42, -34, -10, 83, -68, 115, 71, -108, -2, -95, 2, 32, 108, -94, -40, -24, -30, 52, -113, -124, -50, 91, 31, -31, 35, -52]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$ZHMsVQqO$imiasmACBQMzKhV5WBobn0" + "'", str20, "$apr1$ZHMsVQqO$imiasmACBQMzKhV5WBobn0");
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: 386538643938343762366264313938626231393830646233333436353965393661316266336462623563353633363863366661626536663662353631323332373930653362343063316434666235306131396333343962313062646336393530 MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray1);
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray6 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.apache.commons.codec.binary.Hex.decodeHex(charArray3, byteArray5, (-1514623625));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1514623625 out of bounds for length 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str8, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.BCodec bCodec1 = new org.apache.commons.codec.net.BCodec("PPFKFA1111");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: PPFKFA1111");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        org.apache.commons.codec.digest.HmacUtils hmacUtils11 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream12 = null;
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream18 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, true, (int) (byte) 0, byteArray16, codecPolicy17);
        char[] charArray19 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray16);
        java.lang.String str20 = hmacUtils11.hmacHex(byteArray16);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream22);
        java.lang.String str26 = hmacUtils11.hmacHex(inputStream22);
        org.apache.commons.codec.digest.XXHash32 xXHash32_28 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_28.reset();
        org.apache.commons.codec.binary.Hex hex30 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer33 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest31, byteBuffer33);
        char[] charArray36 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer33, true);
        byte[] byteArray37 = hex30.decode(byteBuffer33);
        xXHash32_28.update(byteBuffer33);
        byte[] byteArray39 = hmacUtils11.hmac(byteBuffer33);
        java.lang.String str40 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer33);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteBuffer33);
        java.security.MessageDigest messageDigest42 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils43 = new org.apache.commons.codec.digest.DigestUtils(messageDigest42);
        java.security.MessageDigest messageDigest44 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer46 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest47 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest44, byteBuffer46);
        char[] charArray49 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer46, true);
        java.lang.String str50 = digestUtils43.digestAsHex(byteBuffer46);
        java.security.MessageDigest messageDigest51 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer53 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest54 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest51, byteBuffer53);
        java.lang.String str55 = digestUtils43.digestAsHex(byteBuffer53);
        byte[] byteArray57 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        java.io.InputStream inputStream59 = java.io.InputStream.nullInputStream();
        java.lang.String str60 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray58, inputStream59);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream61 = new org.apache.commons.codec.binary.Base64InputStream(inputStream59);
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        long long65 = base64InputStream61.skip((long) ' ');
        base64InputStream61.mark((int) (short) 10);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str69 = digestUtils43.digestAsHex((java.io.InputStream) base64InputStream61);
        byte[] byteArray70 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream61);
        java.lang.String str71 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray70);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str20, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str26, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest42);
        org.junit.Assert.assertEquals(messageDigest42.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest44);
        org.junit.Assert.assertEquals(messageDigest44.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(messageDigest47);
        org.junit.Assert.assertEquals(messageDigest47.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str50, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest51);
        org.junit.Assert.assertEquals(messageDigest51.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(messageDigest54);
        org.junit.Assert.assertEquals(messageDigest54.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str55, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str60, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str62, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str63, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str68, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str69, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "$apr1$eLq2TLMF$L92lX8kuRUayh8qm52TG9." + "'", str71, "$apr1$eLq2TLMF$L92lX8kuRUayh8qm52TG9.");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.codec.EncoderException encoderException1 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = caverphone0.encode((java.lang.Object) (-1332152471));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Caverphone encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TPTPFFFT11" + "'", str2, "TPTPFFFT11");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = new byte[] { (byte) 100 };
        byte[] byteArray3 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str5, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$6$X8jRqUQt$f4Uob5BOcMuwkXZodo8Ty80pd9AGfD0SQU0ibBjhdzbAyytXiKp.EmPT5SJ5FZE43YRXQiuc3RDQpgAiznTFq/");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        org.apache.commons.codec.binary.Base32 base32_9 = new org.apache.commons.codec.binary.Base32((-1310417787), byteArray5, true, (byte) 0);
        byte[] byteArray10 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray1, byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[51, 81, 53, 77, 88, 113, 45, 110, 56, 82, 73, 97, 71, 81, 87, 68, 104, 103, 103, 85, 111, 110, 109, 108, 102, 109, 55, 108, 48, 79, 77, 109, 117, 86, 85, 110, 115, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0931291c985a15d86bf406276121461af7e4553d" + "'", str11, "0931291c985a15d86bf406276121461af7e4553d");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$apr1$uOSEZ427$RrK7x.41PBSI3fRJ9/McI1" + "'", str12, "$apr1$uOSEZ427$RrK7x.41PBSI3fRJ9/McI1");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        java.lang.String str4 = matchRatingApproachEncoder0.encode("$6$rKLOb5zs$K6eMGEnYDmUEHygV2Wnamk.gvBPguGluEH2a6AObQuImzJiyTjvA8vI2nNKAzNbpm5Y2dGz2v1kZLSiKhjlJs1");
        java.lang.String str6 = matchRatingApproachEncoder0.encode("2ad36d9d51748e827af1acab7568d5e2");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "6B4BC7" + "'", str2, "6B4BC7");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$6$JS1" + "'", str4, "$6$JS1");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2D3D52" + "'", str6, "2D3D52");
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec1.encode("RAL");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "RAL" + "'", str17, "RAL");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("UTF-8", "$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray15);
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray13, byteArray15);
        byte[] byteArray18 = uRLCodec1.encode(byteArray13);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream20);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        org.apache.commons.codec.CodecPolicy codecPolicy37 = base32_29.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream38 = new org.apache.commons.codec.binary.Base32InputStream(inputStream20, false, (-965378730), byteArray27, codecPolicy37);
        java.lang.Object obj39 = uRLCodec1.encode((java.lang.Object) byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-22, 0, -46, 104, 69, -9, -124, -117, -95, 77, -10, -97, -56, 105, -38, 29]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[88, 87, 85, 87, 69, 78, 65, 80, 77, 78, 88, 68, 80, 50, 77, 74, 65, 79, 75, 84, 83, 82, 71, 80, 52, 73, 87, 89, 54, 72, 88, 87, 87, 86, 83, 79, 76, 80, 86, 69, 74, 74, 76, 86, 54, 74, 73, 65, 77, 83, 72, 84, 76, 89, 85, 71, 54, 54, 84, 78, 88, 79, 90, 71, 52, 85, 82, 69, 77, 70, 73, 50, 78, 84, 73, 70, 76, 51, 76, 84, 79, 65, 76, 84, 85, 75, 74, 72, 86, 70, 85, 68, 54, 74, 73, 85, 72, 66, 67, 80, 55, 75, 65, 61, 51, 68]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-48, -127, 78, 47, 13, 54, 77, -114, 6, -43, -78, -19, -59, -90, 41, 91, 55, -43, 107, 101, 21, -123, 87, -111, 29, 59, 4, -119, 60, 13, -42, 95, -97, 4, 81, 103, 78, -111, -86, -76, 56, -84, 97, -59, -103, -75, 98, 60, -91, 63, 53, 18, 51, 56, -126, -117, 36, -70, -47, 58, 43, 24, 60, -68]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "58cfd93fbeaefa462533f27403c2ed80e077aef9ef528d9557625019eb3e38fc13bd23a7b2f992c3d9ac159dc63448d8e47076027af3c0ba75030f7ea0d76877" + "'", str17, "58cfd93fbeaefa462533f27403c2ed80e077aef9ef528d9557625019eb3e38fc13bd23a7b2f992c3d9ac159dc63448d8e47076027af3c0ba75030f7ea0d76877");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[37, 69, 65, 37, 48, 48, 37, 68, 50, 104, 69, 37, 70, 55, 37, 56, 52, 37, 56, 66, 37, 65, 49, 77, 37, 70, 54, 37, 57, 70, 37, 67, 56, 105, 37, 68, 65, 37, 49, 68]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str23, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy37 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy37.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(obj39);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.reset();
        long long2 = pureJavaCrc32_0.getValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C3 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C3.reset();
        java.util.BitSet bitSet5 = null;
        byte[] byteArray7 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray8 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet5, byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray7);
        pureJavaCrc32C3.update(byteArray7, (-690116322), (-1612190696));
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        pureJavaCrc32C3.update(byteArray14);
        org.apache.commons.codec.digest.HmacUtils hmacUtils17 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray14);
        boolean boolean18 = org.apache.commons.codec.digest.HmacUtils.isAvailable(hmacAlgorithms0);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, inputStream21);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest22);
        org.apache.commons.codec.net.URLCodec uRLCodec25 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet26 = null;
        byte[] byteArray28 = new byte[] { (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet26, byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray29);
        byte[] byteArray32 = uRLCodec25.decode(byteArray29);
        byte[] byteArray33 = null;
        byte[] byteArray34 = uRLCodec25.decode(byteArray33);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray40);
        java.lang.String str43 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_44 = new org.apache.commons.codec.binary.Base16();
        boolean boolean46 = base16_44.isInAlphabet("AAAAAAA");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str52 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray50, true);
        java.lang.String str53 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray50);
        boolean boolean55 = base16_44.isInAlphabet(byteArray50, true);
        byte[] byteArray56 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray40, byteArray50);
        byte[] byteArray57 = uRLCodec25.encode(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest22, byteArray57);
        org.apache.commons.codec.digest.HmacUtils hmacUtils59 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray57);
        java.io.File file60 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray61 = hmacUtils59.hmac(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str9, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str31, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str43, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ffffff" + "'", str52, "ffffff");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str53, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        java.lang.String str3 = nysiis1.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.String str5 = nysiis1.nysiis("bd0be5cc3381016e156ac44b77f4eb8f9fa98304fb499a95659142fe479acd17");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "EFDBAC" + "'", str3, "EFDBAC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BDBACA" + "'", str5, "BDBACA");
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        byte[] byteArray22 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.lang.String str25 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray23, inputStream24);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream26 = new org.apache.commons.codec.binary.Base64InputStream(inputStream24);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream27 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream26);
        javax.crypto.Mac mac28 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, (java.io.InputStream) base16InputStream27);
        int int29 = base16InputStream27.read();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str25, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(mac28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException(throwable0);
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException();
        decoderException1.addSuppressed((java.lang.Throwable) encoderException2);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException(throwable4);
        org.apache.commons.codec.EncoderException encoderException6 = new org.apache.commons.codec.EncoderException();
        decoderException5.addSuppressed((java.lang.Throwable) encoderException6);
        encoderException2.addSuppressed((java.lang.Throwable) encoderException6);
        java.lang.Throwable[] throwableArray9 = encoderException2.getSuppressed();
        java.lang.Throwable[] throwableArray10 = encoderException2.getSuppressed();
        org.apache.commons.codec.EncoderException encoderException11 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException2);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("13132184822182828");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray11, true);
        java.lang.String str14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray11);
        java.lang.String str15 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray1, byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-41, 125, 119, -37, 95, 56, -13, 109, -75, -13, 111, 54]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8" + "'", str13, "bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8");
        org.junit.Assert.assertEquals("'" + strstr14, "10101000111111110100010000111000000101000010010100111111011010001010100100100111001010010011101000010111011100000111001111101101010101011101000001101100000110100001010101000110001000101110010100100110101110111101101110100110111101111000011011100010001101011000111101100100000000000010010101011111010101110100101010100100101111101110010101100100101101011111011000011110100011110010110111100010110011110100010000111001100101010000001110001001111010010011011101101110011000110000111100110100011000101010100110111101");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8de6503329e0c5c777a853206934e57860fe3cff4f1b634f58ef9ae9abdf033f41fa19a9e6351f36c2c6c5728faec4de91267d408a49a1fa5a7a340c3d21bf75" + "'", str15, "8de6503329e0c5c777a853206934e57860fe3cff4f1b634f58ef9ae9abdf033f41fa19a9e6351f36c2c6c5728faec4de91267d408a49a1fa5a7a340c3d21bf75");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("$6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: $6$pVCQ4ubU$JUeLTrU3BV8guH48JP2PdpLRptCket2bXIuhQBB.i4T4MpaHj2faxmT/qaUCyFfFhli/WHAOxH1IGwkSplKNq. MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_1.reset();
        xXHash32_1.update((int) (byte) 1);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray6);
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream9 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest8, inputStream9);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream9);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream9);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet19 = null;
        byte[] byteArray21 = new byte[] { (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet19, byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray22);
        boolean boolean25 = base32_18.isInAlphabet(byteArray23, false);
        org.apache.commons.codec.CodecPolicy codecPolicy26 = base32_18.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream27 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, false, (-965378730), byteArray16, codecPolicy26);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream29 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base32InputStream27, false);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray6, (java.io.InputStream) base32InputStream29);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_1.update(byteArray6, (-847692125), 1650246903);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -847692125 out of bounds for byte[28]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str11, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str12, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy26 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy26.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-11, -28, -76, -63, -66, 3, -93, -25, 111, -5, 6, -115, 6, -97, 60, 21]");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$5$.IFl5cJx$Djr8PtcoCuvb2ncdSng057qDIXQpjqs020RpQC7vpw5");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-80, -12, -7, -118, -53, 66, -74, 85, 84, -68, 14, -97, -6, 52, 2, -69, -5, 127, -49, -72]");
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        int int20 = base64InputStream19.available();
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray7, (java.io.InputStream) base64InputStream19);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream24 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream19, false, true);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, (java.io.InputStream) base64InputStream19);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base64InputStream19);
        base64InputStream19.close();
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream3);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream7 = new org.apache.commons.codec.binary.Base16InputStream(inputStream3);
        byte[] byteArray8 = digestUtils1.digest(inputStream3);
        java.security.MessageDigest messageDigest9 = digestUtils1.getMessageDigest();
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream15 = new org.apache.commons.codec.binary.Base64InputStream(inputStream13);
        byte[] byteArray16 = digestUtils1.digest(inputStream13);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream13);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str5, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream5 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        java.util.BitSet bitSet8 = null;
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray11 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet8, byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str22 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray18);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream30 = new org.apache.commons.codec.binary.Base64InputStream(inputStream28);
        int int31 = base64InputStream30.available();
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray18, (java.io.InputStream) base64InputStream30);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream30, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream36 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream35);
        boolean boolean37 = base16InputStream35.isStrictDecoding();
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base16InputStream35);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy44 = base64_43.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_45 = new org.apache.commons.codec.binary.Base16(true, codecPolicy44);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream46 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream35, false, true, codecPolicy44);
        org.apache.commons.codec.binary.Base16 base16_47 = new org.apache.commons.codec.binary.Base16(true, codecPolicy44);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream48 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream5, false, 76, byteArray10, codecPolicy44);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AAAAAAA" + "'", str22, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str24, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str38, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertTrue("'" + codecPolicy44 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy44.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = blake3_13.doFinalize((-557514842));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Requested bytes must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.io.OutputStream outputStream4 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream4);
        byte[] byteArray8 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream5.write(byteArray8);
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str13 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray8, byteArray12);
        byte[] byteArray15 = hex2.encode(byteArray8);
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer19 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest17, byteBuffer19);
        char[] charArray22 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer19, true);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest16, byteBuffer19);
        byte[] byteArray24 = hex2.encode(byteBuffer19);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest25, inputStream26);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream26);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream26);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet36 = null;
        byte[] byteArray38 = new byte[] { (byte) 100 };
        byte[] byteArray39 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet36, byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray39);
        boolean boolean42 = base32_35.isInAlphabet(byteArray40, false);
        org.apache.commons.codec.CodecPolicy codecPolicy43 = base32_35.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream44 = new org.apache.commons.codec.binary.Base32InputStream(inputStream26, false, (-965378730), byteArray33, codecPolicy43);
        byte[] byteArray45 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray33);
        java.lang.Object obj46 = hex2.decode((java.lang.Object) byteArray45);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(outputStream4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\000\ufffd" + "'", str13, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str14, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[101, 54, 97, 55, 102, 100, 55, 99, 48, 51, 52, 53, 54, 99, 57, 101, 53, 53, 100, 51, 49, 99, 50, 52, 57, 55, 55, 56, 53, 54, 52, 52, 49, 100, 52, 53, 57, 102, 48, 97, 102, 102, 50, 98, 56, 50, 51, 101, 48, 50, 53, 51, 50, 98, 56, 100, 52, 53, 97, 100, 48, 52, 51, 102]");
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512/256 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str28, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str29, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy43 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy43.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2, true);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray10, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray10);
        java.lang.String str17 = org.apache.commons.codec.digest.Crypt.crypt(byteArray10, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        byte[] byteArray25 = uRLCodec19.encode(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray10, byteArray24);
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray10);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream28);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray10, inputStream28);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream28);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray4, inputStream28);
        org.apache.commons.codec.digest.Blake3 blake3_33 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray4);
        char[] charArray34 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray4);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex35 = new org.apache.commons.codec.language.RefinedSoundex(charArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray34);
        java.lang.Class<?> wildcardClass37 = charArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 56, 50, 61, 48, 65, 61, 69, 66, 61, 67, 56, 61, 68, 49, 61, 69, 52, 44, 61, 67, 57, 61, 49, 53, 61, 70, 49, 61, 48, 48, 121, 61, 56, 52, 61, 69, 49, 61, 68, 55, 61, 69, 50, 61, 49, 55, 37, 61, 49, 49, 42, 61, 51, 68, 61, 68, 51, 71, 61, 48, 52, 61, 68, 52, 61, 57, 68, 61, 67, 57, 61, 66, 56]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str13, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AAAAAAA" + "'", str14, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str15, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0Acd8L3u4hVxI" + "'", str17, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str26, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str29, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5" + "'", str32, "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertNotNull(blake3_33);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "3d38323d30413d45423d43383d44313d45342c3d43393d31353d46313d3030793d38343d45313d44373d45323d3137253d31312a3d33443d4433473d30343d44343d39443d43393d4238");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "3d38323d30413d45423d43383d44313d45342c3d43393d31353d46313d3030793d38343d45313d44373d45323d3137253d31312a3d33443d4433473d30343d44343d39443d43393d4238");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[3, d, 3, 8, 3, 2, 3, d, 3, 0, 4, 1, 3, d, 4, 5, 4, 2, 3, d, 4, 3, 3, 8, 3, d, 4, 4, 3, 1, 3, d, 4, 5, 3, 4, 2, c, 3, d, 4, 3, 3, 9, 3, d, 3, 1, 3, 5, 3, d, 4, 6, 3, 1, 3, d, 3, 0, 3, 0, 7, 9, 3, d, 3, 8, 3, 4, 3, d, 4, 5, 3, 1, 3, d, 4, 4, 3, 7, 3, d, 4, 5, 3, 2, 3, d, 3, 1, 3, 7, 2, 5, 3, d, 3, 1, 3, 1, 2, a, 3, d, 3, 3, 4, 4, 3, d, 4, 4, 3, 3, 4, 7, 3, d, 3, 0, 3, 4, 3, d, 4, 4, 3, 4, 3, d, 3, 9, 4, 4, 3, d, 4, 3, 3, 9, 3, d, 4, 2, 3, 8]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 64, 1, 1, 0, 1, 0, 16, 16, 0, 64, 0, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream5 = new org.apache.commons.codec.binary.Base16InputStream(inputStream2, false);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream2);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream6);
        java.lang.Object obj8 = binaryCodec0.decode((java.lang.Object) str7);
        java.lang.Object obj10 = binaryCodec0.decode((java.lang.Object) "\000");
        java.io.InputStream inputStream11 = java.io.InputStream.nullInputStream();
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream11);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream13 = new org.apache.commons.codec.binary.Base32InputStream(inputStream11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = binaryCodec0.encode((java.lang.Object) base32InputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str12, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str2 = beiderMorseEncoder0.encode("d41d8cd98f00b204e9800998ecf8427e");
        boolean boolean3 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType4 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder5 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType6 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder5.setRuleType(ruleType6);
        java.lang.String str8 = ruleType6.getName();
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine10 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType4, ruleType6, false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi" + "'", str2, "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + nameType4 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType4.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType6 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType6.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "exact" + "'", str8, "exact");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("33f35cc7f403bc6e099d0dbb155bb819ad161ac336487426ebc6bae8aee9d952f7baaba8cb8bc20a0cc3bbce2631b4d9d5ec4f18ce723777659d7ca2d79c982f");
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream27 = new org.apache.commons.codec.binary.Base64InputStream(inputStream23, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream28 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest26, inputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream27);
        byte[] byteArray31 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray25, byteArray30);
        byte[] byteArray32 = hmacUtils2.hmac(byteArray25);
        java.lang.String str34 = hmacUtils2.hmacHex("FFFFFF");
        java.io.File file35 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = hmacUtils2.hmac(file35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[12, 71, 108, -2, -39, 32, -105, -28, -46, 120, 125, 64, -100, 82, 88, 109]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[22, -51, -28, 108, -52, -109, 87, 44, -30, 66, 76, -24, 22, 100, 24, -35]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ba4b3248d86567b6bf56654017f7ed21" + "'", str34, "ba4b3248d86567b6bf56654017f7ed21");
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        boolean boolean7 = doubleMetaphone0.isDoubleMetaphoneEqual("$6$tNEwHCOF$sNWeimC6OyYB5Kjbm1rlax0.c4d2om5PPuKWQuwAGDbFSIdsScYB9ByS.Ic0qUPcLzEMUvUfY8/qdruZdekFl0", "F261302623", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        java.lang.String str4 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[37, 66, 55, 37, 68, 54, 37, 51, 69, 37, 51, 68, 37, 48, 66, 37, 65, 52, 37, 69, 67, 48, 37, 68, 57, 37, 66, 50, 37, 56, 51, 112, 37, 48, 68, 37, 69, 56, 37, 49, 51, 37, 67, 68, 37, 49, 49, 37, 66, 54, 37, 48, 67, 37, 49, 56, 37, 57, 66, 103, 37, 67, 66, 105, 74, 88, 37, 57, 68, 37, 57, 50]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==" + "'", str4, "t9Y+PQuk7DDZsoNwDegTzRG2DBibZ8tpSlidkg==");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-108, 71, -78, 97, -71, -102, -107, 125, 74, -40, -24, -12, -66, 21, 17, -16, -4, -5, -106, -110, -80, 89, -98, 15, -86, 73, 65, -106, -36, -125, -15, 20, -16, -102, 8, -101, -95, 123, -46, 114, 87, -114, -88, -48, 75, -113, -102, -94]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str23 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray19);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Fh\211v\202\314\322\261\356\f\256\215\305YG)\037\201\234\305\236\341&\365\275$;\030RWt\024A:\356\325x\013_\261\020\220\003\207\025\276\355\033\000qJ\025\263\034\215\226t\373\333\337\177\324\031\034" + "'", str23, "Fh\211v\202\314\322\261\356\f\256\215\305YG)\037\201\234\305\236\341&\365\275$;\030RWt\024A:\356\325x\013_\261\020\220\003\207\025\276\355\033\000qJ\025\263\034\215\226t\373\333\337\177\324\031\034");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        java.lang.Object obj15 = quotedPrintableCodec2.decode((java.lang.Object) byteArray8);
        java.lang.String str16 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str17 = quotedPrintableCodec2.getDefaultCharset();
        java.lang.String str19 = quotedPrintableCodec2.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec21 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        byte[] byteArray27 = uRLCodec21.encode(byteArray26);
        int int28 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray26);
        byte[] byteArray29 = quotedPrintableCodec2.encode(byteArray26);
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray29, true, (byte) -1);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray38);
        java.lang.String str41 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray38, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        org.apache.commons.codec.net.URLCodec uRLCodec44 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet45 = null;
        byte[] byteArray47 = new byte[] { (byte) 100 };
        byte[] byteArray48 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet45, byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray48);
        byte[] byteArray50 = uRLCodec44.encode(byteArray49);
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray38, byteArray50);
        java.lang.String str52 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray38);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str59 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray58);
        java.lang.String str61 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray58, false);
        byte[] byteArray62 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray38, byteArray58);
        byte[] byteArray65 = base32_32.encode(byteArray58, 1, (-1310417787));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTF-8" + "'", str17, "UTF-8");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-690116322) + "'", int28 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str39, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str41, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "AAAAAAA" + "'", str42, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250" + "'", str51, "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "$6$/hMrCgEp$K4Gh8qrQdx/Ika4aibWqXLR/uatHpETp.kfSL.MqG7Y6YzqS5PdV8KHk1wVKWJi1QZjX/TIy/KLqakOVMLqtu/" + "'", str52, "$6$/hMrCgEp$K4Gh8qrQdx/Ika4aibWqXLR/uatHpETp.kfSL.MqG7Y6YzqS5PdV8KHk1wVKWJi1QZjX/TIy/KLqakOVMLqtu/");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str59, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0A01640101" + "'", str61, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-15, 127, -61, 31, -42, 32, 12, -117, -90, 38, -32, -71, -1, 50, -93, -93]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet4 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap5 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType3, languageSet4);
        org.apache.commons.codec.language.bm.NameType nameType6 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang7 = org.apache.commons.codec.language.bm.Lang.instance(nameType6);
        org.apache.commons.codec.language.bm.NameType nameType8 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType9 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet10 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap11 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType8, ruleType9, languageSet10);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet12 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap13 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType6, ruleType9, languageSet12);
        boolean boolean14 = languageSet12.isEmpty();
        org.apache.commons.codec.language.bm.NameType nameType15 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang16 = org.apache.commons.codec.language.bm.Lang.instance(nameType15);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet18 = lang16.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet20 = lang16.guessLanguages("400000");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet21 = languageSet12.restrictTo(languageSet20);
        java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList22 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType0, ruleType3, languageSet12);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang7);
        org.junit.Assert.assertTrue("'" + nameType8 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType8.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType9 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType9.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(languageSet12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + nameType15 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType15.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang16);
        org.junit.Assert.assertNotNull(languageSet18);
        org.junit.Assert.assertNotNull(languageSet20);
        org.junit.Assert.assertNotNull(languageSet21);
        org.junit.Assert.assertNotNull(ruleList22);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "e52bd2f9865725992e77fea135c553b42d2796d0c2b212962b5c5406d4380299107a9cd14755459ff2631e7b3c867757bc5fd9349e3b88b444005f2409f6ed6e" + "'", str1, "e52bd2f9865725992e77fea135c553b42d2796d0c2b212962b5c5406d4380299107a9cd14755459ff2631e7b3c867757bc5fd9349e3b88b444005f2409f6ed6e");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex0 = org.apache.commons.codec.language.RefinedSoundex.US_ENGLISH;
        java.lang.String str2 = refinedSoundex0.soundex("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        java.lang.String str4 = refinedSoundex0.encode("FDAFAD");
        org.junit.Assert.assertNotNull(refinedSoundex0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "F216161031612106" + "'", str2, "F216161031612106");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F260206" + "'", str4, "F260206");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        boolean boolean33 = org.apache.commons.codec.digest.HmacUtils.isAvailable(hmacAlgorithms0);
        java.lang.String str34 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "HmacSHA224" + "'", str34, "HmacSHA224");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.lang.String str1 = org.apache.commons.codec.digest.UnixCrypt.crypt("PFTP");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kfSek2eJb6h4M" + "'", str1, "kfSek2eJb6h4M");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex("$6$rKLOb5zs$K6eMGEnYDmUEHygV2Wnamk.gvBPguGluEH2a6AObQuImzJiyTjvA8vI2nNKAzNbpm5Y2dGz2v1kZLSiKhjlJs1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "aca2a8160d6278c828de56baa8f9f9c00e09b77cd13059d3a4f813401270b27ec99487d76ad9401416ecc1aa5d859d15" + "'", str1, "aca2a8160d6278c828de56baa8f9f9c00e09b77cd13059d3a4f813401270b27ec99487d76ad9401416ecc1aa5d859d15");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        java.lang.Object obj8 = binaryCodec0.decode((java.lang.Object) "\000h\000i\000!");
        java.io.InputStream inputStream9 = java.io.InputStream.nullInputStream();
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream9);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream12 = new org.apache.commons.codec.binary.Base64InputStream(inputStream9, false);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream9);
        byte[] byteArray14 = binaryCodec0.encode(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(inputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 49, 48, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 49, 48, 49, 49, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 49, 49, 48, 48, 49, 48, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 48, 49, 48, 49, 48, 49, 48, 49, 48, 48, 49, 49, 48, 48, 49, 49, 49, 48, 48, 48, 49, 48, 49, 48, 49, 48, 48, 48, 49, 49, 49, 49, 49, 48, 48, 49, 48, 49, 48, 49, 48, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49]");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md5("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        long[] longArray3 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray4);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[123, 118, -12, -87, 41, 124, 1, 20, 35, -56, -84, -61, -49, 11, -8, -51]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-3897760812301620693, 1850759082348605938]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[123, 118, 61, 70, 52, 61, 65, 57, 41, 124, 61, 48, 49, 61, 49, 52, 35, 61, 67, 56, 61, 65, 67, 61, 67, 51, 61, 67, 70, 61, 48, 66, 61, 70, 56, 61, 67, 68]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d" + "'", str5, "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d" + "'", str6, "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream31 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, true, codecPolicy30);
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray37 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet34, byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray37);
        boolean boolean40 = base32_33.isInAlphabet(byteArray38, false);
        boolean boolean42 = base32_33.isInAlphabet((byte) 100);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream44 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base64OutputStream1, (org.apache.commons.codec.binary.BaseNCodec) base32_33, true);
        boolean boolean46 = base32_33.isInAlphabet("57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        java.nio.charset.Charset charset7 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str8 = qCodec3.encode("$apr1$ZHMsVQqO$imiasmACBQMzKhV5WBobn0", charset7);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "=?UTF-8?Q?$apr1$ZHMsVQqO$imiasmACBQMzKhV5WBobn0?=" + "'", str8, "=?UTF-8?Q?$apr1$ZHMsVQqO$imiasmACBQMzKhV5WBobn0?=");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str8 = doubleMetaphoneResult7.getPrimary();
        doubleMetaphoneResult7.append('a');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.lang.String str9 = bCodec2.encode("54d7107aa24bc36b8e80134b8e4ea34c0185bf226a305b9511a3711173b8f450e7494952770ec663d90fe5f906df8f27");
        java.lang.String str11 = bCodec2.encode("$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=" + "'", str9, "=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "=?UTF-8?B?JGFwcjEkOXl0bjk2RmYkdkV4RUFzZEMwMlJjNmxCRkMycEh4Lw==?=" + "'", str11, "=?UTF-8?B?JGFwcjEkOXl0bjk2RmYkdkV4RUFzZEMwMlJjNmxCRkMycEh4Lw==?=");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.digest.HmacUtils hmacUtils21 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray28, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray28);
        java.lang.String str35 = org.apache.commons.codec.digest.Crypt.crypt(byteArray28, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec37 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet38 = null;
        byte[] byteArray40 = new byte[] { (byte) 100 };
        byte[] byteArray41 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet38, byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray41);
        byte[] byteArray43 = uRLCodec37.encode(byteArray42);
        java.lang.String str44 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray28, byteArray42);
        byte[] byteArray45 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray28);
        byte[] byteArray46 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet22, byteArray45);
        org.apache.commons.codec.digest.HmacUtils hmacUtils47 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray46);
        javax.crypto.Mac mac48 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray46);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str29, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str31, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AAAAAAA" + "'", str32, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str33, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0Acd8L3u4hVxI" + "'", str35, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str44, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(mac48);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getHmacSha512(byteArray4);
        byte[] byteArray8 = new byte[] { (byte) -1 };
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray4, byteArray8);
        java.util.Random random11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray9, "980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7", random11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 980b01872178faf1fb5ab92993a80b88c1537a273da4b4eec954ec789bcc138f2ea52ce566dd3ca8297320390421f9c7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[107, -78, -85, -69, -98, -67, -26, -85, -106, 2, -66, 10, 61, 109, -27, -102, 4, 127, 56, -120]");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils("3ab532131556053507bb19db870d70b9435a36b35ffc1519d52fbc75f4e754c56f31c71a810cf553820530e8f75c1fd2", "sep");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm 3ab532131556053507bb19db870d70b9435a36b35ffc1519d52fbc75f4e754c56f31c71a810cf553820530e8f75c1fd2 not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[55, 54, 54, 52, 102, 98, 101, 48, 54, 50, 49, 48, 49, 100, 98, 48, 49, 54, 51, 56, 51, 99, 99, 99, 55, 100, 55, 49, 48, 51, 55, 97, 48, 55, 51, 51, 52, 50, 99, 98, 48, 97, 49, 54, 49, 56, 50, 56, 102, 56, 54, 51, 49, 53, 98, 54, 98, 57, 98, 48, 54, 101, 100, 52, 48, 53, 51, 52, 56, 54, 99, 56, 100, 52, 102, 54, 48, 100, 100, 51, 101, 98, 53, 101, 101, 102, 97, 56, 48, 54, 102, 97, 99, 102, 102, 50, 52, 100, 49, 50, 97, 57, 56, 53, 50, 57, 102, 101, 49, 53, 97, 48, 50, 101, 57, 56, 54, 99, 99, 97, 51, 51, 50, 99, 101, 53, 49, 56]");
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "f7249d7d61a549e0bdcc2977dc42b4b992caedece7037003086b09ddd1185830365de5731e4b13586d3b6966484c34a0" + "'", str8, "f7249d7d61a549e0bdcc2977dc42b4b992caedece7037003086b09ddd1185830365de5731e4b13586d3b6966484c34a0");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\f\ufffd\ufffd\ufffdYG)\037\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd$;\030RWt\024\ufffd\ufffdx\013\ufffd\020\ufffd\003\ufffd\025\ufffd\ufffd\033\000qJ\025\ufffd\034\ufffd\ufffd\ufffd\ufffd\ufffd\177\ufffd\031\034" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\f\ufffd\ufffd\ufffdYG)\037\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd$;\030RWt\024\ufffd\ufffdx\013\ufffd\020\ufffd\003\ufffd\025\ufffd\ufffd\033\000qJ\025\ufffd\034\ufffd\ufffd\ufffd\ufffd\ufffd\177\ufffd\031\034");
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: bda962340f636e37e98903953944cfe22d8f1ef6b564e5bea44a575f2500648f35e286f7a6dbbb26e52246151a6cd055ed7370173a2927a9683f25143844ffa8");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        java.lang.Class<?> wildcardClass5 = baseNCodecOutputStream4.getClass();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        boolean boolean20 = base64OutputStream1.isStrictDecoding();
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.md5("48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream25 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, false, (int) (short) 0, byteArray24);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isBase64(byteArray24);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-81, 87, 118, -68, 89, 15, 90, 99, -57, -120, 117, 75, -66, -24, 94, -119]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.codec.binary.Base16 base16_0 = new org.apache.commons.codec.binary.Base16();
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str6 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray4, true);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray4);
        java.lang.String str8 = base16_0.encodeAsString(byteArray4);
        org.apache.commons.codec.digest.Blake3 blake3_9 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray4);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms10 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        javax.crypto.Mac mac16 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray22);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray22);
        javax.crypto.Mac mac29 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray22);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            blake3_9.update(byteArray30, (-965378730), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Offset must be non-negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ffffff" + "'", str6, "ffffff");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str7, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FFFFFF" + "'", str8, "FFFFFF");
        org.junit.Assert.assertNotNull(blake3_9);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms10 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms10.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str27, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str28, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder0 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str2 = matchRatingApproachEncoder0.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.String str4 = matchRatingApproachEncoder0.encode("6brp3ObrccRZI");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "E99B98" + "'", str2, "E99B98");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6BRCRZ" + "'", str4, "6BRCRZ");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        byte[] byteArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512/256 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray6);
        org.apache.commons.codec.net.PercentCodec percentCodec12 = new org.apache.commons.codec.net.PercentCodec(byteArray6, false);
        byte[] byteArray13 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray6);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        byte[] byteArray16 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray17, inputStream18);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream20 = new org.apache.commons.codec.binary.Base64InputStream(inputStream18);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream18);
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest24, byteArray27);
        org.apache.commons.codec.binary.Base32 base32_32 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy33 = base32_32.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream34 = new org.apache.commons.codec.binary.Base32InputStream(inputStream18, true, (int) (byte) 0, byteArray30, codecPolicy33);
        java.lang.String str35 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray6, inputStream18);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0A01640101" + "'", str9, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-113, 122, 46, 35, 4, 122, -60, 14, -44, 43, 101, 109, 74, -35, -124, -125, -17, 20, -70, 35, 38, -12, -60, 75, -124, 14, -124, -108, 60, 43, -6, -92]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[37, 48, 65, 37, 48, 49, 100, 37, 48, 49, 37, 48, 49]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[43, 77, -105, 20, -32, -22, -48, 14, 8, -70, -118, -7, 13, 40, -106, 3, -104, 52, 36, 18, -36, 12, 71, -120, -95, 55, -19, -114, 106, 7, 93, 4, -115, -3, -48, -102, 108, 25, 54, 33, 23, -49, 127, -54, 89, 53, 101, 82, 112, 64, -40, 41, 23, 51, -45, 6, -13, -24, 100, 117, 69, -54, -118, 93]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str19, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy33 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy33.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "779a9a01aaac1e6d39fd1edd3ad7c11d" + "'", str35, "779a9a01aaac1e6d39fd1edd3ad7c11d");
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_6 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray5);
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray8 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 10, 10, 0]");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray14);
        char[] charArray16 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray16);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, byteArray17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 2, 0, 0, 24, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -114, 101, 58, 114, 28, -116, 34, 89, -93, -123, 65, -34, 2, -6, -60, -36, 20, -13, 92, 11, 90, 42, -21, 26, 6, 57, 28]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[68, -86, -74, 32, -27, 115, 52, 0, -106, 0, -63, 95, 16, -76, -75, -86, 77, -51, 23, -84]");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100, 51, 97, 55, 50, 51, 52, 98, 53, 101, 55, 102, 49, 98, 56, 98, 100, 54, 53, 56, 48, 50, 54, 101, 97, 98, 101, 52, 101, 51, 50, 55, 57, 48, 54, 51, 102, 57, 51, 57, 99, 102, 100, 99, 53, 52, 97, 56, 51, 100, 99, 52, 99, 100, 51, 99, 53, 53, 102, 51, 53, 51, 48, 52, 52, 49, 97, 97, 56, 56, 54, 99, 102, 98, 57, 54, 50, 101, 102, 48, 52, 49, 53, 51, 55, 101, 50, 56, 53, 97, 51, 100, 100, 101, 55, 97]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "5da4cbb5217e906ea7295996b20d59b341163c58babc3e2ef4f9e10510559a0522d50f2db8c591d3ee50cec457c229dffa51bffa75c8252cc566733264d695b4" + "'", str2, "5da4cbb5217e906ea7295996b20d59b341163c58babc3e2ef4f9e10510559a0522d50f2db8c591d3ee50cec457c229dffa51bffa75c8252cc566733264d695b4");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream3 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream4 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("UTF-8", "$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
        byte[] byteArray9 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=3D");
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray9);
        java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray7, byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            base16OutputStream4.write(byteArray7, 1757052779, 46466694);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-22, 0, -46, 104, 69, -9, -124, -117, -95, 77, -10, -97, -56, 105, -38, 29]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[88, 87, 85, 87, 69, 78, 65, 80, 77, 78, 88, 68, 80, 50, 77, 74, 65, 79, 75, 84, 83, 82, 71, 80, 52, 73, 87, 89, 54, 72, 88, 87, 87, 86, 83, 79, 76, 80, 86, 69, 74, 74, 76, 86, 54, 74, 73, 65, 77, 83, 72, 84, 76, 89, 85, 71, 54, 54, 84, 78, 88, 79, 90, 71, 52, 85, 82, 69, 77, 70, 73, 50, 78, 84, 73, 70, 76, 51, 76, 84, 79, 65, 76, 84, 85, 75, 74, 72, 86, 70, 85, 68, 54, 74, 73, 85, 72, 66, 67, 80, 55, 75, 65, 61, 51, 68]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-48, -127, 78, 47, 13, 54, 77, -114, 6, -43, -78, -19, -59, -90, 41, 91, 55, -43, 107, 101, 21, -123, 87, -111, 29, 59, 4, -119, 60, 13, -42, 95, -97, 4, 81, 103, 78, -111, -86, -76, 56, -84, 97, -59, -103, -75, 98, 60, -91, 63, 53, 18, 51, 56, -126, -117, 36, -70, -47, 58, 43, 24, 60, -68]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "58cfd93fbeaefa462533f27403c2ed80e077aef9ef528d9557625019eb3e38fc13bd23a7b2f992c3d9ac159dc63448d8e47076027af3c0ba75030f7ea0d76877" + "'", str11, "58cfd93fbeaefa462533f27403c2ed80e077aef9ef528d9557625019eb3e38fc13bd23a7b2f992c3d9ac159dc63448d8e47076027af3c0ba75030f7ea0d76877");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(inputStream16);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream23 = new org.apache.commons.codec.binary.Base32InputStream(inputStream16, false);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" + "'", str21, "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteBuffer4);
        char[] charArray7 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer4, true);
        java.lang.String str8 = digestUtils1.digestAsHex(byteBuffer4);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        java.lang.String str13 = digestUtils1.digestAsHex(byteBuffer11);
        java.lang.String str15 = digestUtils1.digestAsHex("68f99a2f771f3830e1487a6aad4372fc28e3736eee4ed16fd02cf1bd47fe6224745ac0321f687d153a44c9875e5e53a2");
        java.lang.String str17 = digestUtils1.digestAsHex("FPFFTPTK11");
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str8, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str13, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "e2667789bc3e19747b371674259005584b7f9f51241fbebdb6b6aaebf77dc9cd16b99a3615230d8ba16bcf33f219e112" + "'", str15, "e2667789bc3e19747b371674259005584b7f9f51241fbebdb6b6aaebf77dc9cd16b99a3615230d8ba16bcf33f219e112");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "11d28c31c65926cb6fe98aa02cdcddc71bf3d9e28f39a780ef64083332aa535851d5df9fbcf61fee0d8d909aa1b46a9a" + "'", str17, "11d28c31c65926cb6fe98aa02cdcddc71bf3d9e28f39a780ef64083332aa535851d5df9fbcf61fee0d8d909aa1b46a9a");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        int int14 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 760066800 + "'", int14 == 760066800);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream4 = new org.apache.commons.codec.binary.Base16InputStream(inputStream1, false);
        byte[] byteArray6 = inputStream1.readNBytes(0);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray6);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str7, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        boolean boolean1 = org.apache.commons.codec.digest.DigestUtils.isAvailable("=?UTF-16LE?Q?C=00B=00D=00A=00F=00A=00?=");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        org.apache.commons.codec.binary.Base32 base32_2 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray8);
        java.lang.String str17 = base32_2.encodeToString(byteArray16);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray16);
        org.apache.commons.codec.digest.Blake3 blake3_19 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray16);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str17, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(blake3_19);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        long long2 = xXHash32_0.getValue();
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        long[] longArray8 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray4, 64, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_0.update(byteArray4, 0, 1971526657);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 0]");
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha1Hex("$apr1$8dWU1PBl$KBmfVpNhGotb/lbYG.5BQ0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "63a3fb212ff4d166f9f3bb4aa1a8bd753f1d4620" + "'", str1, "63a3fb212ff4d166f9f3bb4aa1a8bd753f1d4620");
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray5);
        xXHash32_1.update(byteArray7, (int) (byte) 10, (-690116322));
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray7);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteArray7);
        java.io.RandomAccessFile randomAccessFile14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, randomAccessFile14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[77, 68, 69, 120, 77, 68, 65, 120, 77, 68, 65]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.caverphone("$6$MCDDAW.J$ETWChr4..DhSrr2XaWwsRh8ETGyAe5gZYrceRVmyOTU3QiK1kQmn/1znY2E.8oXmr3fdUayd7V.pRtby.7NH11");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MKTWTKTSKS" + "'", str2, "MKTWTKTSKS");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        boolean boolean33 = org.apache.commons.codec.digest.HmacUtils.isAvailable(hmacAlgorithms0);
        boolean boolean34 = org.apache.commons.codec.digest.HmacUtils.isAvailable(hmacAlgorithms0);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset3 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex4 = new org.apache.commons.codec.binary.Hex(charset0);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray2);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest19);
        java.nio.ByteBuffer byteBuffer22 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest19, byteBuffer22);
        char[] charArray24 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray23);
        org.apache.commons.codec.binary.Hex.encodeHex(byteArray2, (int) (short) 1, (-1310417787), false, charArray24, 1708909655);
        byte[] byteArray27 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray24);
        byte[] byteArray28 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[18, 85, 49, 84, 49, 62, 75, -31]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.lang.String str4 = qCodec3.getDefaultCharset();
        java.lang.Object obj5 = null;
        java.lang.Object obj6 = qCodec3.decode(obj5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = qCodec3.encode("HmacSHA224", "57F9B5");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 57F9B5");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF-8" + "'", str4, "UTF-8");
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("SHA3-512");
        java.lang.String str3 = soundex1.encode("2838aff23b4cf8ebfdabfb490aadc883447f67bd8c5d455346bb9c8d6467e1d335ffeeaa21445ce1cdc9f95948818540");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "A5HA" + "'", str3, "A5HA");
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream0);
        byte[] byteArray3 = inputStream0.readAllBytes();
        byte[] byteArray4 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray4, 821153611);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str2, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_16BE;
        org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec(charset0);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator2 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) qCodec1);
        org.apache.commons.codec.language.MatchRatingApproachEncoder matchRatingApproachEncoder3 = new org.apache.commons.codec.language.MatchRatingApproachEncoder();
        java.lang.String str5 = matchRatingApproachEncoder3.encode("e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        java.lang.String str7 = matchRatingApproachEncoder3.encode("D0");
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.Object obj19 = matchRatingApproachEncoder3.encode((java.lang.Object) str18);
        java.lang.String str21 = matchRatingApproachEncoder3.encode("d769ec1a57fac1174c7731a9862103e8c34872272673d33161f4798a3a47f28e");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder22 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType23 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder22.setRuleType(ruleType23);
        org.apache.commons.codec.language.bm.NameType nameType25 = beiderMorseEncoder22.getNameType();
        beiderMorseEncoder22.setMaxPhonemes((int) (byte) 100);
        org.apache.commons.codec.language.bm.RuleType ruleType28 = beiderMorseEncoder22.getRuleType();
        java.lang.String str30 = beiderMorseEncoder22.encode("57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        java.lang.Object obj31 = matchRatingApproachEncoder3.encode((java.lang.Object) "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray34, inputStream35);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream37 = new org.apache.commons.codec.binary.Base64InputStream(inputStream35);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream37);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream37);
        byte[] byteArray40 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream37);
        byte[] byteArray42 = base64InputStream37.readNBytes((int) ' ');
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base64InputStream37);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex((java.io.InputStream) base64InputStream37);
        int int45 = stringEncoderComparator2.compare((java.lang.Object) matchRatingApproachEncoder3, (java.lang.Object) base64InputStream37);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "E99B98" + "'", str5, "E99B98");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "D0" + "'", str7, "D0");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "88D950" + "'", obj19, "88D950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "D76F28" + "'", str21, "D76F28");
        org.junit.Assert.assertTrue("'" + ruleType23 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType23.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType25 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType25.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType28 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType28.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "vdefadpkfbatvdaeaebbgdptkfbbp|vdefadpkfbatvdajaebbgdptkfbbp" + "'", str30, "vdefadpkfbatvdaeaebbgdptkfbbp|vdefadpkfbatvdajaebbgdptkfbbp");
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "57F9B5" + "'", obj31, "57F9B5");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str36, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str38, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str39, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str44, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray6);
        byte[] byteArray11 = hex2.decode(byteArray6);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms12 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet13 = null;
        byte[] byteArray15 = new byte[] { (byte) 100 };
        byte[] byteArray16 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet13, byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray16);
        javax.crypto.Mac mac18 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms12, byteArray17);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray24);
        java.lang.String str27 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray24, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray24);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray24);
        javax.crypto.Mac mac31 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms12, byteArray24);
        org.apache.commons.codec.binary.Base32 base32_33 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet34 = null;
        byte[] byteArray36 = new byte[] { (byte) 100 };
        byte[] byteArray37 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet34, byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray37);
        boolean boolean40 = base32_33.isInAlphabet(byteArray38, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str43 = base32_33.encodeAsString(byteArray42);
        org.apache.commons.codec.digest.HmacUtils hmacUtils44 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms12, byteArray42);
        java.nio.ByteBuffer byteBuffer46 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray47 = hmacUtils44.hmac(byteBuffer46);
        byte[] byteArray48 = hex2.decode(byteBuffer46);
        java.nio.charset.Charset charset49 = hex2.getCharset();
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms12 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms12.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str25, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str27, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AAAAAAA" + "'", str28, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str29, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str30, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ABUAA2IAEE======" + "'", str43, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(charset49);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512Hex("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "f12bc8007814e31bbc8bcad26b85b82b9b3c2b957308a6beee8b1f79139421ae05848d0d6f4e5081c72541fef9c08461f5be41ccfbeecefdc35cf474e320c65e" + "'", str1, "f12bc8007814e31bbc8bcad26b85b82b9b3c2b957308a6beee8b1f79139421ae05848d0d6f4e5081c72541fef9c08461f5be41ccfbeecefdc35cf474e320c65e");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.lang.Object obj6 = hex2.encode((java.lang.Object) byteArray5);
        java.lang.String str7 = hex2.getCharsetName();
        org.apache.commons.codec.binary.Hex hex8 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        char[] charArray14 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer11, true);
        byte[] byteArray15 = hex8.decode(byteBuffer11);
        byte[] byteArray16 = hex2.decode(byteBuffer11);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha512_256("08cbbefd7b26d3154a21bc6e1b5321a8c22c830337e001d4268209436634ecbc775f850edebd99c4f6e7917f1832ace43c52c5e4d4b15bf10bf8f455889d4628");
        byte[] byteArray19 = hex2.encode(byteArray18);
        byte[] byteArray21 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray22, inputStream23);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream26 = new org.apache.commons.codec.binary.Base64InputStream(inputStream23, true);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream27 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream26);
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray19, (java.io.InputStream) base64InputStream26);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF-8" + "'", str7, "UTF-8");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-104, 24, 98, -100, -27, 124, -42, -34, -10, 83, -68, 115, 71, -108, -2, -95, 2, 32, 108, -94, -40, -24, -30, 52, -113, -124, -50, 91, 31, -31, 35, -52]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[57, 56, 49, 56, 54, 50, 57, 99, 101, 53, 55, 99, 100, 54, 100, 101, 102, 54, 53, 51, 98, 99, 55, 51, 52, 55, 57, 52, 102, 101, 97, 49, 48, 50, 50, 48, 54, 99, 97, 50, 100, 56, 101, 56, 101, 50, 51, 52, 56, 102, 56, 52, 99, 101, 53, 98, 49, 102, 101, 49, 50, 51, 99, 99]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "503b3a46989615af9fa789e58cc74844" + "'", str28, "503b3a46989615af9fa789e58cc74844");
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md5("0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[59, -74, 71, -28, -60, -118, -34, 1, -111, -5, -108, 78, -97, 42, -63, 42]");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64("ISO-8859-1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, false);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray5);
        org.apache.commons.codec.net.PercentCodec percentCodec11 = new org.apache.commons.codec.net.PercentCodec(byteArray5, false);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec13 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray19);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray19);
        java.lang.Object obj26 = quotedPrintableCodec13.decode((java.lang.Object) byteArray19);
        java.lang.String str27 = quotedPrintableCodec13.getDefaultCharset();
        java.lang.String str28 = quotedPrintableCodec13.getDefaultCharset();
        java.lang.String str30 = quotedPrintableCodec13.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = percentCodec11.encode((java.lang.Object) "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type java.lang.String cannot be Percent encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A01640101" + "'", str8, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-113, 122, 46, 35, 4, 122, -60, 14, -44, 43, 101, 109, 74, -35, -124, -125, -17, 20, -70, 35, 38, -12, -60, 75, -124, 14, -124, -108, 60, 43, -6, -92]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str24, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str25, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTF-8" + "'", str27, "UTF-8");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTF-8" + "'", str28, "UTF-8");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str30, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary("75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        doubleMetaphoneResult4.appendPrimary('4');
        boolean boolean9 = doubleMetaphoneResult4.isComplete();
        java.lang.String str10 = doubleMetaphoneResult4.getPrimary();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a4" + "'", str10, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a4");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream31 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, true, codecPolicy30);
        boolean boolean32 = base64OutputStream1.isStrictDecoding();
        base64OutputStream1.close();
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType7 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet8 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap9 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType7, languageSet8);
        org.apache.commons.codec.language.bm.NameType nameType10 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang11 = org.apache.commons.codec.language.bm.Lang.instance(nameType10);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet13 = lang11.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet15 = lang11.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap16 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType7, languageSet15);
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder17 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType18 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder17.setRuleType(ruleType18);
        org.apache.commons.codec.language.bm.NameType nameType20 = beiderMorseEncoder17.getNameType();
        beiderMorseEncoder17.setMaxPhonemes((int) (byte) 100);
        org.apache.commons.codec.language.bm.RuleType ruleType23 = beiderMorseEncoder17.getRuleType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap25 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType23, "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for ash, exact, .");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType7 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType7.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + nameType10 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType10.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang11);
        org.junit.Assert.assertNotNull(languageSet13);
        org.junit.Assert.assertNotNull(languageSet15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + ruleType18 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType18.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType20 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType20.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType23 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType23.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream6 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        baseNCodecOutputStream4.flush();
        byte[] byteArray12 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("org.apache.commons.codec.EncoderException", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray14);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream19 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream16, false, false);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_23.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream25 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream16, false, true, codecPolicy24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream26 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream4, true, (int) 'a', byteArray14, codecPolicy24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [{??,???????M?y??x?&???!??g?'???x??_?????(??|]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[123, -52, -70, 4, 44, 20, -30, 19, -98, -42, -48, -37, 77, -68, 121, -20, -49, 120, 18, 38, -52, -102, -127, -67, 33, -121, -42, -83, 103, -35, 39, 28, -18, -18, 120, 25, -67, 95, -87, -2, -79, -14, -112, -12, 40, -32, -21, 124]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "5424b2ab9ccebb816efd952b70e18b77812c0fddba6b70e1b9dcce77" + "'", str15, "5424b2ab9ccebb816efd952b70e18b77812c0fddba6b70e1b9dcce77");
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream27);
        java.io.InputStream inputStream29 = java.io.InputStream.nullInputStream();
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream29);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray26, inputStream29);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream29);
        java.lang.String str34 = hmacUtils8.hmacHex(inputStream29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str41 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray40);
        java.lang.String str43 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray40, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray40);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray40);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray40);
        byte[] byteArray48 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        java.io.InputStream inputStream50 = java.io.InputStream.nullInputStream();
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray49, inputStream50);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream52 = new org.apache.commons.codec.binary.Base64InputStream(inputStream50);
        int int53 = base64InputStream52.available();
        byte[] byteArray54 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray40, (java.io.InputStream) base64InputStream52);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream57 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream52, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream58 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream57);
        java.lang.String str59 = hmacUtils8.hmacHex((java.io.InputStream) base16InputStream58);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream60 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base16InputStream58);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str28, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str30, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str31, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str32, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str34, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str41, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str43, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "AAAAAAA" + "'", str44, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str45, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str46, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str51, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str59, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_256("8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        int int3 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray1, 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-71, -85, 126, 13, -99, -78, 100, 42, -84, 71, 31, 45, -67, -103, -21, -75, 33, 116, 4, 94, 107, 11, 6, 27, 31, -74, 108, 29, -13, -54, -23, -106]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 275646681 + "'", int3 == 275646681);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[102, -66, 34, 5, 26, -57, 109, 67, -115, 42, 17, 64, -71, -46, 1, -65, 38, -28, -104, -126, -22, 45, -2, -61, 115, 14, -125, 91, 111, -91, 106, -44]");
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.toString();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = hex2.encode(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray6);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 100, 48, 101, 52, 99, 53, 101, 97, 102, 97, 55, 102, 49, 49, 50, 49, 97, 49, 57, 48, 53, 56, 51, 56, 54, 48, 56, 49, 52, 97, 50, 55, 57, 97, 53, 55, 101, 54, 101, 101, 53, 100, 48, 101, 51, 50, 54, 98, 57, 53, 53, 50, 55, 98, 50]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-117, 30, -48, 91, 44, 1, 26, 8, 23, -19, 81, 13, 74, 9, -102, 84, 85, 97, 3, 58, -23, -78, 89, -99, 2, 59, 10, -105, -42, -62, -117, 86]");
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray4 = quotedPrintableCodec1.decode(byteArray3);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy7 = null;
        org.apache.commons.codec.net.BCodec bCodec8 = new org.apache.commons.codec.net.BCodec(charset6, codecPolicy7);
        org.apache.commons.codec.net.QCodec qCodec9 = new org.apache.commons.codec.net.QCodec(charset6);
        java.nio.charset.Charset charset10 = qCodec9.getCharset();
        java.lang.String str11 = quotedPrintableCodec1.encode("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", charset10);
        org.apache.commons.codec.CodecPolicy codecPolicy12 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.net.BCodec bCodec13 = new org.apache.commons.codec.net.BCodec(charset10, codecPolicy12);
        java.nio.charset.Charset charset14 = bCodec13.getCharset();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0" + "'", str11, "$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0");
        org.junit.Assert.assertTrue("'" + codecPolicy12 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy12.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charset14);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: $apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0 MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        boolean boolean10 = phoneticEngine4.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType11 = phoneticEngine4.getNameType();
        org.apache.commons.codec.language.bm.NameType nameType13 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang14 = org.apache.commons.codec.language.bm.Lang.instance(nameType13);
        org.apache.commons.codec.language.bm.Languages languages15 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType13);
        org.apache.commons.codec.language.bm.RuleType ruleType16 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType17 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang18 = org.apache.commons.codec.language.bm.Lang.instance(nameType17);
        org.apache.commons.codec.language.bm.NameType nameType19 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder20 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType21 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder20.setRuleType(ruleType21);
        org.apache.commons.codec.language.bm.NameType nameType23 = beiderMorseEncoder20.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType24 = beiderMorseEncoder20.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet25 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap26 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType19, ruleType24, languageSet25);
        org.apache.commons.codec.language.bm.NameType nameType27 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang28 = org.apache.commons.codec.language.bm.Lang.instance(nameType27);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet30 = lang28.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet32 = lang28.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap33 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType17, ruleType24, languageSet32);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap34 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType13, ruleType16, languageSet32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = phoneticEngine4.encode("=?UTF-8?B?AGgAaQAh?=", languageSet32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(nameType11);
        org.junit.Assert.assertTrue("'" + nameType13 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType13.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang14);
        org.junit.Assert.assertNotNull(languages15);
        org.junit.Assert.assertTrue("'" + ruleType16 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType16.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType17 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType17.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang18);
        org.junit.Assert.assertTrue("'" + nameType19 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType19.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType21 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType21.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType23 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType23.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType24 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType24.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + nameType27 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType27.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang28);
        org.junit.Assert.assertNotNull(languageSet30);
        org.junit.Assert.assertNotNull(languageSet32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.lang.String str1 = hmacAlgorithms0.getName();
        java.lang.String str2 = hmacAlgorithms0.toString();
        org.apache.commons.codec.digest.HmacUtils hmacUtils4 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "c82c8ab22f3a62af4973396a2ad745b3");
        java.nio.ByteBuffer byteBuffer6 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray7 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6);
        char[] charArray9 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, false);
        byte[] byteArray10 = hmacUtils4.hmac(byteBuffer6);
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils12 = new org.apache.commons.codec.digest.DigestUtils(messageDigest11);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer15 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, byteBuffer15);
        char[] charArray18 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer15, true);
        java.lang.String str19 = digestUtils12.digestAsHex(byteBuffer15);
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer22 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, byteBuffer22);
        java.lang.String str24 = digestUtils12.digestAsHex(byteBuffer22);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream30 = new org.apache.commons.codec.binary.Base64InputStream(inputStream28);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream30);
        java.lang.String str32 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream30);
        long long34 = base64InputStream30.skip((long) ' ');
        base64InputStream30.mark((int) (short) 10);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream30);
        java.lang.String str38 = digestUtils12.digestAsHex((java.io.InputStream) base64InputStream30);
        java.lang.String str39 = hmacUtils4.hmacHex((java.io.InputStream) base64InputStream30);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HmacSHA224" + "'", str1, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HmacSHA224" + "'", str2, "HmacSHA224");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[45, 81, -92, 97, -13, -45, -92, 24, -106, -108, -68, -87, -56, 118, -108, 38, -43, -67, 47, -120, -53, -74, -102, 44, 114, 86, -85, -121]");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str19, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str24, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str31, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str32, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str37, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str38, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2d51a461f3d3a4189694bca9c8769426d5bd2f88cbb69a2c7256ab87" + "'", str39, "2d51a461f3d3a4189694bca9c8769426d5bd2f88cbb69a2c7256ab87");
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        java.nio.charset.Charset charset4 = hex2.getCharset();
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.lang.String str9 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray7, inputStream8);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream10 = new org.apache.commons.codec.binary.Base64InputStream(inputStream8);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream10);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream10);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha256Hex((java.io.InputStream) base64InputStream10);
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str18 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray17);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray17);
        java.nio.charset.Charset charset21 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base64_23.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec25 = new org.apache.commons.codec.net.BCodec(charset21, codecPolicy24);
        org.apache.commons.codec.binary.Base16 base16_26 = new org.apache.commons.codec.binary.Base16(false, codecPolicy24);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream27 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream10, true, 0, byteArray17, codecPolicy24);
        org.apache.commons.codec.net.BCodec bCodec28 = new org.apache.commons.codec.net.BCodec(charset4, codecPolicy24);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str9, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str11, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str12, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str13, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str18, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "a9c412bc47e545109e63db091b6ee4b3" + "'", str19, "a9c412bc47e545109e63db091b6ee4b3");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.String str2 = metaphone0.encode("9b9e60058fae476c9ee6ef8fc698d89e");
        java.lang.String str4 = metaphone0.metaphone("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        java.lang.String str6 = metaphone0.encode("=?UTF-8?Q?=00=00=00=00=00?=");
        boolean boolean9 = metaphone0.isMetaphoneEqual("8238313338121281838113", "$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
        metaphone0.setMaxCodeLen((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "BFKF" + "'", str2, "BFKF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BTFT" + "'", str4, "BTFT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TFK" + "'", str6, "TFK");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream2 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/");
        java.lang.String str2 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-71, 114, 16, 13, -65, 77, -38, 19, -106, -88, -23, -3, 104, 112, 100, -41, 30, 55, 121, -33]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u72b9\u0d10\u4dbf\u13da\ua896\ufde9\u7068\ud764\u371e\ufffd" + "'", str2, "\u72b9\u0d10\u4dbf\u13da\ua896\ufde9\u7068\ud764\u371e\ufffd");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.codec.language.DaitchMokotoffSoundex daitchMokotoffSoundex1 = new org.apache.commons.codec.language.DaitchMokotoffSoundex(true);
        java.lang.String str3 = daitchMokotoffSoundex1.encode("$apr1$J0I30QN7$1EzFGKmqRygQD56HGl2Jm1");
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest4, inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream5);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        java.io.InputStream inputStream12 = java.io.InputStream.nullInputStream();
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray11, inputStream12);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(inputStream12);
        byte[] byteArray15 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray8, inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = daitchMokotoffSoundex1.encode((java.lang.Object) inputStream12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "079564" + "'", str3, "079564");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str7, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str13, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" + "'", str14, "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[24, -9, 96, -66, 48, -95, 61, 42, 79, -23, -106, -65, 91, 112, -88, -79, -109, 89, 79, -16, 55, -111, 109, -68, 55, -73, -115, -32, 12, 14, -56, -52, 47, -70, -109, 106, 107, 114, 82, 106, 115, 121, -120, -10, 5, -93, 48, -128]");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex("a9c412bc47e545109e63db091b6ee4b3", "b3b51a915103729794e8b4d6d7b33e53");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "3e63e2f6a054d072a282f3f3b9c62af84abcf44224d3ba151a38be90d876a14d" + "'", str2, "3e63e2f6a054d072a282f3f3b9c62af84abcf44224d3ba151a38be90d876a14d");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms10 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet11 = null;
        byte[] byteArray13 = new byte[] { (byte) 100 };
        byte[] byteArray14 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray14);
        javax.crypto.Mac mac16 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray22);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray22);
        javax.crypto.Mac mac29 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms10, byteArray22);
        org.apache.commons.codec.binary.Base32 base32_31 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet32 = null;
        byte[] byteArray34 = new byte[] { (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet32, byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray35);
        boolean boolean38 = base32_31.isInAlphabet(byteArray36, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str41 = base32_31.encodeAsString(byteArray40);
        org.apache.commons.codec.digest.HmacUtils hmacUtils42 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms10, byteArray40);
        java.nio.ByteBuffer byteBuffer44 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray45 = hmacUtils42.hmac(byteBuffer44);
        byte[] byteArray47 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        java.lang.String str48 = hmacUtils42.hmacHex(byteArray47);
        byte[] byteArray49 = null;
        java.lang.String str50 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray47, byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_0.update(byteArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms10 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms10.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac16);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str27, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str28, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ABUAA2IAEE======" + "'", str41, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4" + "'", str48, "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "35e26ec08c0f17ddef19ce66ae4ca70ebaf5b129235ce2f89386aeaa53e326067f33d248a16cabf0013a1e0b055d4c2c" + "'", str50, "35e26ec08c0f17ddef19ce66ae4ca70ebaf5b129235ce2f89386aeaa53e326067f33d248a16cabf0013a1e0b055d4c2c");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer13 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest11, byteBuffer13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest10, byteBuffer13);
        char[] charArray17 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray15, false);
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex18 = new org.apache.commons.codec.language.RefinedSoundex(charArray17);
        java.lang.String str20 = refinedSoundex18.soundex("HmacMD5");
        java.lang.String str22 = refinedSoundex18.soundex("IS8591");
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[0, C, 6, 3, A, 7, 5, B, 8, 4, 5, E, 4, F, 7, D, 0, 1, 1, 0, 7, D, 8, 5, 2, E, 4, C, 2, 4, 8, 5, C, 5, 1, A, 5, 0, A, A, A, A, 9, 4, F, C, 6, 1, 9, 9, 5, E, 7, 1, B, B, E, E, 9, 8, 3, A, 2, A, C, 3, 7, 1, 3, 8, 3, 1, 2, 6, 4, A, D, B, 4, 7, F, B, 6, B, D, 1, E, 0, 5, 8, D, 5, F, 0, 0, 4]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "HB40643" + "'", str20, "HB40643");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "I81" + "'", str22, "I81");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        byte[] byteArray22 = uRLCodec15.decode(byteArray19);
        byte[] byteArray23 = null;
        byte[] byteArray24 = uRLCodec15.decode(byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_34 = new org.apache.commons.codec.binary.Base16();
        boolean boolean36 = base16_34.isInAlphabet("AAAAAAA");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str42 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray40, true);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray40);
        boolean boolean45 = base16_34.isInAlphabet(byteArray40, true);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, byteArray40);
        byte[] byteArray47 = uRLCodec15.encode(byteArray46);
        blake3_13.doFinalize(byteArray47);
        org.apache.commons.codec.net.URLCodec uRLCodec50 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str51 = uRLCodec50.getEncoding();
        java.security.MessageDigest messageDigest52 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream53 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest54 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest52, inputStream53);
        java.lang.String str55 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream53);
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream53);
        java.io.InputStream inputStream57 = java.io.InputStream.nullInputStream();
        java.lang.String str58 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream57);
        byte[] byteArray59 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray56, inputStream57);
        byte[] byteArray60 = uRLCodec50.encode(byteArray56);
        blake3_13.doFinalize(byteArray56);
        blake3_13.reset();
        byte[] byteArray64 = blake3_13.doFinalize(0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str21, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ffffff" + "'", str42, "ffffff");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str43, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str51, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertNotNull(messageDigest52);
        org.junit.Assert.assertEquals(messageDigest52.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream53);
        org.junit.Assert.assertNotNull(messageDigest54);
        org.junit.Assert.assertEquals(messageDigest54.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str55, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40]");
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str58, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[56, 37, 66, 48, 37, 54, 48, 37, 65, 55, 81, 37, 65, 67, 37, 57, 54, 56, 76, 37, 68, 57, 50, 37, 55, 69, 37, 66, 49, 37, 66, 49, 37, 69, 51, 106, 37, 50, 49, 37, 70, 68, 37, 66, 55, 37, 49, 49, 37, 49, 52, 37, 66, 69, 37, 48, 55, 67, 76, 37, 48, 67, 37, 67, 55, 37, 66, 70, 99, 37, 70, 54, 37, 69, 49, 37, 68, 65, 37, 50, 55, 78, 37, 68, 69, 37, 66, 70, 37, 69, 55, 111, 101, 37, 70, 66, 37, 68, 53, 37, 49, 65, 37, 68, 50, 37, 70, 49, 72, 37, 57, 56, 37, 66, 57, 37, 53, 66]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream23);
        byte[] byteArray25 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, inputStream23);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream23);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream28 = new org.apache.commons.codec.binary.Base16InputStream(inputStream23, false);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(inputStream23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str24, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str29, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getSha512_224Digest();
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest9, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_17 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy18 = base32_17.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream19 = new org.apache.commons.codec.binary.Base32InputStream(inputStream3, true, (int) (byte) 0, byteArray15, codecPolicy18);
        base32InputStream19.mark((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = base32InputStream19.skip((long) (-755363659));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative skip length: -755363659");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512/224 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -46, 89, 81, 20, -27, -60, 90, -119, 111, 52, -127, -69, 99, -25, 9, 127, -97, 16, 111, -45, 89, 28, 30, 55, -61, 15, -18]");
        org.junit.Assert.assertTrue("'" + codecPolicy18 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy18.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary("75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        doubleMetaphoneResult4.appendAlternate("HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
        java.lang.String str9 = doubleMetaphoneResult4.getAlternate();
        doubleMetaphoneResult4.append('4', 'a');
        doubleMetaphoneResult4.append("57F9B5", "414141414141413d0d0a");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===" + "'", str9, "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384("41c1f4d55467abb3132b7842c05b7b61c7a88b7318e7e38f587f71bb");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-118, -12, 109, -94, 45, -65, 3, 49, -4, -93, 25, -29, -15, 101, 12, -81, 32, -82, 0, 116, 106, -46, 14, 114, 105, -50, -89, -39, 18, 102, 91, 70, 29, -93, 87, -15, 71, 16, 21, -66, -45, 1, 112, -127, 95, 109, 111, -103]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Le(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u83cf\u35e1\uef7e\ubdb8\u54f1\u5028\u6dd6\u0780\u20d6\u05e4\u570b\ufffd\uf483\u21a9\u6cd3\ucee9\ud047\u3cd1\u855d\ub0f2\u83ff\ud218\u7e87\u2fec\ub963\ubd31\u4147\u817a\u38a5\u7a32\u27f9\u3eda" + "'", str7, "\u83cf\u35e1\uef7e\ubdb8\u54f1\u5028\u6dd6\u0780\u20d6\u05e4\u570b\ufffd\uf483\u21a9\u6cd3\ucee9\ud047\u3cd1\u855d\ub0f2\u83ff\ud218\u7e87\u2fec\ub963\ubd31\u4147\u817a\u38a5\u7a32\u27f9\u3eda");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str16 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.nio.charset.Charset charset20 = org.apache.commons.codec.Charsets.UTF_16BE;
        java.lang.String str21 = quotedPrintableCodec1.encode("00001010000011010110100001000001010100010110000101000001011001110100011101000001", charset20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = quotedPrintableCodec1.encode("$apr1$1842668b$BrmPcGnFkkmpTlWyJGSdY/", "=?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: =?UTF-8?B?OWU5NGQ0MGRiMTVmZWE0OTk1ZmQwODMzZDU4NjlkZGJmMTI3Mzk1YmY3N2YwOWExNzE0ZTA1Y2U2MzBmNzUzNzc5MDVkNzUzMTgzMWYxNmVmOWFkYjRlOWI4MzQ1Y2Iz?=");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTF-8" + "'", str16, "UTF-8");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001" + "'", str21, "=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("\000\ufffd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: ?? MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        org.apache.commons.codec.digest.HmacUtils hmacUtils11 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream12 = null;
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream18 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, true, (int) (byte) 0, byteArray16, codecPolicy17);
        char[] charArray19 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray16);
        java.lang.String str20 = hmacUtils11.hmacHex(byteArray16);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream22);
        java.lang.String str26 = hmacUtils11.hmacHex(inputStream22);
        org.apache.commons.codec.digest.XXHash32 xXHash32_28 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_28.reset();
        org.apache.commons.codec.binary.Hex hex30 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer33 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest31, byteBuffer33);
        char[] charArray36 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer33, true);
        byte[] byteArray37 = hex30.decode(byteBuffer33);
        xXHash32_28.update(byteBuffer33);
        byte[] byteArray39 = hmacUtils11.hmac(byteBuffer33);
        java.lang.String str40 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer33);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteBuffer33);
        org.apache.commons.codec.digest.DigestUtils digestUtils42 = new org.apache.commons.codec.digest.DigestUtils(messageDigest41);
        java.nio.file.Path path43 = null;
        java.nio.file.OpenOption[] openOptionArray44 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = digestUtils42.digestAsHex(path43, openOptionArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str20, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str26, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(openOptionArray44);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        doubleMetaphone0.setMaxCodeLen((int) (byte) 10);
        java.lang.String str10 = doubleMetaphone0.doubleMetaphone("org.apache.commons.codec.EncoderException: 49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ARKPXKMNSK" + "'", str10, "ARKPXKMNSK");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator0 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator1 = phonemeComparator0.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator2 = phonemeComparator0.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator3 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator4 = phonemeComparator3.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator5 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator6 = phonemeComparator5.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator7 = phonemeComparator3.thenComparing(phonemeComparator5);
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator8 = phonemeComparator0.thenComparing(phonemeComparator5);
        org.junit.Assert.assertNotNull(phonemeComparator0);
        org.junit.Assert.assertNotNull(phonemeComparator1);
        org.junit.Assert.assertNotNull(phonemeComparator2);
        org.junit.Assert.assertNotNull(phonemeComparator3);
        org.junit.Assert.assertNotNull(phonemeComparator4);
        org.junit.Assert.assertNotNull(phonemeComparator5);
        org.junit.Assert.assertNotNull(phonemeComparator6);
        org.junit.Assert.assertNotNull(phonemeComparator7);
        org.junit.Assert.assertNotNull(phonemeComparator8);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Lang lang2 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages languages3 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType0);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(lang2);
        org.junit.Assert.assertNotNull(languages3);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.nio.charset.Charset charset5 = qCodec3.getCharset();
        java.lang.Object obj6 = null;
        java.lang.Object obj7 = qCodec3.encode(obj6);
        java.nio.charset.Charset charset8 = qCodec3.getCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.nio.charset.Charset charset16 = quotedPrintableCodec1.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = quotedPrintableCodec1.decode("0010000O00002===");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Invalid URL encoding: not a valid digit (radix 16): 61");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(charset16);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (byte) 1, 1164493051);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1745848163 + "'", int2 == 1745848163);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern6 = rule4.getLContext();
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertNotNull(rPattern6);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_9 = new org.apache.commons.codec.binary.Base16();
        boolean boolean11 = base16_9.isInAlphabet("AAAAAAA");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str17 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray15, true);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray15);
        boolean boolean20 = base16_9.isInAlphabet(byteArray15, true);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray5, byteArray15);
        java.io.OutputStream outputStream22 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream23 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream22);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec27 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray33);
        java.lang.String str36 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray33, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray33);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray33);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray33);
        java.lang.Object obj40 = quotedPrintableCodec27.decode((java.lang.Object) byteArray33);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream41 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream23, true, 1, byteArray33);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray15, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray33, "b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ffffff" + "'", str17, "ffffff");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str18, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(outputStream22);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str36, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AAAAAAA" + "'", str37, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str38, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str39, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9b9e60058fae476c9ee6ef8fc698d89e" + "'", str42, "9b9e60058fae476c9ee6ef8fc698d89e");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, true);
        base64OutputStream4.write(byteArray8);
        java.io.InputStream inputStream12 = null;
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream18 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, true, (int) (byte) 0, byteArray16, codecPolicy17);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray8, byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray2, byteArray19);
        int int23 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray2, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ffffff" + "'", str10, "ffffff");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-16, 37, -57, -63, -51, -9, 13, 75, 7, 89, 117, -3, 104, -53, 16, -29]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, -41, 80, -109, -39, -116, 43, -105, -83, -45, -5, 83, -89, 13, -41, -5, 61, -89, 106, 99, -118, -45, 112, -64, -32, 63, 0, 5, 16, -126, -126, -119, 29, 33, -25, -80, 44, -86, -52, -97, -32, 115, -90, -74, -37, -41, -98, 109, -80, -99, -117, 79, 97, -1, 100, 11, 92, 125, 83, 104, -27, -105, 61, -112]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-62, -73, 94, 95, -21, 62, -2, -33, -91, -111, -82, 64, -31, 35, -124, 69, 31, 53, 66, 43, 100, 1, -112, -30, 112, 14, -28, 71, -80, 47, -26, 45, -91, 59, -92, -28, 119, 72, 115, 97, -106, -102, 74, -29, -39, -81, -93, 14, -118, 34, -112, -111, 110, -90, 55, 75, 94, 87, -48, 79, 96, 109, 127, 3]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-965378730) + "'", int23 == (-965378730));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        org.apache.commons.codec.language.bm.Lang lang6 = phoneticEngine4.getLang();
        int int7 = phoneticEngine4.getMaxPhonemes();
        int int8 = phoneticEngine4.getMaxPhonemes();
        int int9 = phoneticEngine4.getMaxPhonemes();
        int int10 = phoneticEngine4.getMaxPhonemes();
        org.apache.commons.codec.language.bm.NameType nameType11 = phoneticEngine4.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType12 = phoneticEngine4.getRuleType();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertNull(lang6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(nameType11);
        org.junit.Assert.assertNull(ruleType12);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str1, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray5);
        xXHash32_1.update(byteArray7, (int) (byte) 10, (-690116322));
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray7);
        org.apache.commons.codec.net.PercentCodec percentCodec13 = new org.apache.commons.codec.net.PercentCodec(byteArray7, false);
        byte[] byteArray14 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-83, -62, 19, 121, -37, 7, 119, 76, -32, 12, 96, -74, 10, 111, 103, 98, -38, 29, 126, 110, -35, -34, -15, -19, 65, -3, 73, -108, -110, -61, -9, 111]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[48, 49, 49, 48, 48, 49, 48, 48]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.nio.charset.Charset charset0 = null;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = quotedPrintableCodec1.encode("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset8 = bCodec2.getCharset();
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator9 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) bCodec2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = bCodec2.encode("11d28c31c65926cb6fe98aa02cdcddc71bf3d9e28f39a780ef64083332aa535851d5df9fbcf61fee0d8d909aa1b46a9a", "=?UTF-8?B?JGFwcjEkOXl0bjk2RmYkdkV4RUFzZEMwMlJjNmxCRkMycEh4Lw==?=");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: =?UTF-8?B?JGFwcjEkOXl0bjk2RmYkdkV4RUFzZEMwMlJjNmxCRkMycEh4Lw==?=");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        long long2 = xXHash32_0.getValue();
        xXHash32_0.reset();
        xXHash32_0.update((int) ' ');
        java.io.OutputStream outputStream6 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream7 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream6);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream9 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream7, true);
        base64OutputStream7.write((int) (short) 100);
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32(true);
        org.apache.commons.codec.net.PercentCodec percentCodec14 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray15 = null;
        byte[] byteArray16 = percentCodec14.encode(byteArray15);
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray20 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet17, byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        byte[] byteArray23 = percentCodec14.decode(byteArray19);
        boolean boolean25 = base32_13.isInAlphabet(byteArray23, true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream27 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base64OutputStream7, (org.apache.commons.codec.binary.BaseNCodec) base32_13, true);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha512_256("");
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray29);
        char[] charArray31 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(charArray31);
        java.lang.String str33 = base32_13.encodeToString(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_0.update(byteArray32, 0, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: last source index 15 out of bounds for byte[8]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(outputStream6);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str21, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[32, -39, 31, 96, 101, 120, 98, 8, 87, 108, -31, 27, -25, -104, 91, 41, -2, 73, 60, -32, -6, 38, 39, 78, -25, 113, -31, -42, -88, 16, 47, 41]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[c, 6, 7, 2, b, 8, d, 1, e, f, 5, 6, e, d, 2, 8, a, b, 8, 7, c, 3, 6, 2, 2, c, 5, 1, 1, 4, 0, 6, 9, b, d, d, 3, a, d, 7, b, 8, f, 9, 7, 3, 7, 4, 9, 8, d, 0, c, 0, 1, e, c, e, f, 0, 9, 6, 7, a]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 2, 0, 0, 24, 0, 0, 1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0010000O00002===" + "'", str33, "0010000O00002===");
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy3 = base64_2.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(false, codecPolicy3);
        boolean boolean6 = base16_4.isInAlphabet((byte) 100);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str19 = org.apache.commons.codec.digest.Crypt.crypt(byteArray12, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec21 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        byte[] byteArray27 = uRLCodec21.encode(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray12, byteArray26);
        byte[] byteArray29 = base16_4.encode(byteArray12);
        org.junit.Assert.assertTrue("'" + codecPolicy3 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy3.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0Acd8L3u4hVxI" + "'", str19, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str28, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[48, 48, 48, 48, 48, 48, 48, 48, 48, 48]");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.codec.binary.Hex hex0 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils2 = new org.apache.commons.codec.digest.DigestUtils(messageDigest1);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer5 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, byteBuffer5);
        char[] charArray8 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer5, true);
        java.lang.String str9 = digestUtils2.digestAsHex(byteBuffer5);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer12 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, byteBuffer12);
        java.lang.String str14 = digestUtils2.digestAsHex(byteBuffer12);
        byte[] byteArray16 = digestUtils2.digest("=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms17 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms17, byteArray22);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray29);
        java.lang.String str32 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray29, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray29);
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray29);
        javax.crypto.Mac mac36 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms17, byteArray29);
        java.lang.String str37 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray29);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream39);
        byte[] byteArray42 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        java.io.InputStream inputStream44 = java.io.InputStream.nullInputStream();
        java.lang.String str45 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray43, inputStream44);
        java.io.InputStream inputStream46 = java.io.InputStream.nullInputStream();
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream46);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream46);
        java.lang.String str49 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray43, inputStream46);
        java.security.MessageDigest messageDigest50 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream46);
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray29, inputStream46);
        java.lang.String str52 = digestUtils2.digestAsHex(inputStream46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = hex0.decode((java.lang.Object) inputStream46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: class java.io.InputStream$1 cannot be cast to class [C (java.io.InputStream$1 and [C are in module java.base of loader 'bootstrap')");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str9, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str14, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[117, -63, -111, 75, 14, 58, 37, -68, -35, 109, 41, -39, -7, -37, -126, 3, 5, 126, -57, 103, -90, -72, 1, 79, 61, -47, 58, -35, -97, -107, -117, -88, -39, 81, -74, 118, 94, 14, 42, -118, 50, -57, 40, -119, -58, -47, -83, 68]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms17 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms17.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str32, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AAAAAAA" + "'", str33, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str34, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str35, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\000\000\000\000\000" + "'", str37, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(messageDigest40);
        org.junit.Assert.assertEquals(messageDigest40.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str45, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str47, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str48, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str49, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(messageDigest50);
        org.junit.Assert.assertEquals(messageDigest50.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str51, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str52, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        java.lang.String str2 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream0);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream0);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream5 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, false);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md2((java.io.InputStream) base32InputStream5);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray6, (-488200341), 1137768543);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -488200341 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str2, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream2);
        java.io.InputStream inputStream6 = java.io.InputStream.nullInputStream();
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream6);
        byte[] byteArray8 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray5, inputStream6);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream15 = new org.apache.commons.codec.binary.Base64InputStream(inputStream13);
        int int16 = base64InputStream15.available();
        byte[] byteArray17 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base64InputStream15);
        boolean boolean18 = base64InputStream15.markSupported();
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, (java.io.InputStream) base64InputStream15);
        org.apache.commons.codec.binary.Base32 base32_23 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_23.getCodecPolicy();
        org.apache.commons.codec.binary.Base16InputStream base16InputStream25 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream15, false, false, codecPolicy24);
        org.apache.commons.codec.binary.Base16 base16_26 = new org.apache.commons.codec.binary.Base16(true, codecPolicy24);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str7, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[54, 1, -50, 89, 36, 42, 85, -97, 21, 43, 26, 65, -114, -41, 34, -122, 36, -30, 105, -40, 88, -37, -64, 39, 47, 32, -10, 55, -105, -111, -65, 41]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "18f760be30a13d2a4fe996bf5b70a8b193594ff037916dbc37b78de00c0ec8cc2fba936a6b72526a737988f605a33080" + "'", str19, "18f760be30a13d2a4fe996bf5b70a8b193594ff037916dbc37b78de00c0ec8cc2fba936a6b72526a737988f605a33080");
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) 0);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha384((java.io.InputStream) base64InputStream5);
        byte[] byteArray10 = base64InputStream5.readNBytes((int) ' ');
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base64InputStream5);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex((java.io.InputStream) base64InputStream5);
        java.security.MessageDigest messageDigest16 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest16, inputStream17);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream17);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream17);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_26 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = new byte[] { (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet27, byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray30);
        boolean boolean33 = base32_26.isInAlphabet(byteArray31, false);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = base32_26.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream35 = new org.apache.commons.codec.binary.Base32InputStream(inputStream17, false, (-965378730), byteArray24, codecPolicy34);
        org.apache.commons.codec.binary.Base16 base16_36 = new org.apache.commons.codec.binary.Base16(true, codecPolicy34);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream37 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream5, true, false, codecPolicy34);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha512Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str12, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(messageDigest16);
        org.junit.Assert.assertEquals(messageDigest16.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str19, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str20, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str38, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray9 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream11 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, inputStream11);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream11);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream11);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_20 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet21 = null;
        byte[] byteArray23 = new byte[] { (byte) 100 };
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet21, byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray24);
        boolean boolean27 = base32_20.isInAlphabet(byteArray25, false);
        org.apache.commons.codec.CodecPolicy codecPolicy28 = base32_20.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream29 = new org.apache.commons.codec.binary.Base32InputStream(inputStream11, false, (-965378730), byteArray18, codecPolicy28);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream31 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base32InputStream29, false);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray8, (java.io.InputStream) base32InputStream31);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.sha3_256((java.io.InputStream) base32InputStream31);
        byte[] byteArray35 = org.apache.commons.codec.digest.DigestUtils.sha384("074144668286427481268138212338282381323183123");
        int int36 = base32InputStream31.read(byteArray35);
        javax.crypto.Mac mac37 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray35);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str13, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str14, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy28 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy28.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-11, -28, -76, -63, -66, 3, -93, -25, 111, -5, 6, -115, 6, -97, 60, 21]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-89, -1, -58, -8, -65, 30, -41, 102, 81, -63, 71, 86, -96, 97, -42, 98, -11, -128, -1, 77, -28, 59, 73, -6, -126, -40, 10, 75, -128, -8, 67, 74]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[22, -78, 17, -24, -60, 35, 8, -107, 32, 19, -102, 96, -106, 36, 9, -119, 33, -84, -25, -82, 69, -39, -68, -44, -5, -105, -84, -72, 4, 77, -125, 62, 37, 100, -93, 0, -115, 24, -88, 10, -30, -8, -27, -88, -70, -74, -83, -86]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(mac37);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        java.lang.String str19 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str22 = quotedPrintableCodec5.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        int int31 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray29);
        byte[] byteArray32 = quotedPrintableCodec5.encode(byteArray29);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray32, true, (byte) -1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.digest.Blake3.hash(byteArray43);
        byte[] byteArray52 = base32_35.decode(byteArray51);
        blake3_2.doFinalize(byteArray51);
        blake3_2.reset();
        byte[] byteArray56 = blake3_2.doFinalize(0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_2);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTF-8" + "'", str19, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF-8" + "'", str20, "UTF-8");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-690116322) + "'", int31 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19, 28, -28, 68, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, -67, -41, -113, 95]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.lang.String str2 = org.apache.commons.codec.digest.Crypt.crypt("0010000O00002===", "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "25NkRuWRhBE52" + "'", str2, "25NkRuWRhBE52");
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((short) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-4990115743174713622L) + "'", long1 == (-4990115743174713622L));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.digest.HmacUtils hmacUtils21 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.util.BitSet bitSet22 = null;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray28, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray28);
        java.lang.String str35 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray28);
        byte[] byteArray37 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray38, inputStream39);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream41 = new org.apache.commons.codec.binary.Base64InputStream(inputStream39);
        java.lang.String str42 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream39);
        java.lang.String str43 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray28, inputStream39);
        byte[] byteArray44 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray28);
        byte[] byteArray45 = hmacUtils21.hmac(byteArray44);
        java.security.MessageDigest messageDigest46 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream47 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest48 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest46, inputStream47);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream47);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream47);
        byte[] byteArray51 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream47);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream53 = new org.apache.commons.codec.binary.Base64InputStream(inputStream47, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("ABUAA2IAEE======");
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray55);
        java.lang.String str57 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(byteArray56);
        int int58 = base64InputStream53.read(byteArray56);
        java.lang.String str59 = hmacUtils21.hmacHex((java.io.InputStream) base64InputStream53);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str29, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str31, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AAAAAAA" + "'", str32, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str33, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str34, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\000\000\000\000\000" + "'", str35, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str40, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str42, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str43, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[61, 48, 48, 61, 48, 48, 61, 48, 48, 61, 48, 48, 61, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[88, -110, -83, -58, 49, -109, 10, -118, -108, -12, 60, -30, 17, -84, -17, 116, -94, -30, -12, 4, -110, -1, -77, 48, 76, 48, 94, 56]");
        org.junit.Assert.assertNotNull(messageDigest46);
        org.junit.Assert.assertEquals(messageDigest46.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertNotNull(messageDigest48);
        org.junit.Assert.assertEquals(messageDigest48.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str49, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 66, 85, 65, 65, 50, 73, 65, 69, 69, 61, 61, 61, 61, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, -90, -97, -54, 36, -31, 6, -35, -93, 46, 55, 97, 67, -33, -90, 13, 70, 71, 10, -74, -99, 44, 47, -11, 3, 8, -16, -99, -101, 58, -107, 51]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7" + "'", str57, "964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b" + "'", str59, "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("sep");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 115, 0, 101, 0, 112]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray5);
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        java.io.InputStream inputStream15 = java.io.InputStream.nullInputStream();
        java.lang.String str16 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray14, inputStream15);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream17 = new org.apache.commons.codec.binary.Base64InputStream(inputStream15);
        int int18 = base64InputStream17.available();
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray5, (java.io.InputStream) base64InputStream17);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha512_224((java.io.InputStream) base64InputStream17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str11, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str16, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        // The following exception was thrown during execution in test generation
        try {
            java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getDigest("ab58a8ecd617b254b3bfc56ff14d5a91d6b42d26a5b0a13d1caa38fbca4cef66");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: ab58a8ecd617b254b3bfc56ff14d5a91d6b42d26a5b0a13d1caa38fbca4cef66 MessageDigest not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("UTF-16BE", true);
        java.lang.String str4 = soundex2.encode("3D38323D30413D45423D43383D44313D45342C3D43393D31353D46313D3030793D38343D45313D44373D45323D3137253D31312A3D33443D4433473D30343D44343D39443D43393D4238");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DFU0" + "'", str4, "DFU0");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex("9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "83d1ac2df5cff7121dccd9ff984b4204f93ad4725ea94dc09739c0cb4465089c" + "'", str1, "83d1ac2df5cff7121dccd9ff984b4204f93ad4725ea94dc09739c0cb4465089c");
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        byte[] byteArray22 = uRLCodec15.decode(byteArray19);
        byte[] byteArray23 = null;
        byte[] byteArray24 = uRLCodec15.decode(byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_34 = new org.apache.commons.codec.binary.Base16();
        boolean boolean36 = base16_34.isInAlphabet("AAAAAAA");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str42 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray40, true);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray40);
        boolean boolean45 = base16_34.isInAlphabet(byteArray40, true);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, byteArray40);
        byte[] byteArray47 = uRLCodec15.encode(byteArray46);
        blake3_13.doFinalize(byteArray47);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec50 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray52 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray53 = quotedPrintableCodec50.decode(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            blake3_13.doFinalize(byteArray54, 76, 1595328082);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Offset 76 and length 1595328082 out of bounds with buffer length 64");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str21, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ffffff" + "'", str42, "ffffff");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str43, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-99, -27, -26, -111, -37, 38, 18, -9, -51, -106, -32, -97, 79, -83, -73, -96, 116, 65, 41, -78, 73, -74, 18, 53, 118, 65, 81, -40, 107, -19, -14, -116, -53, 58, -118, -104, 115, 33, 74, -125, -34, -110, -53, -111, 4, -4, -76, 111, -14, 110, -87, 114, 91, 53, 81, -11, -100, 98, 30, -110, 42, 106, -37, -77]");
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        boolean boolean5 = doubleMetaphoneResult4.isComplete();
        doubleMetaphoneResult4.append('a', '4');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.codec.language.Metaphone metaphone0 = new org.apache.commons.codec.language.Metaphone();
        java.lang.Object obj2 = metaphone0.encode((java.lang.Object) "$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/");
        boolean boolean5 = metaphone0.isMetaphoneEqual("$apr1$75da6acc$oyNM9tBh8syHhbU1A.bBA.", "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        int int6 = metaphone0.getMaxCodeLen();
        metaphone0.setMaxCodeLen((-1310417787));
        org.junit.Assert.assertEquals("'" + obj2 + "' != '" + "PRSK" + "'", obj2, "PRSK");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[48, 99, 54, 51, 97, 55, 53, 98, 56, 52, 53, 101, 52, 102, 55, 100, 48, 49, 49, 48, 55, 100, 56, 53, 50, 101, 52, 99, 50, 52, 56, 53, 99, 53, 49, 97, 53, 48, 97, 97, 97, 97, 57, 52, 102, 99, 54, 49, 57, 57, 53, 101, 55, 49, 98, 98, 101, 101, 57, 56, 51, 97, 50, 97, 99, 51, 55, 49, 51, 56, 51, 49, 50, 54, 52, 97, 100, 98, 52, 55, 102, 98, 54, 98, 100, 49, 101, 48, 53, 56, 100, 53, 102, 48, 48, 52]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream24);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream24);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray22, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str26, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, 71, 108, -2, -39, 32, -105, -28, -46, 120, 125, 64, -100, 82, 88, 109]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary("75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        doubleMetaphoneResult4.appendAlternate("HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
        java.lang.String str9 = doubleMetaphoneResult4.getAlternate();
        doubleMetaphoneResult4.append('4', 'a');
        doubleMetaphoneResult4.appendPrimary("63a1f2e3e54d95691b19fe5345d3a8328ed2219d984ca4db3695f023c8b4db19");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===" + "'", str9, "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        java.io.InputStream inputStream26 = java.io.InputStream.nullInputStream();
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream26);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray8, inputStream26);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream26);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream26, false);
        java.lang.String str32 = hmacUtils2.hmacHex(inputStream26);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream34 = new org.apache.commons.codec.binary.Base64InputStream(inputStream26, true);
        boolean boolean35 = base64InputStream34.markSupported();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.md5Hex((java.io.InputStream) base64InputStream34);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str27, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "a9580121fcdd7da9ddacbfbdf9d824ea" + "'", str32, "a9580121fcdd7da9ddacbfbdf9d824ea");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str36, "d41d8cd98f00b204e9800998ecf8427e");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5("org.apache.commons.codec.EncoderException", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        boolean boolean3 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray2, 1, (-1642666625), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1642666625 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-52, -57, 74, -6, 47, 76, -27, -67, -45, 6, -86, 70, -26, -31, -14, -84]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.codec.net.QCodec qCodec0 = new org.apache.commons.codec.net.QCodec();
        java.nio.charset.Charset charset2 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        org.apache.commons.codec.net.BCodec bCodec4 = new org.apache.commons.codec.net.BCodec(charset2, codecPolicy3);
        org.apache.commons.codec.net.QCodec qCodec5 = new org.apache.commons.codec.net.QCodec(charset2);
        java.nio.charset.Charset charset6 = qCodec5.getCharset();
        java.nio.charset.Charset charset7 = qCodec5.getCharset();
        java.lang.String str8 = qCodec0.encode("67702a0ed25a50c46fc0a0fb46a6dfbf5333c9dc25451abdb1eeac93f1e968d5", charset7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = qCodec0.decode("$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "=?UTF-8?Q?67702a0ed25a50c46fc0a0fb46a6dfbf5333c9dc25451abdb1eeac93f1e968d5?=" + "'", str8, "=?UTF-8?Q?67702a0ed25a50c46fc0a0fb46a6dfbf5333c9dc25451abdb1eeac93f1e968d5?=");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        boolean boolean8 = rule4.patternAndContextMatches((java.lang.CharSequence) "=?UTF-8?B?U0hBLTIyNA==?=", 100);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern9 = rule4.getRContext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = rule4.patternAndContextMatches((java.lang.CharSequence) "QE/cRmw971eow", (-2042891860));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Can not match pattern at negative indexes");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(rPattern9);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512("964b3fb343f00f2d7b965c70cac0d28238933498e402d8b42dc7cd7adc56d5c7");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[101, 126, -66, 113, -1, -69, 109, 109, 6, -109, 32, -81, -109, 8, -103, 15, 96, 28, -26, -98, 17, 7, 125, -93, 48, -39, 63, 10, -19, -119, -111, -30, -120, -66, -97, 50, 117, -82, 17, 25, -23, -42, 103, -121, -92, 45, -42, -2, 68, 95, -88, 111, -126, -74, 24, -33, -44, -101, -109, 52, -73, -97, 57, -22]");
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        boolean boolean2 = nysiis1.isStrict();
        boolean boolean3 = nysiis1.isStrict();
        boolean boolean4 = nysiis1.isStrict();
        java.lang.String str6 = nysiis1.encode("kabevdegdZafkebbeadZadpfbbdetf|kabevdegdZafkebbeakadpfbbdetf|kabevdegdZavdZebbeadZadpfbbdetf|kabevdegdZavdZebbeakadpfbbdetf|kabevdekafkebbajakadpfbbdetf|kabevdekafkebbeadZadpfbbdetf|kabevdekafkebbeakadpfbbdetf|kabevdekafkebbeatsadpfbbdetf|kabevdekafkebbiakadpfbbdetf|kabevdekaftsebbeakadpfbbdetf|kabevdekaftsebbeatsadpfbbdetf|kabevdekavdZebbeadZadpfbbdetf|kabevdekavdZebbeakadpfbbdetf|kabevdektsafkebbeakadpfbbdetf|kabevdektsafkebbeatsadpfbbdetf|kabevdektsaftsebbeakadpfbbdetf|kabevdektsaftsebbeatsadpfbbdetf|kabevdetskafkebbeakadpfbbdetf|kabevdetskafkebbeatsadpfbbdetf|kabevdetskaftsebbeakadpfbbdetf");
        java.lang.String str8 = nysiis1.nysiis("=?UTF-8?Q?3D53BCBC17025716163721AECFB8C50C914899464FA2549D94CAE78C239C5068?=");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CABAFD" + "'", str6, "CABAFD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTFGDB" + "'", str8, "UTFGDB");
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        byte[] byteArray17 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1", "CgFkAQE");
        byte[] byteArray18 = quotedPrintableCodec1.encode(byteArray17);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-85, 62, 0, 34, 108, 71, -105, -13, -25, -28, -70, 16, 7, -115, -46, 87, 40, -50, 124, -103, -81, 17, 14, -15, 23, 91, -16, 5, -107, -91, 107, 108, 6, -81, -125, -21, 106, -45, -1, 80, -6, -19, -114, -50, -13, 67, -122, 78]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[61, 65, 66, 62, 61, 48, 48, 34, 108, 71, 61, 57, 55, 61, 70, 51, 61, 69, 55, 61, 69, 52, 61, 66, 65, 61, 49, 48, 61, 48, 55, 61, 56, 68, 61, 68, 50, 87, 40, 61, 67, 69, 124, 61, 57, 57, 61, 65, 70, 61, 49, 49, 61, 48, 69, 61, 70, 49, 61, 49, 55, 91, 61, 70, 48, 61, 48, 53, 61, 57, 53, 61, 65, 53, 107, 61, 13, 10, 108, 61, 48, 54, 61, 65, 70, 61, 56, 51, 61, 69, 66, 106, 61, 68, 51, 61, 70, 70, 80, 61, 70, 65, 61, 69, 68, 61, 56, 69, 61, 67, 69, 61, 70, 51, 67, 61, 56, 54, 78]");
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.RuleType ruleType3 = beiderMorseEncoder0.getRuleType();
        byte[] byteArray6 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.lang.String str7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 629192958);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = beiderMorseEncoder0.encode((java.lang.Object) byteArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: BeiderMorseEncoder encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-80, -2, -10, 123, -78, 34, 50, -10, -13, -64, -8, -16, 91, -109, -81, -125, -4, 46, -120, 125]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000" + "'", str7, "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        java.lang.String str2 = quotedPrintableCodec1.getDefaultCharset();
        java.lang.Object obj3 = null;
        java.lang.Object obj4 = quotedPrintableCodec1.encode(obj3);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        java.lang.String str7 = quotedPrintableCodec1.decode("FPPT", charset6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF-8" + "'", str2, "UTF-8");
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FPPT" + "'", str7, "FPPT");
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils2 = new org.apache.commons.codec.digest.DigestUtils(messageDigest1);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream4);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream8 = new org.apache.commons.codec.binary.Base16InputStream(inputStream4);
        byte[] byteArray9 = digestUtils2.digest(inputStream4);
        java.security.MessageDigest messageDigest10 = digestUtils2.getMessageDigest();
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getDigest("AWrLOQlxe3HJg", messageDigest10);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.codec.language.Nysiis nysiis1 = new org.apache.commons.codec.language.Nysiis(true);
        boolean boolean2 = nysiis1.isStrict();
        org.apache.commons.codec.binary.Base32 base32_4 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray10, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray10);
        java.lang.String str17 = org.apache.commons.codec.digest.Crypt.crypt(byteArray10, "0A01640101");
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray10);
        java.lang.String str19 = base32_4.encodeToString(byteArray18);
        java.lang.Object obj20 = nysiis1.encode((java.lang.Object) str19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str13, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AAAAAAA" + "'", str14, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str15, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0Acd8L3u4hVxI" + "'", str17, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str19, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "XWANAP" + "'", obj20, "XWANAP");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_224Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils14 = new org.apache.commons.codec.digest.DigestUtils(messageDigest13);
        org.apache.commons.codec.digest.XXHash32 xXHash32_16 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_16.reset();
        org.apache.commons.codec.binary.Hex hex18 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer21 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, byteBuffer21);
        char[] charArray24 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer21, true);
        byte[] byteArray25 = hex18.decode(byteBuffer21);
        xXHash32_16.update(byteBuffer21);
        char[] charArray28 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer21, false);
        java.security.MessageDigest messageDigest29 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest13, byteBuffer21);
        java.lang.String str30 = digestUtils1.digestAsHex(byteBuffer21);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-224 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(messageDigest29);
        org.junit.Assert.assertEquals(messageDigest29.toString(), "SHA3-224 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str30, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray0, (-1), (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.US_ASCII;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0, false);
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec8 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        java.lang.Object obj21 = quotedPrintableCodec8.decode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream22 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream4, true, 1, byteArray14);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray27);
        java.nio.charset.Charset charset30 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy33 = base64_32.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec34 = new org.apache.commons.codec.net.BCodec(charset30, codecPolicy33);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream35 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream4, true, (int) (short) 1, byteArray27, codecPolicy33);
        org.apache.commons.codec.net.BCodec bCodec36 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy33);
        java.nio.charset.Charset charset37 = bCodec36.getCharset();
        org.apache.commons.codec.binary.Hex hex38 = new org.apache.commons.codec.binary.Hex(charset37);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\000\ufffd" + "'", str28, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\377" + "'", str29, "\377");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + codecPolicy33 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy33.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charset37);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils2 = new org.apache.commons.codec.digest.DigestUtils(messageDigest1);
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray8);
        byte[] byteArray16 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray17, inputStream18);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream20 = new org.apache.commons.codec.binary.Base64InputStream(inputStream18);
        int int21 = base64InputStream20.available();
        byte[] byteArray22 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray8, (java.io.InputStream) base64InputStream20);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream25 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream20, false, true);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, (java.io.InputStream) base64InputStream20);
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.getDigest("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1", messageDigest26);
        org.apache.commons.codec.digest.DigestUtils digestUtils28 = new org.apache.commons.codec.digest.DigestUtils(messageDigest27);
        java.nio.file.Path path29 = null;
        java.nio.file.OpenOption[] openOptionArray30 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray31 = digestUtils28.digest(path29, openOptionArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str14, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str19, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(openOptionArray30);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.codec.language.Soundex soundex2 = new org.apache.commons.codec.language.Soundex("E99B98", false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = soundex2.encode("=?UTF-8?B?4bW05ZWg6ber4o6Z7o6p7qKd75qG7ryg6K2p4rWF67iX7Yui6LCh77+96LSu?=");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The character is not mapped: U (index=20)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        java.lang.String str6 = colognePhonetic0.encode("c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        java.lang.String str8 = colognePhonetic0.colognePhonetic("");
        java.lang.String str10 = colognePhonetic0.encode("6brp3ObrccRZI");
        java.util.BitSet bitSet11 = null;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray17, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str21 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray17);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray17);
        java.lang.String str24 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray17);
        byte[] byteArray26 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray27, inputStream28);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream30 = new org.apache.commons.codec.binary.Base64InputStream(inputStream28);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.md2Hex(inputStream28);
        java.lang.String str32 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray17, inputStream28);
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet11, byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = colognePhonetic0.encode((java.lang.Object) byteArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: This method's parameter was expected to be of the type java.lang.String. But actually it was of the type [B.");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "828213832432323283231" + "'", str6, "828213832432323283231");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "17117878" + "'", str10, "17117878");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str20, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AAAAAAA" + "'", str21, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str23, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\000\000\000\000\000" + "'", str24, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str29, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str31, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str32, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[61, 48, 48, 61, 48, 48, 61, 48, 48, 61, 48, 48, 61, 48, 48]");
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex((java.io.InputStream) base64InputStream5);
        java.nio.charset.Charset charset8 = null;
        java.nio.charset.Charset charset9 = org.apache.commons.codec.Charsets.toCharset(charset8);
        org.apache.commons.codec.binary.Hex hex10 = new org.apache.commons.codec.binary.Hex(charset9);
        java.lang.String str11 = hex10.getCharsetName();
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.lang.Object obj14 = hex10.encode((java.lang.Object) byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = base64InputStream5.read(byteArray13, 0, 1137768543);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" + "'", str7, "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF-8" + "'", str11, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha1(byteArray7);
        long[] longArray9 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray7);
        org.apache.commons.codec.binary.Base32 base32_11 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        boolean boolean18 = base32_11.isInAlphabet(byteArray16, false);
        byte[] byteArray20 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str21 = base32_11.encodeAsString(byteArray20);
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream24);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream24);
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest22, inputStream24);
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray20, inputStream24);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray7, inputStream24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, -90, -123, -32, 42, -95, -33, 64, -31, -105, -123, -83, -1, 122, 97, 127, 14, 90, 96, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[4385779628157467362, -2625058848927127505]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ABUAA2IAEE======" + "'", str21, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str26, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str29, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[106, -28, 82, -127, -35, -28, 42, -5, 41, -94, -61, 104, 5, -59, -58, 24]");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3, true);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream8 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base64InputStream6, true);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex((java.io.InputStream) base64InputStream6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str9, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.codec.language.bm.Rule.PhonemeExpr phonemeExpr3 = null;
        org.apache.commons.codec.language.bm.Rule rule4 = new org.apache.commons.codec.language.bm.Rule("d7bXONth0AIyo", "ABUAA2IAEE======", "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", phonemeExpr3);
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern5 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern6 = rule4.getRContext();
        org.apache.commons.codec.language.bm.Rule.RPattern rPattern7 = rule4.getRContext();
        org.junit.Assert.assertNotNull(rPattern5);
        org.junit.Assert.assertNotNull(rPattern6);
        org.junit.Assert.assertNotNull(rPattern7);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str8, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        boolean boolean5 = doubleMetaphoneResult4.isComplete();
        java.lang.String str6 = doubleMetaphoneResult4.getPrimary();
        doubleMetaphoneResult4.appendPrimary('-');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str7 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray6);
        byte[] byteArray8 = base16_4.encode(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy12 = base64_11.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_13 = new org.apache.commons.codec.binary.Base16(false, codecPolicy12);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray19, false);
        byte[] byteArray23 = org.apache.commons.codec.digest.Blake3.hash(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        long long25 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray19);
        javax.crypto.Mac mac26 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray19);
        java.lang.String str27 = base16_13.encodeAsString(byteArray19);
        java.lang.String str28 = base16_4.encodeAsString(byteArray19);
        java.lang.Object obj29 = hex2.decode((java.lang.Object) str28);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str7, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy12 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy12.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0A01640101" + "'", str22, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str24, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-7793026892456512543L) + "'", long25 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0A01640101" + "'", str27, "0A01640101");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0a01640101" + "'", str28, "0a01640101");
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        byte[] byteArray0 = org.apache.commons.codec.binary.BaseNCodec.getChunkSeparator();
        javax.crypto.Mac mac1 = org.apache.commons.codec.digest.HmacUtils.getHmacMd5(byteArray0);
        boolean boolean2 = org.apache.commons.codec.binary.Base64.isBase64(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[13, 10]");
        org.junit.Assert.assertNotNull(mac1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils2 = new org.apache.commons.codec.digest.DigestUtils(messageDigest1);
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream4);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream4);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream8 = new org.apache.commons.codec.binary.Base16InputStream(inputStream4);
        byte[] byteArray9 = digestUtils2.digest(inputStream4);
        java.security.MessageDigest messageDigest10 = digestUtils2.getMessageDigest();
        byte[] byteArray12 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.io.InputStream inputStream14 = java.io.InputStream.nullInputStream();
        java.lang.String str15 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray13, inputStream14);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream16 = new org.apache.commons.codec.binary.Base64InputStream(inputStream14);
        byte[] byteArray17 = digestUtils2.digest(inputStream14);
        org.apache.commons.codec.binary.Base32 base32_18 = new org.apache.commons.codec.binary.Base32(0, byteArray17);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str6, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str15, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        java.lang.Object obj11 = base32_7.decode((java.lang.Object) "074144668286427481268138212338282381323183123");
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream18);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream18);
        byte[] byteArray23 = inputStream18.readNBytes((int) ' ');
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        java.lang.String str26 = org.apache.commons.codec.digest.Crypt.crypt(byteArray25);
        org.apache.commons.codec.CodecPolicy codecPolicy29 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.binary.Base16 base16_30 = new org.apache.commons.codec.binary.Base16(false, codecPolicy29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true, codecPolicy29);
        byte[] byteArray32 = base32_7.decode(byteArray25);
        byte[] byteArray34 = base32_7.decode("$6$DAAeTO.Y$KX9PBpbOi6JVKZzK/ZMUC9WeINcqAVfRRN6QSpZZAIEv/TGiNJywmjLDvqupos/gu6C5U119UUBRQUK0nHsfj.");
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str19, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str20, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str21, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$6$Ae5EjHMU$79vCiDEPorkGKrA1IXWUpERcVMz/73uOfyFY6Gjjcc8hDMYlXFgCHOBbxX6JTGO4G5dkpLryGVRuCGzzLno4i0" + "'", str26, "$6$Ae5EjHMU$79vCiDEPorkGKrA1IXWUpERcVMz/73uOfyFY6Gjjcc8hDMYlXFgCHOBbxX6JTGO4G5dkpLryGVRuCGzzLno4i0");
        org.junit.Assert.assertTrue("'" + codecPolicy29 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy29.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-16, -64, 2, 77, -40, 85, -34, 23, -123, -56, -14, 106, -84, -27, 89, 101, 5, 98, 33, -94, -128, 42, 88, -59, -66, -124, -97, -100, -127, 4, -84, -52, -122, -89, 22, 98, 86, 58, -62, -113, 116, -115, 79, 11, -76, -91, 3, 24, 81, 77, 60, -118]");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha384("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1", "CgFkAQE");
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-85, 62, 0, 34, 108, 71, -105, -13, -25, -28, -70, 16, 7, -115, -46, 87, 40, -50, 124, -103, -81, 17, 14, -15, 23, 91, -16, 5, -107, -91, 107, 108, 6, -81, -125, -21, 106, -45, -1, 80, -6, -19, -114, -50, -13, 67, -122, 78]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[110, 27, 77, -15, 11, 60, 84, 53, 64, 76, 83, 87, 3, -15, -124, 53, 70, -65, -113, -74]");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.security.MessageDigest messageDigest0 = null;
        java.nio.file.Path path1 = null;
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, path1, openOptionArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openOptionArray3);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "UTF-8");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        byte[] byteArray23 = uRLCodec17.encode(byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray8, byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray8);
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest26, inputStream27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream27);
        byte[] byteArray31 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray25, byteArray30);
        byte[] byteArray32 = hmacUtils2.hmac(byteArray25);
        java.lang.String str34 = hmacUtils2.hmacHex("FFFFFF");
        java.lang.String str36 = hmacUtils2.hmacHex("d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str24, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[12, 71, 108, -2, -39, 32, -105, -28, -46, 120, 125, 64, -100, 82, 88, 109]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[22, -51, -28, 108, -52, -109, 87, 44, -30, 66, 76, -24, 22, 100, 24, -35]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ba4b3248d86567b6bf56654017f7ed21" + "'", str34, "ba4b3248d86567b6bf56654017f7ed21");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4fd2bf2fda1ad3f6fd76d56314f9fa49" + "'", str36, "4fd2bf2fda1ad3f6fd76d56314f9fa49");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.nio.ByteBuffer byteBuffer14 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        java.lang.String str15 = digestUtils1.digestAsHex(byteBuffer14);
        java.lang.String str17 = digestUtils1.digestAsHex("6B4BC7");
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.nio.ByteBuffer byteBuffer22 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest20, byteBuffer22);
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils25 = new org.apache.commons.codec.digest.DigestUtils(messageDigest24);
        java.io.OutputStream outputStream26 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_28 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream30 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream26, (org.apache.commons.codec.binary.BaseNCodec) base16_28, false);
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str34 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray33);
        long long35 = base16_28.getEncodedLength(byteArray33);
        byte[] byteArray36 = digestUtils25.digest(byteArray33);
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils38 = new org.apache.commons.codec.digest.DigestUtils(messageDigest37);
        java.security.MessageDigest messageDigest39 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer41 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest42 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest39, byteBuffer41);
        char[] charArray44 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer41, true);
        java.lang.String str45 = digestUtils38.digestAsHex(byteBuffer41);
        byte[] byteArray46 = digestUtils25.digest(byteBuffer41);
        java.security.MessageDigest messageDigest47 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest20, byteBuffer41);
        java.lang.String str48 = digestUtils1.digestAsHex(byteBuffer41);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393" + "'", str15, "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fd3fbbe188f74146eb125cfb4e0ce6cf7173ce45705a47e691368619b4eecd2e9c925dd63bf258a4b23a787e1b2c5c4c" + "'", str17, "fd3fbbe188f74146eb125cfb4e0ce6cf7173ce45705a47e691368619b4eecd2e9c925dd63bf258a4b23a787e1b2c5c4c");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream26);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\000\ufffd" + "'", str34, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4L + "'", long35 == 4L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest39);
        org.junit.Assert.assertEquals(messageDigest39.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(messageDigest42);
        org.junit.Assert.assertEquals(messageDigest42.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str45, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest47);
        org.junit.Assert.assertEquals(messageDigest47.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str48, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        java.lang.String str3 = refinedSoundex1.soundex("bb60977c691dee70aa7d2d68438472df3e85e26bb8fe71ea2dbbaea6566b33f48908a3a70562dcd00fca6d76766d025b");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B9c64c269264c9464924c2c4c9" + "'", str3, "B9c64c269264c9464924c2c4c9");
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray35 = hmacUtils32.hmac(byteBuffer34);
        byte[] byteArray38 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray44);
        java.lang.String str47 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray44, false);
        java.lang.String str48 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray38, byteArray44);
        byte[] byteArray50 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        java.io.InputStream inputStream52 = java.io.InputStream.nullInputStream();
        java.lang.String str53 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray51, inputStream52);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream54 = new org.apache.commons.codec.binary.Base64InputStream(inputStream52);
        byte[] byteArray55 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray44, (java.io.InputStream) base64InputStream54);
        byte[] byteArray56 = hmacUtils32.hmac(byteArray55);
        byte[] byteArray58 = hmacUtils32.hmac("PKFPKFKTKF");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str45, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0A01640101" + "'", str47, "0A01640101");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str48, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str53, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[42, 4, 116, 73, -10, 117, 106, 17, -6, -109, 33, -47, -114, 78, 65, -45, 25, 98, -61, -75, -109, 36, 35, 82, 7, -18, 5, -113]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[72, 67, -99, -55, -109, -9, -96, 50, -17, 83, 52, 32, 67, 73, -66, 121, 70, -58, -93, 69, -52, -71, 40, -70, 35, 26, -9, -20]");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.ISO_8859_1;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0);
        java.nio.charset.Charset charset3 = null;
        java.nio.charset.Charset charset4 = org.apache.commons.codec.Charsets.toCharset(charset3);
        org.apache.commons.codec.binary.Hex hex5 = new org.apache.commons.codec.binary.Hex(charset4);
        java.nio.charset.Charset charset6 = hex5.getCharset();
        java.lang.String str7 = quotedPrintableCodec1.encode("b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507", charset6);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507" + "'", str7, "b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("074144668286427481268138212338282381323183123");
        int int4 = refinedSoundex1.difference("bcce83622206284126038d877e184c2a80a54c5eae29897917b64bcda570c827dd2e7d0f195a31c1018fe15da1f37d47a1affa6445ab0f7d2fc7ebc0c64e7b46", "0Acd8L3u4hVxI");
        java.lang.String str6 = refinedSoundex1.soundex("47c8df524e807cc8d8df75fcb19f11b078ee64c5224017601c09a81ceb58decf82479db44489a9726c283054792aa9860654951f7b9389205ae7c224166161f7");
        java.lang.String str8 = refinedSoundex1.soundex("ffe5ae7c6ec20467e5887dabe8966efcda6196c1fa9e0d731c13bc25");
        java.lang.String str10 = refinedSoundex1.encode("AX");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C41414747404714170404704" + "'", str6, "C41414747404714170404704");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F4041074104041474" + "'", str8, "F4041074104041474");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "A08" + "'", str10, "A08");
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.apache.commons.codec.binary.Base16 base16_1 = new org.apache.commons.codec.binary.Base16();
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray5);
        java.lang.String str9 = base16_1.encodeAsString(byteArray5);
        org.apache.commons.codec.digest.Blake3 blake3_10 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray5);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str13 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray12);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec15 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray21, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray21);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray21);
        java.lang.Object obj28 = quotedPrintableCodec15.decode((java.lang.Object) byteArray21);
        java.lang.String str29 = quotedPrintableCodec15.getDefaultCharset();
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        java.io.InputStream inputStream33 = java.io.InputStream.nullInputStream();
        java.lang.String str34 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray32, inputStream33);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream35);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream35);
        java.lang.String str38 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray32, inputStream35);
        java.lang.Object obj39 = quotedPrintableCodec15.encode((java.lang.Object) byteArray32);
        byte[] byteArray40 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray12, byteArray32);
        blake3_10.doFinalize(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32(852759869, byteArray40, true, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: pad must not be in alphabet or whitespace");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str8, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FFFFFF" + "'", str9, "FFFFFF");
        org.junit.Assert.assertNotNull(blake3_10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str13, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str22, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str24, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AAAAAAA" + "'", str25, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str26, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str27, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTF-8" + "'", str29, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str34, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str36, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str37, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str38, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-7, -56, 1, -8, -69, -108, -117, 0, -40, -63, -128, 27, 16, 21, -27, -48]");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("DBQsVOvLDdObw");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 68, 0, 66, 0, 81, 0, 115, 0, 86, 0, 79, 0, 118, 0, 76, 0, 68, 0, 100, 0, 79, 0, 98, 0, 119]");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        int int20 = base64InputStream19.available();
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray7, (java.io.InputStream) base64InputStream19);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream24 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream19, false, true);
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, (java.io.InputStream) base64InputStream19);
        java.security.MessageDigest messageDigest27 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, "=?UTF-8?B?UHR6OVJUejNLVnZWMg==?=");
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest27);
        org.junit.Assert.assertEquals(messageDigest27.toString(), "SHA3-384 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray9 = null;
        byte[] byteArray10 = uRLCodec1.decode(byteArray9);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_20 = new org.apache.commons.codec.binary.Base16();
        boolean boolean22 = base16_20.isInAlphabet("AAAAAAA");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray26, true);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray26);
        boolean boolean31 = base16_20.isInAlphabet(byteArray26, true);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray16, byteArray26);
        byte[] byteArray33 = uRLCodec1.encode(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray37 = uRLCodec1.decode(byteArray36);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str50 = org.apache.commons.codec.digest.Crypt.crypt(byteArray43, "0A01640101");
        java.lang.String str51 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray43);
        int int54 = org.apache.commons.codec.digest.MurmurHash3.hash32(byteArray43, 4, (int) '#');
        byte[] byteArray55 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray43);
        byte[] byteArray56 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray43);
        java.lang.String str57 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray37, byteArray56);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str17, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str19, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ffffff" + "'", str28, "ffffff");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str29, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0Acd8L3u4hVxI" + "'", str50, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str51, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1650246903 + "'", int54 == 1650246903);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-114, -115, -104, 71, -74, -67, 25, -117, -79, -104, 13, -77, 52, 101, -98, -106, -95, -65, 61, -69, 92, 86, 54, -116, 111, -85, -26, -10, -75, 97, 35, 39, -112, -29, -76, 12, 29, 79, -75, 10, 25, -61, 73, -79, 11, -36, 105, 80]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-124, -126, -126, 23, -37, 5, -32, -12, 12, 67, 35, 53, 87, 42, 73, -73, 123, 101, 63, -62, 24, 55, 51, 103, 126, 76, 17, 28]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cbf24684114f4b22def027867eab38d733232ff43c484bd8ad09a050f96dba24" + "'", str57, "cbf24684114f4b22def027867eab38d733232ff43c484bd8ad09a050f96dba24");
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(436110042);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder1 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder1.setRuleType(ruleType2);
        org.apache.commons.codec.language.bm.RuleType ruleType4 = beiderMorseEncoder1.getRuleType();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList6 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType0, ruleType4, "AKPKKMNSKT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for ash, exact, AKPKKMNSKT.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        byte[] byteArray8 = binaryCodec0.toByteArray("FFPF");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray6);
        java.lang.String str9 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray6, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray6);
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray6);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray6);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream18 = new org.apache.commons.codec.binary.Base64InputStream(inputStream16);
        int int19 = base64InputStream18.available();
        byte[] byteArray20 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray6, (java.io.InputStream) base64InputStream18);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream23 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream18, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream24 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream23);
        boolean boolean25 = base16InputStream23.isStrictDecoding();
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex((java.io.InputStream) base16InputStream23);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy32 = base64_31.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_33 = new org.apache.commons.codec.binary.Base16(true, codecPolicy32);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream34 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream23, false, true, codecPolicy32);
        org.apache.commons.codec.binary.Base16 base16_35 = new org.apache.commons.codec.binary.Base16(true, codecPolicy32);
        boolean boolean37 = base16_35.isInAlphabet((byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str7, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str9, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AAAAAAA" + "'", str10, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str11, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str12, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str26, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
        org.junit.Assert.assertTrue("'" + codecPolicy32 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy32.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        boolean boolean2 = org.apache.commons.codec.binary.StringUtils.equals((java.lang.CharSequence) "cee6ad850031330b534f083f4ee64dea", (java.lang.CharSequence) "A08");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str14 = org.apache.commons.codec.digest.Crypt.crypt(byteArray7, "0A01640101");
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        java.lang.String str16 = base32_1.encodeToString(byteArray15);
        java.io.OutputStream outputStream17 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream18 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream17);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec22 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray28, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray28);
        java.lang.Object obj35 = quotedPrintableCodec22.decode((java.lang.Object) byteArray28);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream36 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream18, true, 1, byteArray28);
        boolean boolean37 = base64OutputStream18.isStrictDecoding();
        byte[] byteArray41 = org.apache.commons.codec.digest.DigestUtils.md5("48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream42 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream18, false, (int) (short) 0, byteArray41);
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet45 = null;
        byte[] byteArray47 = new byte[] { (byte) 100 };
        byte[] byteArray48 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet45, byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray48);
        boolean boolean51 = base32_44.isInAlphabet(byteArray49, false);
        byte[] byteArray53 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str54 = base32_44.encodeAsString(byteArray53);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        base64OutputStream18.write(byteArray53);
        byte[] byteArray57 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray15, byteArray53);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0Acd8L3u4hVxI" + "'", str14, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str16, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
        org.junit.Assert.assertNotNull(outputStream17);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str29, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str31, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AAAAAAA" + "'", str32, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str33, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str34, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-81, 87, 118, -68, 89, 15, 90, 99, -57, -120, 117, 75, -66, -24, 94, -119]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ABUAA2IAEE======" + "'", str54, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-42, 115, -76, -85, -101, -7, 14, -48, -28, 108, 51, 8, 70, -99, -16, -22, 39, 119, -35, 93]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex("\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7cd9ea3a777159f190a5ad95fc94b919752c42564de2cb38d90df348ae98b10fe2c11be569eb8a585b7789dc83cefab4" + "'", str1, "7cd9ea3a777159f190a5ad95fc94b919752c42564de2cb38d90df348ae98b10fe2c11be569eb8a585b7789dc83cefab4");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(0);
        java.nio.charset.Charset charset2 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy3 = null;
        org.apache.commons.codec.net.BCodec bCodec4 = new org.apache.commons.codec.net.BCodec(charset2, codecPolicy3);
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset2);
        java.nio.charset.Charset charset6 = org.apache.commons.codec.Charsets.toCharset(charset5);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec8 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset5, false);
        byte[] byteArray11 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray17, false);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray11, byteArray17);
        org.apache.commons.codec.digest.Blake3 blake3_22 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray11);
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray28);
        byte[] byteArray31 = uRLCodec24.decode(byteArray28);
        byte[] byteArray32 = null;
        byte[] byteArray33 = uRLCodec24.decode(byteArray32);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_43 = new org.apache.commons.codec.binary.Base16();
        boolean boolean45 = base16_43.isInAlphabet("AAAAAAA");
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str51 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray49, true);
        java.lang.String str52 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray49);
        boolean boolean54 = base16_43.isInAlphabet(byteArray49, true);
        byte[] byteArray55 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray39, byteArray49);
        byte[] byteArray56 = uRLCodec24.encode(byteArray55);
        blake3_22.doFinalize(byteArray56);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms58 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet59 = null;
        byte[] byteArray61 = new byte[] { (byte) 100 };
        byte[] byteArray62 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet59, byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray62);
        javax.crypto.Mac mac64 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms58, byteArray63);
        org.apache.commons.codec.digest.HmacUtils hmacUtils66 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms58, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec68 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str75 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray74);
        java.lang.String str77 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray74, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        java.lang.String str79 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray74);
        java.lang.String str80 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray74);
        java.lang.Object obj81 = quotedPrintableCodec68.decode((java.lang.Object) byteArray74);
        org.apache.commons.codec.digest.HmacUtils hmacUtils82 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms58, byteArray74);
        byte[] byteArray84 = hmacUtils82.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        blake3_22.doFinalize(byteArray84);
        byte[] byteArray86 = quotedPrintableCodec8.decode(byteArray84);
        xXHash32_1.update(byteArray84, 100, (-755363659));
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0A01640101" + "'", str20, "0A01640101");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str21, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str30, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ffffff" + "'", str51, "ffffff");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str52, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms58 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms58.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac64);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str75, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str77, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "AAAAAAA" + "'", str78, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str79, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str80, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109]");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$B8YKmH8T$Jz2oy7M.KIQygL81byv8ExToz81G91q1E5XLxVJqCcjL/5Yl5D1.2aJO2MoY.jjW0wmnHdaKvl47Jjh/2IQBh/");
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[11, 47, -85, 40, 35, -99, 125, -128, -64, -37, -88, 126, -36, -37, 124, 74, -23, -13, -46, 71, 109, 3, -64, 93, 49, -20, 49, -62, 122, 0, -118, 60, 24, -9, -91, 55, -67, 39, 6, 100, -64, 20, 91, 106, 110, -82, -71, -39, -67, -9, 11, -33, -124, -85, -37, 65, 0, -103, -24, 10, -3, 95, 31, 102]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[61, 48, 66, 47, 61, 65, 66, 40, 35, 61, 57, 68, 125, 61, 56, 48, 61, 67, 48, 61, 68, 66, 61, 65, 56, 126, 61, 68, 67, 61, 68, 66, 124, 74, 61, 69, 57, 61, 70, 51, 61, 68, 50, 71, 109, 61, 48, 51, 61, 67, 48, 93, 49, 61, 69, 67, 49, 61, 67, 50, 122, 61, 48, 48, 61, 56, 65, 60, 61, 49, 56, 61, 70, 55, 61, 65, 53, 55, 61, 66, 68, 39, 61, 48, 54, 100, 61, 67, 48, 61, 49, 52, 91, 106, 110, 61, 65, 69, 61, 66, 57, 61, 68, 57, 61, 66, 68, 61, 70, 55, 61, 48, 66, 61, 68, 70, 61, 56, 52, 61, 65, 66, 61, 68, 66, 65, 61, 48, 48, 61, 57, 57, 61, 69, 56, 61, 48, 65, 61, 70, 68, 95, 61, 49, 70, 102]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.codec.language.Caverphone1 caverphone1_0 = new org.apache.commons.codec.language.Caverphone1();
        java.lang.String str2 = caverphone1_0.encode("50d099290876d18e40b67f38cde88ecd91b8d6b69c349dc179b209e2");
        java.lang.String str4 = caverphone1_0.encode("01230120022455012623010202");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TPFKTK" + "'", str2, "TPFKTK");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "111111" + "'", str4, "111111");
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        java.lang.String str20 = quotedPrintableCodec1.decode("b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5", "UTF-8");
        java.lang.String str22 = quotedPrintableCodec1.encode("52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5" + "'", str20, "b91ea161e2e2865bb244218708f7601930d3ed7e91330610b746229c1fe626c5");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4" + "'", str22, "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4");
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream6 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) baseNCodecOutputStream4, true);
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream4 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest5);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest5);
        java.io.OutputStream outputStream8 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream9 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream8);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec13 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray19);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray19);
        java.lang.Object obj26 = quotedPrintableCodec13.decode((java.lang.Object) byteArray19);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream27 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream9, true, 1, byteArray19);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, false, 1757052779);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest5, byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac33 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac("38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", byteArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.security.NoSuchAlgorithmException: Algorithm 38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b not available");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream8);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str24, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str25, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 46, -64, -74, 60, 68, -88, 51, 7, 104, 56, -33, 103, -6, 97, -72, -31, 115, 65, -125, 18, -34, 5, -53, 63, -46, -6, 37, 53, 12, 23, 49, 13, 126, 37, 90, -97, 34, 14, 91, -12, -121, 71, -32, -44, 76, 57, -55, 103, -80, -106, -24, -8, -31, 111, -122, -110, 63, -59, -107, 106, 62, 105, 112]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.encode("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str4 = colognePhonetic0.encode("b2Aup9HxaW1JY");
        boolean boolean7 = colognePhonetic0.isEncodeEqual("16fd67a8bb44f961f07f53972686acb3", "FPVV6wdYZOZ5U");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "041312381228231821282818232313" + "'", str2, "041312381228231821282818232313");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11483" + "'", str4, "11483");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.codec.language.RefinedSoundex refinedSoundex1 = new org.apache.commons.codec.language.RefinedSoundex("310344b7ad126171e627e334e79c2ffd17a4bfd9f681018879ea89624808a39d");
        java.lang.String str3 = refinedSoundex1.soundex("97048ecdc68cd0b2508de076c5c79b8d2d4562cc546b645ed5a4bf4990db0884171cd9ab0b3e1b29fbc4a9373c7d856b");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "E4030313401301431431031414103031" + "'", str3, "E4030313401301431431031414103031");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex("00340031003400310034003100340031003400310034003100340031003300640030006400300061", "00471739705a2c31cecb8fb10ee39fd74bad5cc9c783a49c72bed49fb902ccd0");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "38e0901cc41701f36b6e93185239ca649bc626f4" + "'", str2, "38e0901cc41701f36b6e93185239ca649bc626f4");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream3 = new org.apache.commons.codec.binary.Base64InputStream(inputStream0, false);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream0);
        org.apache.commons.codec.binary.Base32 base32_8 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        boolean boolean15 = base32_8.isInAlphabet(byteArray13, false);
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str18 = base32_8.encodeAsString(byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32InputStream base32InputStream22 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, false, (int) '-', byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [hg==]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ABUAA2IAEE======" + "'", str18, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[104, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-62, 111, 93, 69, -50, 28, -83, -114, 70, -123, 101, -122, 123, -80, 98, -83, 104, -88, -2, -40, -70, 95, -78, -87, 96, -59, 26, -89, -11, -27, 93, 60]");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.lang.String str2 = org.apache.commons.codec.digest.UnixCrypt.crypt("aace6559ecc58307ece3bd5691fb952229eb3c80", "ARKPXKMNSK");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AR3B0GOjzM7MY" + "'", str2, "AR3B0GOjzM7MY");
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex("2f8570af520161ee797832c792b086c2f502d8c78c7f11e44b23665cde8ff459");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "8227d7df94862fe024eb91ca030f48b740126df82eb77981d65072fff18d0586" + "'", str1, "8227d7df94862fe024eb91ca030f48b740126df82eb77981d65072fff18d0586");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, inputStream13);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream15 = new org.apache.commons.codec.binary.Base64InputStream(inputStream13);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha512(inputStream13);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex(inputStream13);
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray6, inputStream13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[82, 109, 105, 74, 100, 111, 76, 77, 48, 114, 72, 117, 68, 75, 54, 78, 120, 86, 108, 72, 75, 82, 43, 66, 110, 77, 87, 101, 52, 83, 98, 49, 118, 83, 81, 55, 71, 70, 74, 88, 100, 66, 82, 66, 79, 117, 55, 86, 101, 65, 116, 102, 115, 82, 67, 81, 65, 52, 99, 86, 118, 117, 48, 98, 65, 72, 70, 75, 70, 98, 77, 99, 106, 90, 90, 48, 13, 10, 43, 57, 118, 102, 102, 57, 81, 90, 72, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str14, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26" + "'", str17, "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "67d130f499d1ce8df57f4772abcbe7b3e15f43b4" + "'", str18, "67d130f499d1ce8df57f4772abcbe7b3e15f43b4");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        java.lang.Object obj11 = base32_7.decode((java.lang.Object) "074144668286427481268138212338282381323183123");
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        java.io.InputStream inputStream18 = java.io.InputStream.nullInputStream();
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream18);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream18);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream18);
        byte[] byteArray23 = inputStream18.readNBytes((int) ' ');
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        java.lang.String str26 = org.apache.commons.codec.digest.Crypt.crypt(byteArray25);
        org.apache.commons.codec.CodecPolicy codecPolicy29 = org.apache.commons.codec.CodecPolicy.LENIENT;
        org.apache.commons.codec.binary.Base16 base16_30 = new org.apache.commons.codec.binary.Base16(false, codecPolicy29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray25, true, codecPolicy29);
        byte[] byteArray32 = base32_7.decode(byteArray25);
        boolean boolean34 = base32_7.isInAlphabet((byte) 1);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str19, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str20, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str21, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$6$YBcl1v8D$gMs7wb0MztJwDjR4F6msVk2Gd6AJXpO1Ho2yyaSWyenySCOFTI3DGRXG5jhHuuJYmBcRk1UKI3g1fwQSdjTES1" + "'", str26, "$6$YBcl1v8D$gMs7wb0MztJwDjR4F6msVk2Gd6AJXpO1Ho2yyaSWyenySCOFTI3DGRXG5jhHuuJYmBcRk1UKI3g1fwQSdjTES1");
        org.junit.Assert.assertTrue("'" + codecPolicy29 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy29.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("719bf945849ee63ffc9d5309e5b1e33132b379d99fcc6e853ec673a5e826801a");
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset8 = bCodec2.getCharset();
        java.nio.charset.Charset charset9 = org.apache.commons.codec.Charsets.toCharset(charset8);
        org.apache.commons.codec.binary.Hex hex10 = new org.apache.commons.codec.binary.Hex(charset9);
        org.apache.commons.codec.net.BCodec bCodec11 = new org.apache.commons.codec.net.BCodec(charset9);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charset9);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream19);
        java.io.OutputStream outputStream22 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_24 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream26 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream22, (org.apache.commons.codec.binary.BaseNCodec) base16_24, false);
        baseNCodecOutputStream26.eof();
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("ffffff");
        baseNCodecOutputStream26.write(byteArray29);
        base64OutputStream19.write(byteArray29);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(outputStream22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[102, 102, 102, 102, 102, 102]");
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str11 = base32_1.encodeAsString(byteArray10);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray10);
        char[] charArray15 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray10, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ABUAA2IAEE======" + "'", str11, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-48, -22, 41, 91, 10, -98, -103, -21, -35, 56, -99, 79, -50, 32, -9, -82, 76, -12, -22, -96, -15, -128, 121, 9, 64, 72, 68, 121, 91, -24, 78, 27]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "006800690021");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "006800690021");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[0, 0, 6, 8, 0, 0, 6, 9, 0, 0, 2, 1]");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        byte[] byteArray2 = inputStream0.readAllBytes();
        char[] charArray3 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray2);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = null;
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C1 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C1.reset();
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray6 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet3, byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray5);
        pureJavaCrc32C1.update(byteArray5, (-690116322), (-1612190696));
        long[] longArray11 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray5);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.md5(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            javax.crypto.Mac mac13 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str7, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy17 = null;
        org.apache.commons.codec.net.BCodec bCodec18 = new org.apache.commons.codec.net.BCodec(charset16, codecPolicy17);
        java.nio.charset.Charset charset20 = null;
        java.nio.charset.Charset charset21 = org.apache.commons.codec.Charsets.toCharset(charset20);
        java.lang.String str22 = bCodec18.encode("SHA-224", charset21);
        boolean boolean23 = bCodec18.isStrictDecoding();
        java.nio.charset.Charset charset24 = bCodec18.getCharset();
        java.nio.charset.Charset charset25 = org.apache.commons.codec.Charsets.toCharset(charset24);
        java.lang.String str26 = quotedPrintableCodec1.decode("cbf24684114f4b22def027867eab38d733232ff43c484bd8ad09a050f96dba24", charset25);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str22, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cbf24684114f4b22def027867eab38d733232ff43c484bd8ad09a050f96dba24" + "'", str26, "cbf24684114f4b22def027867eab38d733232ff43c484bd8ad09a050f96dba24");
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1621933077));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.lang.String str0 = org.apache.commons.codec.digest.MessageDigestAlgorithms.SHA3_384;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "SHA3-384" + "'", str0, "SHA3-384");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        beiderMorseEncoder0.setMaxPhonemes((int) (byte) 100);
        org.apache.commons.codec.language.bm.RuleType ruleType6 = org.apache.commons.codec.language.bm.RuleType.RULES;
        // The following exception was thrown during execution in test generation
        try {
            beiderMorseEncoder0.setRuleType(ruleType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ruleType must not be RULES");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType6 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType6.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest17);
        java.nio.ByteBuffer byteBuffer20 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest17, byteBuffer20);
        char[] charArray22 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = quotedPrintableCodec1.encode((java.lang.Object) charArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Objects of type [C cannot be quoted-printable encoded");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages languages2 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType0);
        java.util.Set<java.lang.String> strSet3 = languages2.getLanguages();
        java.util.Set<java.lang.String> strSet4 = languages2.getLanguages();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languages2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet3 = lang1.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet5 = lang1.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.lang.String str6 = languageSet5.getAny();
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertNotNull(languageSet3);
        org.junit.Assert.assertNotNull(languageSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "german" + "'", str6, "german");
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.codec.language.bm.NameType nameType0 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang1 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType3 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet4 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap5 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType2, ruleType3, languageSet4);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet6 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap7 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType0, ruleType3, languageSet6);
        org.apache.commons.codec.language.bm.Lang lang8 = org.apache.commons.codec.language.bm.Lang.instance(nameType0);
        org.junit.Assert.assertTrue("'" + nameType0 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType0.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang1);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType3 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType3.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(languageSet6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(lang8);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset("$6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: $6$q1v5OSTB$5rK8IAVBWPQigLsEE0/9sB6T2pmSo7GmXBnvBYnY91fLbf2d3DcIHCq8FPMdp.Sx40tkz5Hg6ozIXkhzXdwLO0");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md5Hex("ABUAA2IAEE======");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "b2a02699161efbe1acd0e1135c6e305d" + "'", str1, "b2a02699161efbe1acd0e1135c6e305d");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream0);
        org.apache.commons.codec.binary.Base32 base32_5 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = base32_5.getCodecPolicy();
        org.apache.commons.codec.binary.Base16InputStream base16InputStream7 = new org.apache.commons.codec.binary.Base16InputStream(inputStream0, true, true, codecPolicy6);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str1, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1886572454));
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha1(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_512(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream3);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.md5("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        int int12 = inputStream3.readNBytes(byteArray9, 0, 0);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream14 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str7, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-63, -43, 9, -48, -27, 77, -30, 7, -123, 13, 34, -108, 2, -113, -117, -83]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        org.apache.commons.codec.digest.Blake3 blake3_13 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray2);
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray19);
        byte[] byteArray22 = uRLCodec15.decode(byteArray19);
        byte[] byteArray23 = null;
        byte[] byteArray24 = uRLCodec15.decode(byteArray23);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_34 = new org.apache.commons.codec.binary.Base16();
        boolean boolean36 = base16_34.isInAlphabet("AAAAAAA");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str42 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray40, true);
        java.lang.String str43 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray40);
        boolean boolean45 = base16_34.isInAlphabet(byteArray40, true);
        byte[] byteArray46 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray30, byteArray40);
        byte[] byteArray47 = uRLCodec15.encode(byteArray46);
        blake3_13.doFinalize(byteArray47);
        byte[] byteArray51 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        long[] longArray55 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray51, 1164493051, 0, (int) '4');
        javax.crypto.Mac mac56 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray51);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        java.lang.String str58 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray47, byteArray57);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str21, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str31, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str33, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ffffff" + "'", str42, "ffffff");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str43, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, 105, 27, -68, -26, 58, 18, -19, -42, -18, 45, -73, -55, 48, 82, 127, 53, -116, 36, 126, -51, 105, 115, 123, 104, 104, -114, 109, 19, 11, -29, -35, -70, 89, -52, -2, -4, -89, 87, 91, -41, 12, 76, -7, -28, 11, 70, -40, -114, 38, 11, 51, -93, 101, -56, 79, -2, 19, 40, -23, -98, -114, -16, -37, -92, 31, 44, 115, 93, 87, 73, -3, -100, -49, 16, 41, -81, 16, 18, -105]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-2824814558701066679, -4809301050055417955]");
        org.junit.Assert.assertNotNull(mac56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[57, 89, 110, 72, 51, 56, 57, 119, 82, 52, 114, 98, 72, 71, 107, 89, 43, 76, 121, 116, 106, 100, 82, 119, 75, 84, 80, 88, 108, 116, 55, 79, 69, 47, 78, 120, 98, 69, 122, 54, 102, 100, 69, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "4f3f29aa9f8cab2f3fba201ef05584eeeafb43ca609cc9190764d655007fe6bb852532e3000c8acd1ca0ea806488b0fa" + "'", str58, "4f3f29aa9f8cab2f3fba201ef05584eeeafb43ca609cc9190764d655007fe6bb852532e3000c8acd1ca0ea806488b0fa");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("$6$DDWobXRt$xhVIH9eYUt.YhcPWJgdPO9wi10jTfEY4zKmadE5JWQtwRGLDAYg2C8j0qgku8B9jroG5NSZTzuShahiYPFC1d.");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C2 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C2.reset();
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray7 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet4, byteArray6);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray6);
        pureJavaCrc32C2.update(byteArray6, (-690116322), (-1612190696));
        byte[] byteArray13 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        pureJavaCrc32C2.update(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray21);
        java.lang.String str24 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray21, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray13, byteArray21);
        java.util.BitSet bitSet27 = null;
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray30 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet27, byteArray29);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray13, byteArray29);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, true, (int) '4');
        byte[] byteArray37 = uRLCodec1.encode(byteArray13);
        byte[] byteArray39 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        byte[] byteArray40 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = uRLCodec1.decode((java.lang.Object) byteArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Invalid URL encoding: not a valid digit (radix 16): 44");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str8, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str22, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str24, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AAAAAAA" + "'", str25, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str31, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[37, 48, 48, 104, 37, 48, 48, 105, 37, 48, 48, 37, 50, 49]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 51, 97, 55, 50, 51, 52, 98, 53, 101, 55, 102, 49, 98, 56, 98, 100, 54, 53, 56, 48, 50, 54, 101, 97, 98, 101, 52, 101, 51, 50, 55, 57, 48, 54, 51, 102, 57, 51, 57, 99, 102, 100, 99, 53, 52, 97, 56, 51, 100, 99, 52, 99, 100, 51, 99, 53, 53, 102, 51, 53, 51, 48, 52, 52, 49, 97, 97, 56, 56, 54, 99, 102, 98, 57, 54, 50, 101, 102, 48, 52, 49, 53, 51, 55, 101, 50, 56, 53, 97, 51, 100, 100, 101, 55, 97]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[93, -92, -53, -75, 33, 126, -112, 110, -89, 41, 89, -106, -78, 13, 89, -77, 65, 22, 60, 88, -70, -68, 62, 46, -12, -7, -31, 5, 16, 85, -102, 5, 34, -43, 15, 45, -72, -59, -111, -45, -18, 80, -50, -60, 87, -62, 41, -33, -6, 81, -65, -6, 117, -56, 37, 44, -59, 102, 115, 50, 100, -42, -107, -76]");
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        incrementalHash32x86_0.start(1);
        incrementalHash32x86_0.start(100);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream5);
        byte[] byteArray8 = inputStream5.readAllBytes();
        incrementalHash32x86_0.add(byteArray8, (int) (byte) 0, 0);
        int int12 = incrementalHash32x86_0.end();
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str6, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str7, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-36807446) + "'", int12 == (-36807446));
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringUtf16(byteArray5);
        byte[] byteArray12 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray18, false);
        java.lang.String str22 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray12, byteArray18);
        org.apache.commons.codec.digest.Blake3 blake3_23 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray12);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        java.security.MessageDigest messageDigest29 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest30 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest29);
        java.nio.ByteBuffer byteBuffer32 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest29, byteBuffer32);
        char[] charArray34 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray33);
        org.apache.commons.codec.binary.Hex.encodeHex(byteArray12, (int) (short) 1, (-1310417787), false, charArray34, 1708909655);
        byte[] byteArray37 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray5, byteArray12);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uffff\ufffd" + "'", str9, "\uffff\ufffd");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0A01640101" + "'", str21, "0A01640101");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str22, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(blake3_23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[18, 85, 49, 84, 49, 62, 75, -31]");
        org.junit.Assert.assertNotNull(messageDigest29);
        org.junit.Assert.assertEquals(messageDigest29.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest30);
        org.junit.Assert.assertEquals(messageDigest30.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-99, -100, 49, -97, 2, -122, 80, -111, -15, 37, 12, 117, -65, 27, -89, 78, 99, -88, 116, -118, -52, 81, 70, 55, 112, -19, 51, -79, 52, -22, -103, -31, -100, -50, 83, 84, -24, -52, -24, -5, 46, -124, -89, 47, -93, 90, 18, 13]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "000011010001001001011010101000110010111110100111100001000010111011111011111010001100110011101000010101000101001111001110100111001110000110011001111010100011010010110001001100111110110101110000001101110100011001010001110011001000101001110100101010000110001101001110101001110001101110111111011101010000110000100101111100011001000101010000100001100000001010011111001100011001110010011101");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[6, 109, 119, -2, -117, -51, -93, -26, 48, 58, -111, 27, 15, -16, 0, -29, -27, 115, -81, 1, -10, -35, 12, 40, 71, -1, 29, 4, -109, -9, 36, 93, -55, -105, 12, -16, 102, 101, 124, 90, -34, -54, 75, 37, -35, -61, 40, 3, -96, 19, 6, 112, -74, 108, 33, 109, 62, -115, -32, -98, -86, -36, 91, 23]");
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.language.bm.Languages languages1 = org.apache.commons.codec.language.bm.Languages.getInstance("$6$1ou2WQRN$wPb2jET66b1Yt3NKRbbuDcW9Oz92seTAMTmJFR2C6RwxUlUs.3uOcEju/o87m6tNHZXmiNmYFe/eQLGG3RyfC.");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unable to resolve required resource: $6$1ou2WQRN$wPb2jET66b1Yt3NKRbbuDcW9Oz92seTAMTmJFR2C6RwxUlUs.3uOcEju/o87m6tNHZXmiNmYFe/eQLGG3RyfC.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = binaryCodec0.toByteArray("67702a0ed25a50c46fc0a0fb46a6dfbf5333c9dc25451abdb1eeac93f1e968d5");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[64, 64, 8, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException(throwable2);
        org.apache.commons.codec.EncoderException encoderException4 = new org.apache.commons.codec.EncoderException();
        decoderException3.addSuppressed((java.lang.Throwable) encoderException4);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException(throwable6);
        org.apache.commons.codec.EncoderException encoderException8 = new org.apache.commons.codec.EncoderException();
        decoderException7.addSuppressed((java.lang.Throwable) encoderException8);
        encoderException4.addSuppressed((java.lang.Throwable) encoderException8);
        org.apache.commons.codec.DecoderException decoderException11 = new org.apache.commons.codec.DecoderException("d41d8cd98f00b204e9800998ecf8427e", (java.lang.Throwable) encoderException4);
        org.apache.commons.codec.DecoderException decoderException12 = new org.apache.commons.codec.DecoderException("0f0a92954a6653f75e039d051a1af95b7c9eddf8", (java.lang.Throwable) encoderException4);
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException();
        encoderException4.addSuppressed((java.lang.Throwable) decoderException13);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        org.apache.commons.codec.digest.HmacUtils hmacUtils11 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream12 = null;
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy17 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream18 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, true, (int) (byte) 0, byteArray16, codecPolicy17);
        char[] charArray19 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray16);
        java.lang.String str20 = hmacUtils11.hmacHex(byteArray16);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream22 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, inputStream22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream22);
        byte[] byteArray25 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream22);
        java.lang.String str26 = hmacUtils11.hmacHex(inputStream22);
        org.apache.commons.codec.digest.XXHash32 xXHash32_28 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_28.reset();
        org.apache.commons.codec.binary.Hex hex30 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest31 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer33 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest34 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest31, byteBuffer33);
        char[] charArray36 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer33, true);
        byte[] byteArray37 = hex30.decode(byteBuffer33);
        xXHash32_28.update(byteBuffer33);
        byte[] byteArray39 = hmacUtils11.hmac(byteBuffer33);
        java.lang.String str40 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer33);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteBuffer33);
        java.security.MessageDigest messageDigest42 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils43 = new org.apache.commons.codec.digest.DigestUtils(messageDigest42);
        java.security.MessageDigest messageDigest44 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer46 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest47 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest44, byteBuffer46);
        char[] charArray49 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer46, true);
        java.lang.String str50 = digestUtils43.digestAsHex(byteBuffer46);
        java.security.MessageDigest messageDigest51 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer53 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest54 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest51, byteBuffer53);
        java.lang.String str55 = digestUtils43.digestAsHex(byteBuffer53);
        byte[] byteArray57 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        java.io.InputStream inputStream59 = java.io.InputStream.nullInputStream();
        java.lang.String str60 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray58, inputStream59);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream61 = new org.apache.commons.codec.binary.Base64InputStream(inputStream59);
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream61);
        long long65 = base64InputStream61.skip((long) ' ');
        base64InputStream61.mark((int) (short) 10);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex((java.io.InputStream) base64InputStream61);
        java.lang.String str69 = digestUtils43.digestAsHex((java.io.InputStream) base64InputStream61);
        byte[] byteArray70 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, (java.io.InputStream) base64InputStream61);
        long long74 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray70, 1, (int) ' ', (-965378730));
        long[] longArray78 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray70, (-679748572), 0, (int) '-');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray82 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray70, 629192958, (-1886572454), 214327882);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -1257379497 out of bounds for length 64");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy17 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy17.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str20, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream22);
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str24, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str26, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(messageDigest31);
        org.junit.Assert.assertEquals(messageDigest31.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(messageDigest34);
        org.junit.Assert.assertEquals(messageDigest34.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -34, -57, -84, -23, -76, -37, -115, 67, 87, -100, -83, -67, 9, -22, 96, -118, 21, -19, 105, 126, -18, -106, 21, -117, 25, -52, -55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest42);
        org.junit.Assert.assertEquals(messageDigest42.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest44);
        org.junit.Assert.assertEquals(messageDigest44.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(messageDigest47);
        org.junit.Assert.assertEquals(messageDigest47.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str50, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest51);
        org.junit.Assert.assertEquals(messageDigest51.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(messageDigest54);
        org.junit.Assert.assertEquals(messageDigest54.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str55, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str60, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str62, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str63, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str68, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str69, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-49, -125, -31, 53, 126, -17, -72, -67, -15, 84, 40, 80, -42, 109, -128, 7, -42, 32, -28, 5, 11, 87, 21, -36, -125, -12, -87, 33, -45, 108, -23, -50, 71, -48, -47, 60, 93, -123, -14, -80, -1, -125, 24, -46, -121, 126, -20, 47, 99, -71, 49, -67, 71, 65, 122, -127, -91, 56, 50, 122, -7, 39, -38, 62]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-5958959755249253115L) + "'", long74 == (-5958959755249253115L));
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[-1880030255708689650, -9213226938099595346]");
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_384(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        org.apache.commons.codec.digest.DigestUtils digestUtils37 = new org.apache.commons.codec.digest.DigestUtils(messageDigest36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream39);
        java.nio.ByteBuffer byteBuffer42 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest40, byteBuffer42);
        java.lang.String str44 = digestUtils37.digestAsHex(byteBuffer42);
        org.apache.commons.codec.digest.XXHash32 xXHash32_45 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet46 = null;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet46, byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray49);
        xXHash32_45.update(byteArray51, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec56 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray62);
        java.lang.String str65 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray62, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        java.lang.String str67 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray62);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray62);
        java.lang.Object obj69 = quotedPrintableCodec56.decode((java.lang.Object) byteArray62);
        java.lang.String str70 = quotedPrintableCodec56.getDefaultCharset();
        java.lang.String str71 = quotedPrintableCodec56.getDefaultCharset();
        java.lang.String str73 = quotedPrintableCodec56.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec75 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet76 = null;
        byte[] byteArray78 = new byte[] { (byte) 100 };
        byte[] byteArray79 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet76, byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray79);
        byte[] byteArray81 = uRLCodec75.encode(byteArray80);
        int int82 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray80);
        byte[] byteArray83 = quotedPrintableCodec56.encode(byteArray80);
        java.lang.String str84 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray51, byteArray83);
        byte[] byteArray85 = digestUtils37.digest(byteArray83);
        byte[] byteArray87 = digestUtils37.digest("FFPF");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms88 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.lang.String str89 = hmacAlgorithms88.getName();
        java.lang.String str90 = hmacAlgorithms88.toString();
        org.apache.commons.codec.digest.HmacUtils hmacUtils92 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms88, "c82c8ab22f3a62af4973396a2ad745b3");
        java.nio.ByteBuffer byteBuffer94 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray95 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer94);
        char[] charArray97 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer94, false);
        byte[] byteArray98 = hmacUtils92.hmac(byteBuffer94);
        byte[] byteArray99 = digestUtils37.digest(byteBuffer94);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(messageDigest40);
        org.junit.Assert.assertEquals(messageDigest40.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe" + "'", str44, "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str63, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str65, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AAAAAAA" + "'", str66, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str67, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str68, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTF-8" + "'", str70, "UTF-8");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTF-8" + "'", str71, "UTF-8");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str73, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-690116322) + "'", int82 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d" + "'", str84, "4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[64, 44, -14, -25, -5, 124, -64, 69, 19, -50, 27, -65, 78, -31, 39, 80, -17, 92, -2, -19, -99, 80, 90, 95, -45, -94, -121, 90, 123, -68, -14, -80, -52, -21, 18, -20, 102, 30, 104, 47, 17, 24, -67, 72, -39, 125, 27, 94]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[36, -29, 48, 7, 10, 66, 126, -17, 43, -50, -21, 47, 43, 56, 120, -41, 77, -95, 81, 78, -108, -62, -31, 72, 32, 50, 62, -52, 66, 109, -117, -59, 27, 93, 31, 119, 87, 122, -64, 71, 4, -61, -80, 53, -27, -9, 58, -113]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms88 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms88.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "HmacSHA224" + "'", str89, "HmacSHA224");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "HmacSHA224" + "'", str90, "HmacSHA224");
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertNotNull(charArray97);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray97), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray97), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray97), "[]");
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[45, 81, -92, 97, -13, -45, -92, 24, -106, -108, -68, -87, -56, 118, -108, 38, -43, -67, 47, -120, -53, -74, -102, 44, 114, 86, -85, -121]");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray5);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C8 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C8.reset();
        java.util.BitSet bitSet10 = null;
        byte[] byteArray12 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray13 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet10, byteArray12);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray12);
        pureJavaCrc32C8.update(byteArray12, (-690116322), (-1612190696));
        byte[] byteArray19 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        pureJavaCrc32C8.update(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray27);
        java.lang.String str30 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray27, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray19, byteArray27);
        java.lang.String str33 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray7, byteArray27);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = org.apache.commons.codec.binary.StringUtils.newString(byteArray7, "$6$AhMPu3Qp$zNCB6lxYFBfF8TU7CG/2cesxJznaQWd7N/328wdk1tNtzeOOdcFZyD/aB5QGhWQjEqyVhEHeaYdFHAnVFylZ60");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: $6$AhMPu3Qp$zNCB6lxYFBfF8TU7CG/2cesxJznaQWd7N/328wdk1tNtzeOOdcFZyD/aB5QGhWQjEqyVhEHeaYdFHAnVFylZ60: java.io.UnsupportedEncodingException: $6$AhMPu3Qp$zNCB6lxYFBfF8TU7CG/2cesxJznaQWd7N/328wdk1tNtzeOOdcFZyD/aB5QGhWQjEqyVhEHeaYdFHAnVFylZ60");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[125, -31, -12, -93, -94, -105, -16, -73, 36, -40, 75, 16, 44, 16, 23, -113, 110, -59, 61, -109, -95, 76, -92, -21, -8, -120, -30, -121]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str14, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str28, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str30, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AAAAAAA" + "'", str31, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7fc038273e613e85a19c7853b46ed8e9" + "'", str33, "7fc038273e613e85a19c7853b46ed8e9");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "97048ecdc68cd0b2508de076c5c79b8d2d4562cc546b645ed5a4bf4990db0884171cd9ab0b3e1b29fbc4a9373c7d856b" + "'", str34, "97048ecdc68cd0b2508de076c5c79b8d2d4562cc546b645ed5a4bf4990db0884171cd9ab0b3e1b29fbc4a9373c7d856b");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream6 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream5);
        java.io.OutputStream outputStream7 = java.io.OutputStream.nullOutputStream();
        long long8 = base16InputStream6.transferTo(outputStream7);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream10 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream6, true);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.md2((java.io.InputStream) base16InputStream6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(outputStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms1 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms1, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32 base32_10 = new org.apache.commons.codec.binary.Base32(629192958, byteArray8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain Base32 characters: [}??????$?K?,???n?=??L?????]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms1 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms1.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[125, -31, -12, -93, -94, -105, -16, -73, 36, -40, 75, 16, 44, 16, 23, -113, 110, -59, 61, -109, -95, 76, -92, -21, -8, -120, -30, -121]");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException1);
        java.lang.Throwable[] throwableArray3 = decoderException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset8 = bCodec2.getCharset();
        java.nio.charset.Charset charset9 = org.apache.commons.codec.Charsets.toCharset(charset8);
        org.apache.commons.codec.binary.Hex hex10 = new org.apache.commons.codec.binary.Hex(charset9);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms11 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        javax.crypto.Mac mac17 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms11, byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.digest.DigestUtils.sha512_224(byteArray16);
        byte[] byteArray19 = hex10.encode(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.md2(byteArray16);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms11 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms11.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[125, -31, -12, -93, -94, -105, -16, -73, 36, -40, 75, 16, 44, 16, 23, -113, 110, -59, 61, -109, -95, 76, -92, -21, -8, -120, -30, -121]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[52, 54, 54, 56, 56, 57, 55, 54, 56, 50, 99, 99, 100, 50, 98, 49, 101, 101, 48, 99, 97, 101, 56, 100, 99, 53, 53, 57, 52, 55, 50, 57, 49, 102, 56, 49, 57, 99, 99, 53, 57, 101, 101, 49, 50, 54, 102, 53, 98, 100, 50, 52, 51, 98, 49, 56, 53, 50, 53, 55, 55, 52, 49, 52, 52, 49, 51, 97, 101, 101, 100, 53, 55, 56, 48, 98, 53, 102, 98, 49, 49, 48, 57, 48, 48, 51, 56, 55, 49, 53, 98, 101, 101, 100, 49, 98, 48, 48, 55, 49, 52, 97, 49, 53, 98, 51, 49, 99, 56, 100, 57, 54, 55, 52, 102, 98, 100, 98, 100, 102, 55, 102, 100, 52, 49, 57, 49, 99]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-37, -65, 114, 83, 74, -128, -107, 55, 35, -78, 13, 2, 122, -51, 54, 74]");
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.lang.Object obj6 = hex2.encode((java.lang.Object) byteArray5);
        java.lang.String str7 = hex2.getCharsetName();
        org.apache.commons.codec.binary.Hex hex8 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        char[] charArray14 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer11, true);
        byte[] byteArray15 = hex8.decode(byteBuffer11);
        byte[] byteArray16 = hex2.decode(byteBuffer11);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray16, (-755363659));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -755363660 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF-8" + "'", str7, "UTF-8");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        byte[] byteArray3 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        javax.crypto.Mac mac4 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[61, 68, 68, 61, 48, 69, 76, 94, 61, 65, 70, 61, 65, 55, 61, 70, 49, 61, 49, 50, 61, 49, 65, 61, 49, 57, 61, 48, 53, 61, 56, 51, 61, 56, 54, 61, 48, 56, 61, 49, 52, 61, 65, 50, 121, 61, 65, 53, 126, 110, 61, 69, 53, 61, 68, 48, 61, 69, 51, 38, 61, 66, 57, 85, 39, 61, 66, 50]");
        org.junit.Assert.assertNotNull(mac4);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.nio.ByteBuffer byteBuffer3 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        java.lang.String str4 = digestUtils1.digestAsHex(byteBuffer3);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393" + "'", str4, "3ff957f5f15f4601a47dbcf1ec96f77aef863a3ec334ff6566e85543ec3b5ab947e2aa3f42acfa577178bfe61e2eb393");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils5 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, "UTF-8");
        byte[] byteArray7 = hmacUtils5.hmac("477300|577300");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms8 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray13);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray20, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray20);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray20);
        javax.crypto.Mac mac27 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray20);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str39 = base32_29.encodeAsString(byteArray38);
        org.apache.commons.codec.digest.HmacUtils hmacUtils40 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms8, byteArray38);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray38, "$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        byte[] byteArray43 = hmacUtils5.hmac(byteArray38);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream44 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0, true, (-488200341), byteArray38);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[84, 123, 59, 93, -87, 47, 48, -71, 44, -94, -14, -32, -80, -66, -108, 48]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms8 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms8.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str21, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str23, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AAAAAAA" + "'", str24, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str25, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str26, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ABUAA2IAEE======" + "'", str39, "ABUAA2IAEE======");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3." + "'", str42, "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[55, 31, -68, -49, -12, -124, -49, -83, -112, -91, -128, -105, 84, -15, -101, 20]");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.codec.net.PercentCodec percentCodec0 = new org.apache.commons.codec.net.PercentCodec();
        byte[] byteArray3 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray3, byteArray9);
        char[] charArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray9);
        java.lang.Object obj15 = percentCodec0.decode((java.lang.Object) byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        long[] longArray22 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray18, 1164493051, 0, (int) '4');
        javax.crypto.Mac mac23 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray18);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.lang.Object obj25 = percentCodec0.decode((java.lang.Object) byteArray18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str10, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0A01640101" + "'", str12, "0A01640101");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str13, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-2824814558701066679, -4809301050055417955]");
        org.junit.Assert.assertNotNull(mac23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[57, 89, 110, 72, 51, 56, 57, 119, 82, 52, 114, 98, 72, 71, 107, 89, 43, 76, 121, 116, 106, 100, 82, 119, 75, 84, 80, 88, 108, 116, 55, 79, 69, 47, 78, 120, 98, 69, 122, 54, 102, 100, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        long long1 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.update(1745848163);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream6 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream5);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base64InputStream5);
        base64InputStream5.close();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("");
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream6 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3, true);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream7 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream6);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream9 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream6, true);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream21 = new org.apache.commons.codec.binary.Base32InputStream(inputStream16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex((java.io.InputStream) base32InputStream21);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms23 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet24 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet24, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        javax.crypto.Mac mac29 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms23, byteArray28);
        org.apache.commons.codec.digest.HmacUtils hmacUtils31 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms23, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec33 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray39);
        java.lang.String str42 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray39, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray39);
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray39);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray39);
        java.lang.Object obj46 = quotedPrintableCodec33.decode((java.lang.Object) byteArray39);
        org.apache.commons.codec.digest.HmacUtils hmacUtils47 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms23, byteArray39);
        byte[] byteArray49 = hmacUtils47.hmac("0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        int int50 = base32InputStream21.read(byteArray49);
        org.apache.commons.codec.binary.Base32 base32_52 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet53 = null;
        byte[] byteArray55 = new byte[] { (byte) 100 };
        byte[] byteArray56 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet53, byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray56);
        boolean boolean59 = base32_52.isInAlphabet(byteArray57, false);
        byte[] byteArray61 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str62 = base32_52.encodeAsString(byteArray61);
        java.security.MessageDigest messageDigest63 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest64 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream65 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest66 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest64, inputStream65);
        java.lang.String str67 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream65);
        byte[] byteArray68 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream65);
        java.security.MessageDigest messageDigest69 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest63, inputStream65);
        java.lang.String str70 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray61, inputStream65);
        java.lang.String str71 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray49, inputStream65);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str22, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms23 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms23.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac29);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str40, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str42, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "AAAAAAA" + "'", str43, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str44, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str45, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-12, 93, -49, 17, -103, 67, 92, -1, -23, 2, -103, 20, 20, 31, -14, -34, 8, 44, -47, -108, 7, -93, 58, -124, -99, -107, -50, -35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ABUAA2IAEE======" + "'", str62, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest63);
        org.junit.Assert.assertEquals(messageDigest63.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest64);
        org.junit.Assert.assertEquals(messageDigest64.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(messageDigest66);
        org.junit.Assert.assertEquals(messageDigest66.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str67, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest69);
        org.junit.Assert.assertEquals(messageDigest69.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str70, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "869b21bd86632b19ad0eb7d23bd873b92f7df68a83f51ef92ea767a8e440543016f35dd389040de0f5c9b968337da5801ad86802a245c2db69c54ce69fddab63" + "'", str71, "869b21bd86632b19ad0eb7d23bd873b92f7df68a83f51ef92ea767a8e440543016f35dd389040de0f5c9b968337da5801ad86802a245c2db69c54ce69fddab63");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((byte) -1);
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str8 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray6, true);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray6);
        java.lang.String str10 = base16_2.encodeAsString(byteArray6);
        org.apache.commons.codec.digest.Blake3 blake3_11 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray6);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str14 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray13);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec16 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.lang.String str27 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray22);
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray22);
        java.lang.Object obj29 = quotedPrintableCodec16.decode((java.lang.Object) byteArray22);
        java.lang.String str30 = quotedPrintableCodec16.getDefaultCharset();
        byte[] byteArray32 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        java.io.InputStream inputStream34 = java.io.InputStream.nullInputStream();
        java.lang.String str35 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray33, inputStream34);
        java.io.InputStream inputStream36 = java.io.InputStream.nullInputStream();
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream36);
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream36);
        java.lang.String str39 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray33, inputStream36);
        java.lang.Object obj40 = quotedPrintableCodec16.encode((java.lang.Object) byteArray33);
        byte[] byteArray41 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray13, byteArray33);
        blake3_11.doFinalize(byteArray41);
        boolean boolean44 = base32_1.isInAlphabet(byteArray41, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ffffff" + "'", str8, "ffffff");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str9, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FFFFFF" + "'", str10, "FFFFFF");
        org.junit.Assert.assertNotNull(blake3_11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str27, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str28, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTF-8" + "'", str30, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str35, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str37, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str38, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str39, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-7, -56, 1, -8, -69, -108, -117, 0, -40, -63, -128, 27, 16, 21, -27, -48]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray3 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] {};
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList4 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4, phonemeArray3);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList6 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList4);
        org.apache.commons.codec.language.bm.Rule rule7 = new org.apache.commons.codec.language.bm.Rule("=?UTF-8?B?U0hBLTIyNA==?=", "$1$FivXNt8U$ItIalCUBqAE1stNT0FzGp/", "\000\000\000\000\000", (org.apache.commons.codec.language.bm.Rule.PhonemeExpr) phonemeList6);
        boolean boolean10 = rule7.patternAndContextMatches((java.lang.CharSequence) "041312381228231821282818232313", 852759869);
        org.junit.Assert.assertNotNull(phonemeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult7 = doubleMetaphone0.new DoubleMetaphoneResult((int) (short) 100);
        java.lang.String str10 = doubleMetaphone0.doubleMetaphone("PKKMYF", false);
        boolean boolean14 = doubleMetaphone0.isDoubleMetaphoneEqual("1d39b7b6097d46bfec94ab93ba5cad5488e66d759f8919dd10c80cc13d46a39fa0bfe924306de0c374aecab97706b204", "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9", true);
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder15 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str17 = beiderMorseEncoder15.encode("d41d8cd98f00b204e9800998ecf8427e");
        java.lang.String str19 = beiderMorseEncoder15.encode("SHA3-224");
        org.apache.commons.codec.language.bm.RuleType ruleType20 = beiderMorseEncoder15.getRuleType();
        boolean boolean21 = beiderMorseEncoder15.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType22 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.RuleType ruleType23 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet24 = org.apache.commons.codec.language.bm.Languages.ANY_LANGUAGE;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap25 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType22, ruleType23, languageSet24);
        org.apache.commons.codec.language.bm.RuleType ruleType26 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine29 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType22, ruleType26, false, (int) ' ');
        org.apache.commons.codec.language.bm.Languages languages30 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType22);
        beiderMorseEncoder15.setNameType(nameType22);
        boolean boolean32 = beiderMorseEncoder15.isConcat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = doubleMetaphone0.encode((java.lang.Object) boolean32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: DoubleMetaphone encode parameter is not of type String");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PKMF" + "'", str10, "PKMF");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi" + "'", str17, "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "sa|so" + "'", str19, "sa|so");
        org.junit.Assert.assertTrue("'" + ruleType20 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType20.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + nameType22 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType22.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType23 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType23.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertNotNull(languageSet24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(languages30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = beiderMorseEncoder0.getRuleType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType4 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder3.setRuleType(ruleType4);
        org.apache.commons.codec.language.bm.NameType nameType6 = beiderMorseEncoder3.getNameType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder7 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType8 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder7.setRuleType(ruleType8);
        org.apache.commons.codec.language.bm.RuleType ruleType10 = beiderMorseEncoder7.getRuleType();
        java.lang.String[] strArray49 = new java.lang.String[] { "ffffff", "663b90c899fa25a111067be0c22ffc64dcf581c2", "SHA-224", "0Acd8L3u4hVxI", "UTF-16LE", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "2ef0725975afd171e9cb76444b4969c3", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "ffffff", "6IiiRyxmjcARw", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "0A01640101", "2ef0725975afd171e9cb76444b4969c3", "663b90c899fa25a111067be0c22ffc64dcf581c2", "", "ffffff", "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", "c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", "6IiiRyxmjcARw", "663b90c899fa25a111067be0c22ffc64dcf581c2", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "MD2", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "99448658175a0534e08dbca1fe67b58231a53eec", "0A01640101", "0A01640101", "1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "SHA3-256", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "", "663b90c899fa25a111067be0c22ffc64dcf581c2", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet52 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet50);
        boolean boolean53 = languageSet52.isSingleton();
        org.apache.commons.codec.language.bm.NameType nameType54 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang55 = org.apache.commons.codec.language.bm.Lang.instance(nameType54);
        org.apache.commons.codec.language.bm.Languages languages56 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType54);
        org.apache.commons.codec.language.bm.RuleType ruleType57 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType58 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang59 = org.apache.commons.codec.language.bm.Lang.instance(nameType58);
        org.apache.commons.codec.language.bm.NameType nameType60 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder61 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType62 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder61.setRuleType(ruleType62);
        org.apache.commons.codec.language.bm.NameType nameType64 = beiderMorseEncoder61.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType65 = beiderMorseEncoder61.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet66 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap67 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType60, ruleType65, languageSet66);
        org.apache.commons.codec.language.bm.NameType nameType68 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang69 = org.apache.commons.codec.language.bm.Lang.instance(nameType68);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet71 = lang69.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet73 = lang69.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap74 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType58, ruleType65, languageSet73);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap75 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType54, ruleType57, languageSet73);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet76 = languageSet52.restrictTo(languageSet73);
        java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList77 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType6, ruleType10, languageSet52);
        beiderMorseEncoder0.setRuleType(ruleType10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertTrue("'" + ruleType4 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType4.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType6 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType6.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType8 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType8.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType10 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType10.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(languageSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + nameType54 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType54.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang55);
        org.junit.Assert.assertNotNull(languages56);
        org.junit.Assert.assertTrue("'" + ruleType57 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType57.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType58 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType58.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang59);
        org.junit.Assert.assertTrue("'" + nameType60 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType60.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType62 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType62.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType64 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType64.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType65 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType65.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + nameType68 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType68.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang69);
        org.junit.Assert.assertNotNull(languageSet71);
        org.junit.Assert.assertNotNull(languageSet73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(languageSet76);
        org.junit.Assert.assertNotNull(ruleList77);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.binary.Hex.decodeHex("$apr1$0a6d29eb$88F7hdkOqgQi8ZTrHQlZN0");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Odd number of characters.");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.SEPHARDIC;
        beiderMorseEncoder0.setNameType(nameType2);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator4 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) beiderMorseEncoder0);
        byte[] byteArray6 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.lang.String str9 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray7, inputStream8);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream10 = new org.apache.commons.codec.binary.Base64InputStream(inputStream8);
        byte[] byteArray11 = org.apache.commons.codec.digest.DigestUtils.sha1((java.io.InputStream) base64InputStream10);
        int int13 = stringEncoderComparator4.compare((java.lang.Object) byteArray11, (java.lang.Object) "fa0ab302e8502bdf706a9c45df0c8842");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec14 = new org.apache.commons.codec.binary.BinaryCodec();
        java.nio.charset.Charset charset15 = null;
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.toCharset(charset15);
        org.apache.commons.codec.binary.Hex hex17 = new org.apache.commons.codec.binary.Hex(charset16);
        java.lang.String str18 = hex17.toString();
        java.util.BitSet bitSet19 = null;
        byte[] byteArray21 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray22 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet19, byteArray21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        java.lang.String str25 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray21);
        byte[] byteArray26 = hex17.decode(byteArray21);
        java.lang.Object obj27 = binaryCodec14.decode((java.lang.Object) byteArray26);
        byte[] byteArray29 = binaryCodec14.toByteArray("=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=");
        java.io.InputStream inputStream30 = java.io.InputStream.nullInputStream();
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream30);
        int int32 = stringEncoderComparator4.compare((java.lang.Object) "=?UTF-8?B?NTRkNzEwN2FhMjRiYzM2YjhlODAxMzRiOGU0ZWEzNGMwMTg1YmYyMjZhMzA1Yjk1MTFhMzcxMTE3M2I4ZjQ1MGU3NDk0OTUyNzcwZWM2NjNkOTBmZTVmOTA2ZGY4ZjI3?=", (java.lang.Object) inputStream30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.SEPHARDIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.SEPHARDIC));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str9, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str23, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0, 64, 0, 0, 68, 0, 4, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        byte[] byteArray1 = org.apache.commons.codec.binary.Hex.decodeHex("663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[102, 59, -112, -56, -103, -6, 37, -95, 17, 6, 123, -32, -62, 47, -4, 100, -36, -11, -127, -62]");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base16 base16_7 = new org.apache.commons.codec.binary.Base16(false);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base16_7, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = base16_7.decode("AR3B0GOjzM7MY");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid octet in encoded value: 82");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.codec.binary.BinaryCodec.fromAscii(byteArray0);
        org.apache.commons.codec.net.URLCodec uRLCodec3 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray7);
        byte[] byteArray10 = uRLCodec3.decode(byteArray7);
        byte[] byteArray11 = null;
        byte[] byteArray12 = uRLCodec3.decode(byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray18);
        java.lang.String str21 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_22 = new org.apache.commons.codec.binary.Base16();
        boolean boolean24 = base16_22.isInAlphabet("AAAAAAA");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str30 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray28, true);
        java.lang.String str31 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray28);
        boolean boolean33 = base16_22.isInAlphabet(byteArray28, true);
        byte[] byteArray34 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray18, byteArray28);
        byte[] byteArray35 = uRLCodec3.encode(byteArray34);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = uRLCodec3.encode(byteArray43);
        java.io.OutputStream outputStream52 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream53 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream52);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream55 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream53, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream57 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream53, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_60 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet61 = null;
        byte[] byteArray63 = new byte[] { (byte) 100 };
        byte[] byteArray64 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet61, byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray64);
        xXHash32_60.update(byteArray66, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream70 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream53, true, 760066800, byteArray66);
        java.security.MessageDigest messageDigest71 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream72 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest73 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest71, inputStream72);
        java.lang.String str74 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream72);
        byte[] byteArray75 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream72);
        java.lang.String str76 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray66, inputStream72);
        java.lang.String str77 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray43, inputStream72);
        byte[] byteArray79 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray79);
        java.io.InputStream inputStream81 = java.io.InputStream.nullInputStream();
        java.lang.String str82 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray80, inputStream81);
        java.io.InputStream inputStream83 = java.io.InputStream.nullInputStream();
        java.lang.String str84 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream83);
        java.lang.String str85 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream83);
        java.lang.String str86 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray80, inputStream83);
        byte[] byteArray87 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray43, inputStream83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray0, inputStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null key");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str9, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str19, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str21, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ffffff" + "'", str30, "ffffff");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str31, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48, 37, 48, 48]");
        org.junit.Assert.assertNotNull(outputStream52);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(messageDigest71);
        org.junit.Assert.assertEquals(messageDigest71.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream72);
        org.junit.Assert.assertNotNull(messageDigest73);
        org.junit.Assert.assertEquals(messageDigest73.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str74, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a" + "'", str76, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str77, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str82, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str84, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str85, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str86, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream4 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "rules");
        base16OutputStream4.write(byteArray7);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-123, 122, 75, -86, 60, 67, -64, 93, 74, 6, 45, 31, -24, 67, -120, -26, 110, -26, -56, 21]");
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        byte[] byteArray17 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.lang.String str20 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream19);
        java.io.InputStream inputStream21 = java.io.InputStream.nullInputStream();
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray18, inputStream21);
        java.lang.Object obj25 = quotedPrintableCodec1.encode((java.lang.Object) byteArray18);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray18);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str20, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str22, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str23, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str24, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fad2595114e5c45a896f3481bb63e7097f9f106fd3591c1e37c30fee" + "'", str26, "fad2595114e5c45a896f3481bb63e7097f9f106fd3591c1e37c30fee");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        boolean boolean3 = bCodec2.isStrictDecoding();
        java.lang.Object obj5 = bCodec2.encode((java.lang.Object) "NLKTPMA111");
        java.lang.String str7 = bCodec2.encode("\000h\000i\000!");
        java.lang.String str8 = bCodec2.getDefaultCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj5 + "' != '" + "=?UTF-8?B?TkxLVFBNQTExMQ==?=" + "'", obj5, "=?UTF-8?B?TkxLVFBNQTExMQ==?=");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "=?UTF-8?B?AGgAaQAh?=" + "'", str7, "=?UTF-8?B?AGgAaQAh?=");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        incrementalHash32x86_0.start(1);
        incrementalHash32x86_0.start(0);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512_224("48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray6 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray2, (-679748572), 1, (int) '-');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -679748572 out of bounds for length 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[99, 75, -19, -76, -91, 73, 31, -82, 53, -55, 126, 22, -40, -16, -34, -57, 30, -65, -104, 102, 95, 72, -19, 98, 121, 74, 59, 85]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[89, 48, 118, 116, 116, 75, 86, 74, 72, 54, 52, 49, 121, 88, 52, 87, 50, 80, 68, 101, 120, 120, 54, 95, 109, 71, 90, 102, 83, 79, 49, 105, 101, 85, 111, 55, 86, 81]");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, false, 1757052779);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray11);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 65, 65, 65, 65, 65, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[103, 112, 42, 14, -46, 90, 80, -60, 111, -64, -96, -5, 70, -90, -33, -65, 83, 51, -55, -36, 37, 69, 26, -67, -79, -18, -84, -109, -15, -23, 104, -43]");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream8 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest7, inputStream8);
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream8);
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer13 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest11, byteBuffer13);
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest10, byteBuffer13);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray15);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "5bdc74b9d1416f740f6037b2c6c5d4edf2a346d830527135302252c92107037d" + "'", str16, "5bdc74b9d1416f740f6037b2c6c5d4edf2a346d830527135302252c92107037d");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("96dd4e7e704709544e2ff20a87f44da7dc5ebef6b0b5e59f2f680c7f8241d61a");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex("7fc038273e613e85a19c7853b46ed8e9");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "afd393fcb25636a46f4756eded0d96310222f48fd8e72e1503ee7064" + "'", str1, "afd393fcb25636a46f4756eded0d96310222f48fd8e72e1503ee7064");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("66/bcRxcmsqC.");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray2, byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray2, "1949d07c900ec5bb8c2a26a6b1fc8faa1ad64bb36c17cc7ace38172381cecf21308c73111beb88e7369b5c8d20e48d29");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 1949d07c900ec5bb8c2a26a6b1fc8faa1ad64bb36c17cc7ace38172381cecf21308c73111beb88e7369b5c8d20e48d29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[54, 54, 47, 98, 99, 82, 120, 99, 109, 115, 113, 67, 46]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63, 1, 17, -63, -115, -116, -6, -55, 9, 49, 50, -34, -91, -71, -67, -112, 43, 119, 4, 96, -48, -17, -38, 38, 97, -56, 50, -122, 116, -61, -112, -68, -7, -104, -78, -95, 56, 21, -55, 111, -109, -58, 40, -1, 73, -117, -89, -94]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f91741f9e8de0a60bd838e2c13edd242c32f87272c6a0fabefebf8499a5f29aa" + "'", str6, "f91741f9e8de0a60bd838e2c13edd242c32f87272c6a0fabefebf8499a5f29aa");
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.lang.String str9 = bCodec2.encode("\u1d74\u5560\u9deb\u2399\ue3a9\ue89d\uf686\uef20\u8b69\u2d45\ube17\ud2e2\u8c21\ufffd\u8d2e");
        boolean boolean10 = bCodec2.isStrictDecoding();
        java.nio.charset.Charset charset11 = bCodec2.getCharset();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "=?UTF-8?B?4bW05ZWg6ber4o6Z7o6p7qKd75qG7ryg6K2p4rWF67iX7Yui6LCh77+96LSu?=" + "'", str9, "=?UTF-8?B?4bW05ZWg6ber4o6Z7o6p7qKd75qG7ryg6K2p4rWF67iX7Yui6LCh77+96LSu?=");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$6$X8jRqUQt$f4Uob5BOcMuwkXZodo8Ty80pd9AGfD0SQU0ibBjhdzbAyytXiKp.EmPT5SJ5FZE43YRXQiuc3RDQpgAiznTFq/");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[90, -13, -16, -42, -23, 43, 97, 52, -42, -89, -87, -32, 74, 29, -26, 117, 92, -40, 23, 66]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream19 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true, 1, byteArray11);
        base64OutputStream19.close();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream19);
        base64OutputStream19.flush();
        java.io.OutputStream outputStream23 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_25 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream27 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream23, (org.apache.commons.codec.binary.BaseNCodec) base16_25, false);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str31 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray30);
        long long32 = base16_25.getEncodedLength(byteArray30);
        byte[] byteArray34 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("");
        java.lang.String str35 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray30, byteArray34);
        java.lang.String str36 = org.apache.commons.codec.digest.DigestUtils.md2Hex(byteArray30);
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray30);
        base64OutputStream19.write(byteArray30);
        base64OutputStream19.write((-1514623625));
        base64OutputStream19.write(76);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(outputStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\000\ufffd" + "'", str31, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4L + "'", long32 == 4L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776" + "'", str35, "7c7ad975a9a62c2a236991bb6b32bc68e48756ea8523b9bb1e83628af7b37776");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2380d6beadfa549e13fa22c7639cf9f1" + "'", str36, "2380d6beadfa549e13fa22c7639cf9f1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ab58a8ecd617b254b3bfc56ff14d5a91d6b42d26a5b0a13d1caa38fbca4cef66" + "'", str37, "ab58a8ecd617b254b3bfc56ff14d5a91d6b42d26a5b0a13d1caa38fbca4cef66");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md5("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        long[] longArray3 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray2);
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray4);
        long[] longArray6 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray4);
        org.apache.commons.codec.binary.BinaryCodec binaryCodec7 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray10 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray9, false);
        byte[] byteArray13 = binaryCodec7.encode(byteArray9);
        java.lang.String str14 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray4, byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[123, 118, -12, -87, 41, 124, 1, 20, 35, -56, -84, -61, -49, 11, -8, -51]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-3897760812301620693, 1850759082348605938]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[123, 118, 61, 70, 52, 61, 65, 57, 41, 124, 61, 48, 49, 61, 49, 52, 35, 61, 67, 56, 61, 65, 67, 61, 67, 51, 61, 67, 70, 61, 48, 66, 61, 70, 56, 61, 67, 68]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d" + "'", str5, "bffb5246c732eb671394a8309be599085f6fc1f9a9072c1b1f8c4cd5c8d86980d6d208dad1c9819010bce7076f85cb4d");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-2785090182695012860, 9048661735641716650]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str12, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1dafb4883502066a147fb8a7fabf1856" + "'", str14, "1dafb4883502066a147fb8a7fabf1856");
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean8 = base64_7.isStrictDecoding();
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream10 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base64_7, true);
        boolean boolean11 = baseNCodecOutputStream10.isStrictDecoding();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream12 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream10);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str17 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray16);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C18 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C18.reset();
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray23 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet20, byteArray22);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray22);
        pureJavaCrc32C18.update(byteArray22, (-690116322), (-1612190696));
        byte[] byteArray29 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        pureJavaCrc32C18.update(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str38 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray37);
        java.lang.String str40 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray37, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray42 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray29, byteArray37);
        byte[] byteArray43 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray16, byteArray37);
        byte[] byteArray44 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream45 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) baseNCodecOutputStream10, false, (-1310417787), byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [??>=???0??p?????????g?iJX??]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str17, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str24, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str38, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str40, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "AAAAAAA" + "'", str41, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-114, 101, -27, -33, -64, -43, -114, -65, 30, 45, 67, 45, 43, 5, -71, 0, -128, 63, -125, -108]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, false);
        byte[] byteArray8 = base64InputStream7.readAllBytes();
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha(byteArray8);
        char[] charArray11 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray10);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray10);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "0000100100000111110110001010111110010000000110000110000010010101111011111011111101010101001100100000110101001011011010110101111011101110101000110011100111011010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "0000100100000111110110001010111110010000000110000110000010010101111011111011111101010101001100100000110101001011011010110101111011101110101000110011100111011010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "$6$er1D8kiu$4hOdS/HgioboK.DBMFGi3LGc9ckSlNDqCkt7NBBCl/XLf.OoIW6D61t0XdYJUrSt1eWYRDaITreCNWVg8JR/d1" + "'", str12, "$6$er1D8kiu$4hOdS/HgioboK.DBMFGi3LGc9ckSlNDqCkt7NBBCl/XLf.OoIW6D61t0XdYJUrSt1eWYRDaITreCNWVg8JR/d1");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        org.apache.commons.codec.net.URLCodec uRLCodec11 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = new byte[] { (byte) 100 };
        byte[] byteArray15 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet12, byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray15);
        byte[] byteArray17 = uRLCodec11.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray5, byteArray17);
        java.lang.String str19 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray5);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray25, false);
        byte[] byteArray29 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray5, byteArray25);
        char[] charArray30 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray25);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250" + "'", str18, "25eb324d5cbcf7d6a2d43a8ee391909fac844ca75ccba6c4d1e9e11db75c278ec2035c141da99ebab0d42aa88ced09405acce216e1d48ce94f20d7df9187e250");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "$6$i9RVz8BO$5glPh7Xac2ZMx..nb/uy2/GFD2.lUhwX7nx2MfAzIuJM7fnv3Jni68mrF6KVMLbghLnP6KpkYHtKJQkx2KFoX0" + "'", str19, "$6$i9RVz8BO$5glPh7Xac2ZMx..nb/uy2/GFD2.lUhwX7nx2MfAzIuJM7fnv3Jni68mrF6KVMLbghLnP6KpkYHtKJQkx2KFoX0");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0A01640101" + "'", str28, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-15, 127, -61, 31, -42, 32, 12, -117, -90, 38, -32, -71, -1, 50, -93, -93]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "0000000100000001011001000000000100001010");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer2 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, byteBuffer2);
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C4 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C4.reset();
        java.util.BitSet bitSet6 = null;
        byte[] byteArray8 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray9 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet6, byteArray8);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray8);
        pureJavaCrc32C4.update(byteArray8, (-690116322), (-1612190696));
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        pureJavaCrc32C4.update(byteArray15);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray23);
        java.lang.String str26 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray23, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray15, byteArray23);
        java.util.BitSet bitSet29 = null;
        byte[] byteArray31 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray32 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet29, byteArray31);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray31);
        byte[] byteArray34 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray15, byteArray31);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true, (int) '4');
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.lang.String str40 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream39);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream41 = new org.apache.commons.codec.binary.Base32InputStream(inputStream39);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray15, inputStream39);
        java.security.MessageDigest messageDigest43 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest3, inputStream39);
        java.util.BitSet bitSet44 = null;
        byte[] byteArray46 = new byte[] { (byte) 100 };
        byte[] byteArray47 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet44, byteArray46);
        java.lang.String str48 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest43, byteArray47);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "MD2 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "MD2 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str10, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str24, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str26, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AAAAAAA" + "'", str27, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str33, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str40, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b" + "'", str42, "69d83cc7c720d684df9b885b960a05f921f60c50d3c5e12ff01d03ea19d6383b");
        org.junit.Assert.assertNotNull(messageDigest43);
        org.junit.Assert.assertEquals(messageDigest43.toString(), "MD2 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "b6ZkvzSjLAhfw" + "'", str48, "b6ZkvzSjLAhfw");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-16, -42, -48, -125, -23, 108, 57, 93, -58, -40, 102, 68, 122, 93, 0, -93]");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.apache.commons.codec.DecoderException decoderException1 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.EncoderException encoderException2 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException1);
        org.apache.commons.codec.DecoderException decoderException3 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException2);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils14 = new org.apache.commons.codec.digest.DigestUtils(messageDigest13);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer17 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, byteBuffer17);
        char[] charArray20 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer17, true);
        java.lang.String str21 = digestUtils14.digestAsHex(byteBuffer17);
        byte[] byteArray22 = digestUtils1.digest(byteBuffer17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = org.apache.commons.codec.binary.StringUtils.newString(byteArray22, "AGgAaQAh");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: AGgAaQAh: java.io.UnsupportedEncodingException: AGgAaQAh");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str21, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        byte[] byteArray3 = digestUtils1.digest("000000");
        byte[] byteArray5 = digestUtils1.digest("c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray5);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-88, -42, -80, 29, 31, -10, 45, 62, -11, -91, -46, -43, 53, 73, -34, 84, 112, 53, 75, 16, 63, 41, -41, -12, -84, 58, -45, 89, -52, 51, -89, -67, -86, -127, 98, 92, -126, 40, 94, 76, 56, -43, 105, 69, -115, -59, 104, 41]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[120, -123, 96, -18, -56, -24, 111, 82, -85, 10, -94, -42, 108, 105, -108, -90, 92, 87, 13, -15, 20, 9, -55, 48, 23, -88, 27, 106, 106, -102, 90, -100, -115, -5, -31, 75, -37, -104, 30, -99, -94, 4, 52, -102, 120, -19, -67, -14]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-88, -55, -107, 53, 79, -2, 114, 12, -98, 111, 122, 59, 52, 47, 32, -94, -3, -22, -109, 31, -58, 108, 53, -48, 103, 58, 44, -69, 35, -83, -8, 7, -55, 72, 80, -110, 17, 71, 13, 19, -16, 83, 35, -113, -6, -20, 34, 97, 89, 2, 58, 124, 63, 102, 73, 69, -22, 114, -67, -101, -96, -40, 111, -17]");
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("ftSeakafpkbdadbapkedp|ftSeakafpkbdadbaptsedp|ftSeakafptsbdadbapkedp|ftSeakafptsbdadbaptsedp|ftseakafpkbdadbapkedp|ftseakafpkbdadbaptsedp|ftseakafptsbdadbapkedp|ftseakafptsbdadbaptsedp|ftseatsafpkbdadbapkedp|ftseatsafpkbdadbaptsedp|ftseatsafptsbdadbapkedp|ftseatsafptsbdadbaptsedp|vdZeadZafbdZbdadbabdZedp|vdZeadZafbdZbdadbapkedp|vdZeadZafpkbdadbabdZedp|vdZeadZafpkbdadbapkedp|vdZeakafbdZbdadbabdZedp|vdZeakafbdZbdadbapkedp|vdZeakafpkbdadbabdZedp|vdZeakafpkbdadbapkedp");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.lang.String str2 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex("a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "02fb08e08cb381369705eeb200dd1b33" + "'", str2, "02fb08e08cb381369705eeb200dd1b33");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream3 = new org.apache.commons.codec.binary.Base16InputStream(inputStream0, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy6 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream7 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream3, false, false, codecPolicy6);
        boolean boolean8 = base16InputStream3.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha1((java.io.InputStream) base16InputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + codecPolicy6 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy6.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        pureJavaCrc32C0.update(3527094);
        long long16 = pureJavaCrc32C0.getValue();
        long long17 = pureJavaCrc32C0.getValue();
        pureJavaCrc32C0.update((-2042891860));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4292301682L + "'", long16 == 4292301682L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4292301682L + "'", long17 == 4292301682L);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        baseNCodecOutputStream4.eof();
        org.apache.commons.codec.binary.Base32 base32_7 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream9 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream4, (org.apache.commons.codec.binary.BaseNCodec) base32_7, true);
        java.lang.Object obj11 = base32_7.decode((java.lang.Object) "074144668286427481268138212338282381323183123");
        java.util.BitSet bitSet12 = null;
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray15 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet12, byteArray14);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.lang.Object obj18 = base32_7.encode((java.lang.Object) byteArray17);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream20 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest19, inputStream20);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream20);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream20);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        org.apache.commons.codec.CodecPolicy codecPolicy37 = base32_29.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream38 = new org.apache.commons.codec.binary.Base32InputStream(inputStream20, false, (-965378730), byteArray27, codecPolicy37);
        byte[] byteArray39 = base32_7.decode(byteArray27);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str16, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str22, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str23, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy37 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy37.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-46, 30, 28, 67]");
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.codec.language.Soundex soundex1 = new org.apache.commons.codec.language.Soundex("F260206");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.SEPHARDIC;
        beiderMorseEncoder0.setNameType(nameType2);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator4 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) beiderMorseEncoder0);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = beiderMorseEncoder0.getRuleType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.SEPHARDIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.SEPHARDIC));
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteBuffer4);
        char[] charArray7 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer4, true);
        java.lang.String str8 = digestUtils1.digestAsHex(byteBuffer4);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer11 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest9, byteBuffer11);
        java.lang.String str13 = digestUtils1.digestAsHex(byteBuffer11);
        byte[] byteArray15 = digestUtils1.digest("=000=000=000=000=001=000=001=000=000=000=000=000=001=001=000=001=000=001=00=\r\n1=000=001=000=000=000=000=001=000=000=000=000=000=001=000=001=000=001=000=\r\n=000=000=001=000=001=001=000=000=000=000=001=000=001=000=000=000=000=000=00=\r\n1=000=001=001=000=000=001=001=001=000=001=000=000=000=001=001=001=000=001=\r\n=000=000=000=000=000=001");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms16 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet17, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray20);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms16, byteArray21);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray28, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray28);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray28);
        javax.crypto.Mac mac35 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms16, byteArray28);
        java.lang.String str36 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray28);
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream38 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest39 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest37, inputStream38);
        byte[] byteArray41 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        java.io.InputStream inputStream43 = java.io.InputStream.nullInputStream();
        java.lang.String str44 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray42, inputStream43);
        java.io.InputStream inputStream45 = java.io.InputStream.nullInputStream();
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream45);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream45);
        java.lang.String str48 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray42, inputStream45);
        java.security.MessageDigest messageDigest49 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest37, inputStream45);
        java.lang.String str50 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray28, inputStream45);
        java.lang.String str51 = digestUtils1.digestAsHex(inputStream45);
        java.nio.ByteBuffer byteBuffer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = digestUtils1.digestAsHex(byteBuffer52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str8, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str13, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[117, -63, -111, 75, 14, 58, 37, -68, -35, 109, 41, -39, -7, -37, -126, 3, 5, 126, -57, 103, -90, -72, 1, 79, 61, -47, 58, -35, -97, -107, -117, -88, -39, 81, -74, 118, 94, 14, 42, -118, 50, -57, 40, -119, -58, -47, -83, 68]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms16 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms16.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str29, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str31, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AAAAAAA" + "'", str32, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str33, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str34, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\000\000\000\000\000" + "'", str36, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream38);
        org.junit.Assert.assertNotNull(messageDigest39);
        org.junit.Assert.assertEquals(messageDigest39.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str44, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str46, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str47, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str48, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(messageDigest49);
        org.junit.Assert.assertEquals(messageDigest49.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str50, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str51, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        doubleMetaphone0.setMaxCodeLen((int) (byte) 10);
        int int8 = doubleMetaphone0.getMaxCodeLen();
        java.lang.String str11 = doubleMetaphone0.doubleMetaphone("", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray5, true);
        base64OutputStream1.write(byteArray5);
        java.security.MessageDigest messageDigest12 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream13 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest14 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest12, inputStream13);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest14);
        org.apache.commons.codec.net.URLCodec uRLCodec17 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet18 = null;
        byte[] byteArray20 = new byte[] { (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet18, byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray21);
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray21);
        byte[] byteArray24 = uRLCodec17.decode(byteArray21);
        byte[] byteArray25 = null;
        byte[] byteArray26 = uRLCodec17.decode(byteArray25);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray32);
        java.lang.String str35 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray32, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_36 = new org.apache.commons.codec.binary.Base16();
        boolean boolean38 = base16_36.isInAlphabet("AAAAAAA");
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str44 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray42, true);
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray42);
        boolean boolean47 = base16_36.isInAlphabet(byteArray42, true);
        byte[] byteArray48 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray32, byteArray42);
        byte[] byteArray49 = uRLCodec17.encode(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest14, byteArray49);
        java.io.OutputStream outputStream51 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_53 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream55 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream51, (org.apache.commons.codec.binary.BaseNCodec) base16_53, false);
        baseNCodecOutputStream55.eof();
        org.apache.commons.codec.binary.Base32 base32_58 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream60 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) baseNCodecOutputStream55, (org.apache.commons.codec.binary.BaseNCodec) base32_58, true);
        org.apache.commons.codec.CodecPolicy codecPolicy61 = base32_58.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream62 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, false, 214327882, byteArray50, codecPolicy61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [Y0?lu??s?????7mh2D?????f?????????7L???1X?h??Q;?cI?Z??N????&?Y?]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ffffff" + "'", str7, "ffffff");
        org.junit.Assert.assertNotNull(messageDigest12);
        org.junit.Assert.assertEquals(messageDigest12.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream13);
        org.junit.Assert.assertNotNull(messageDigest14);
        org.junit.Assert.assertEquals(messageDigest14.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str23, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str33, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str35, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ffffff" + "'", str44, "ffffff");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str45, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[89, 48, -113, 108, 117, -75, 18, 115, -46, 31, -95, -63, -99, 55, 109, 104, 50, 68, -65, -41, 63, -84, 13, 102, 29, -80, -127, -9, -97, 18, -127, -124, -100, 55, 76, -105, 24, -40, 49, 88, 5, 104, 0, -71, 81, 59, -44, 99, -61, -114, 90, 127, -32, 78, -24, -69, -6, -56, -59, 38, -65, 89, -13, -92]");
        org.junit.Assert.assertNotNull(outputStream51);
        org.junit.Assert.assertTrue("'" + codecPolicy61 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy61.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        long long1 = org.apache.commons.codec.digest.MurmurHash3.hash64((int) (short) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 6577096405996463154L + "'", long1 == 6577096405996463154L);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("F");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[30, 30, 98, 49, 41, 99, -66, -65, -9, 23, -77, -76, 90, 71, 0, 62, 10, -89, 120, 21, -82, -28, 51, 104, -76, 92, 32, 2]");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream24);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream24);
        java.security.MessageDigest messageDigest28 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest22, inputStream24);
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacSha256Hex(byteArray19, inputStream24);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str26, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest28);
        org.junit.Assert.assertEquals(messageDigest28.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "4b45176926ef09c8cd36b5e3818a60e5869d5d0d5ade316fd2ce8d3f53f4c006" + "'", str29, "4b45176926ef09c8cd36b5e3818a60e5869d5d0d5ade316fd2ce8d3f53f4c006");
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList0 = null;
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList1 = new org.apache.commons.codec.language.bm.Rule.PhonemeList(phonemeList0);
        java.lang.Iterable<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeIterable2 = phonemeList1.getPhonemes();
        java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList3 = phonemeList1.getPhonemes();
        org.junit.Assert.assertNull(phonemeIterable2);
        org.junit.Assert.assertNull(phonemeList3);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512_256Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer3 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, byteBuffer3);
        char[] charArray6 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer3, true);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest0, byteBuffer3);
        java.security.MessageDigest messageDigest9 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, "7cd9ea3a777159f190a5ad95fc94b919752c42564de2cb38d90df348ae98b10fe2c11be569eb8a585b7789dc83cefab4");
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertNotNull(messageDigest9);
        org.junit.Assert.assertEquals(messageDigest9.toString(), "SHA-512/256 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.security.MessageDigest messageDigest5 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest4);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$A6$LH9Qf.ffx.HqGhcB8ODsl0", messageDigest4);
        byte[] byteArray8 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        java.io.InputStream inputStream10 = java.io.InputStream.nullInputStream();
        java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray9, inputStream10);
        java.io.InputStream inputStream12 = java.io.InputStream.nullInputStream();
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream12);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream12);
        java.lang.String str15 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray9, inputStream12);
        byte[] byteArray17 = inputStream12.readNBytes((int) ' ');
        org.apache.commons.codec.binary.Base16InputStream base16InputStream18 = new org.apache.commons.codec.binary.Base16InputStream(inputStream12);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, inputStream12);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray25, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray25);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_384(byteArray25);
        java.security.MessageDigest messageDigest32 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest6, byteArray25);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest5);
        org.junit.Assert.assertEquals(messageDigest5.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str11, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str13, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str14, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str15, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str26, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str28, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AAAAAAA" + "'", str29, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str30, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-45, -89, 35, 75, 94, 127, 27, -117, -42, 88, 2, 110, -85, -28, -29, 39, -112, 99, -7, 57, -49, -36, 84, -88, 61, -60, -51, 60, 85, -13, 83, 4, 65, -86, -120, 108, -5, -106, 46, -16, 65, 83, 126, 40, 90, 61, -34, 122]");
        org.junit.Assert.assertNotNull(messageDigest32);
        org.junit.Assert.assertEquals(messageDigest32.toString(), "SHA-512 Message Digest from SUN, <in progress>\n");
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray23);
        byte[] byteArray26 = uRLCodec19.decode(byteArray23);
        byte[] byteArray27 = null;
        byte[] byteArray28 = uRLCodec19.decode(byteArray27);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_38 = new org.apache.commons.codec.binary.Base16();
        boolean boolean40 = base16_38.isInAlphabet("AAAAAAA");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str46 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray44, true);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray44);
        boolean boolean49 = base16_38.isInAlphabet(byteArray44, true);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray34, byteArray44);
        byte[] byteArray51 = uRLCodec19.encode(byteArray50);
        byte[] byteArray52 = quotedPrintableCodec1.decode(byteArray51);
        java.nio.charset.Charset charset53 = quotedPrintableCodec1.getCharset();
        java.nio.charset.Charset charset54 = org.apache.commons.codec.Charsets.toCharset(charset53);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str25, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ffffff" + "'", str46, "ffffff");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str47, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charset54);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        doubleMetaphoneResult4.appendPrimary("75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        doubleMetaphoneResult4.appendPrimary('4');
        doubleMetaphoneResult4.appendPrimary(' ');
        java.lang.String str11 = doubleMetaphoneResult4.getAlternate();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        java.lang.String str7 = hmacAlgorithms0.toString();
        java.security.MessageDigest messageDigest8 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils9 = new org.apache.commons.codec.digest.DigestUtils(messageDigest8);
        java.io.OutputStream outputStream10 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_12 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream14 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream10, (org.apache.commons.codec.binary.BaseNCodec) base16_12, false);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str18 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray17);
        long long19 = base16_12.getEncodedLength(byteArray17);
        byte[] byteArray20 = digestUtils9.digest(byteArray17);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils22 = new org.apache.commons.codec.digest.DigestUtils(messageDigest21);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer25 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest26 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, byteBuffer25);
        char[] charArray28 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer25, true);
        java.lang.String str29 = digestUtils22.digestAsHex(byteBuffer25);
        byte[] byteArray30 = digestUtils9.digest(byteBuffer25);
        javax.crypto.Mac mac31 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray30);
        java.lang.String str32 = hmacAlgorithms0.getName();
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "HmacSHA224" + "'", str7, "HmacSHA224");
        org.junit.Assert.assertNotNull(messageDigest8);
        org.junit.Assert.assertEquals(messageDigest8.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\000\ufffd" + "'", str18, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4L + "'", long19 == 4L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNotNull(messageDigest26);
        org.junit.Assert.assertEquals(messageDigest26.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str29, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "HmacSHA224" + "'", str32, "HmacSHA224");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha1("f59b7efafd800e27b47a488d30615c73");
        boolean boolean2 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[93, 23, 47, 101, -102, -118, 16, 95, -58, -127, -20, 102, 17, -62, 78, -82, -36, -68, -10, -48]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray4 = quotedPrintableCodec1.decode(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray3);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils7 = new org.apache.commons.codec.digest.DigestUtils(messageDigest6);
        java.io.OutputStream outputStream8 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_10 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream12 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream8, (org.apache.commons.codec.binary.BaseNCodec) base16_10, false);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str16 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray15);
        long long17 = base16_10.getEncodedLength(byteArray15);
        byte[] byteArray18 = digestUtils7.digest(byteArray15);
        java.security.MessageDigest messageDigest19 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils20 = new org.apache.commons.codec.digest.DigestUtils(messageDigest19);
        java.security.MessageDigest messageDigest21 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer23 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest21, byteBuffer23);
        char[] charArray26 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer23, true);
        java.lang.String str27 = digestUtils20.digestAsHex(byteBuffer23);
        byte[] byteArray28 = digestUtils7.digest(byteBuffer23);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha256(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray3, byteArray28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-87, -33, -108, 108, -50, 111, 84, 1, -124, -64, 74, -12, 31, -16, 3, -120, 111, 36, 86, 61, 96, 88, -63, 21, 37, -81, -64, -73]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream8);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\000\ufffd" + "'", str16, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4L + "'", long17 == 4L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest19);
        org.junit.Assert.assertEquals(messageDigest19.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest21);
        org.junit.Assert.assertEquals(messageDigest21.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str27, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[91, -36, 116, -71, -47, 65, 111, 116, 15, 96, 55, -78, -58, -59, -44, -19, -14, -93, 70, -40, 48, 82, 113, 53, 48, 34, 82, -55, 33, 7, 3, 125]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-102, 116, 39, -56, 26, -86, 46, 11, -110, 121, -120, -37, 34, 121, 96, 45, -124, 48, 11, 96, 56, -93, 40, -99, 116, 111, 44, 52, -114, -119, 86, -83]");
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1;
        org.apache.commons.codec.digest.HmacUtils hmacUtils2 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "c0c3dac62d73546bf4416981c3eff65730d490ca8245a7f5647070a126a15da6325a6f3dfd8384cf4de3e1ef35b55e3a");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.reset();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms2 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5;
        org.apache.commons.codec.digest.HmacUtils hmacUtils4 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms2, "UTF-8");
        byte[] byteArray6 = hmacUtils4.hmac("477300|577300");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms7 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet8 = null;
        byte[] byteArray10 = new byte[] { (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet8, byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray11);
        javax.crypto.Mac mac13 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms7, byteArray12);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray19);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray19);
        javax.crypto.Mac mac26 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms7, byteArray19);
        org.apache.commons.codec.binary.Base32 base32_28 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet29 = null;
        byte[] byteArray31 = new byte[] { (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet29, byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray32);
        boolean boolean35 = base32_28.isInAlphabet(byteArray33, false);
        byte[] byteArray37 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str38 = base32_28.encodeAsString(byteArray37);
        org.apache.commons.codec.digest.HmacUtils hmacUtils39 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms7, byteArray37);
        java.lang.String str41 = org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byteArray37, "$1$GMYtYRHQ$dG4e2hpzY6HAK2FvKlJCD.");
        byte[] byteArray42 = hmacUtils4.hmac(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            pureJavaCrc32_0.update(byteArray42, 46466694, (-1886572454));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 46466694 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms2 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5 + "'", hmacAlgorithms2.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_MD5));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[84, 123, 59, 93, -87, 47, 48, -71, 44, -94, -14, -32, -80, -66, -108, 48]");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms7 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms7.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str24, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str25, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ABUAA2IAEE======" + "'", str38, "ABUAA2IAEE======");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3." + "'", str41, "$1$GMYtYRHQ$RsoompDS5CwCUZadkbAQ3.");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[55, 31, -68, -49, -12, -124, -49, -83, -112, -91, -128, -105, 84, -15, -101, 20]");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray35 = hmacUtils32.hmac(byteBuffer34);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str39 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray38);
        java.lang.String str40 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray38);
        byte[] byteArray41 = hmacUtils32.hmac(byteArray38);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\000\ufffd" + "'", str39, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\377" + "'", str40, "\377");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[79, 66, 69, 77, 108, 88, -8, 18, 65, 57, -44, 46, 59, -104, -101, -15, 53, -42, 38, -110, 67, 59, -61, 51, 73, -105, -93, -23]");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha1("16fd67a8bb44f961f07f53972686acb3", "074144668286427481268138212338282381323183123");
        java.lang.String str3 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray2);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 629192958);
        java.lang.String str8 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000" + "'", str3, "0111110110001000001011101111110010000011101011111001001101011011111100001111100011000000111100111111011000110010001000101011001001111011111101101111111010110000");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[115, 80, 55, 50, 101, 55, 73, 105, 77, 118, 98, 122, 119, 80, 106, 119, 87, 53, 79, 118, 103, 47, 119, 117, 105, 72, 48, 61]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$6$MhO9NRO.$INHE8ghd0oh8sm0QZp80UAuoKu5r6biHDpyDy0m4bGhlNpy0i7rsS/tk5aAiYPl0Wl2svb5Fo7ECuU5AcXeL11" + "'", str8, "$6$MhO9NRO.$INHE8ghd0oh8sm0QZp80UAuoKu5r6biHDpyDy0m4bGhlNpy0i7rsS/tk5aAiYPl0Wl2svb5Fo7ECuU5AcXeL11");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_384("6e57afa9a4816afe502bfa9a045f02ee2bab5660");
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.apache.commons.codec.digest.MurmurHash2.hash32(byteArray1, 1595328082);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1, -84, -68, -45, 9, -116, 13, -126, 65, -6, 17, -111, -117, 81, 51, -52, 114, -72, -70, 102, -8, -98, -41, 80, -117, 68, -99, 38, -120, 18, -6, -51, 21, -53, -110, 20, -3, 89, -19, 61, 67, 33, 37, 99, -118, 117, -100, -29]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[78, 125, 18, 70, 60, 61, 101, 127, 91, 75, -91, 42, -77, -118, -59, 15, -34, -113, 21, 79, 33, 2, -100, -112, -99, -40, 54, 74, -117, 83, -69, 92, -24, -39, 33, 100, 58, -42, 43, -74, 108, -123, 122, 120, 121, -30, -16, 112, -110, -50, 67, 42, -35, 24, 45, -27, -40, 93, -73, 124, 13, -127, -17, -109]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        qCodec3.setEncodeBlanks(true);
        java.lang.String str8 = qCodec3.encode("D0");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "=?UTF-8?Q?D0?=" + "'", str8, "=?UTF-8?Q?D0?=");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha512_224(inputStream3);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha3_256Hex(inputStream3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[110, -48, -35, 2, -128, 111, -88, -98, 37, -34, 6, 12, 25, -45, -84, -122, -54, -69, -121, -42, -96, -35, -48, 92, 51, 59, -124, -12]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a" + "'", str7, "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(false);
        byte[] byteArray3 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1nualuGt.TbmU");
        byte[] byteArray4 = quotedPrintableCodec1.decode(byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha512(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-99, 119, -92, -1, -1, 63, -25, 25, 51, -53, -3, -33, 4, -30, -82, 122, -21, 58, 3, 75, -125, 53, 60, -60, -52, -107, 98, 40]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-99, -27, -26, -111, -37, 38, 18, -9, -51, -106, -32, -97, 79, -83, -73, -96, 116, 65, 41, -78, 73, -74, 18, 53, 118, 65, 81, -40, 107, -19, -14, -116, -53, 58, -118, -104, 115, 33, 74, -125, -34, -110, -53, -111, 4, -4, -76, 111, -14, 110, -87, 114, 91, 53, 81, -11, -100, 98, 30, -110, 42, 106, -37, -77]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "4fef59c6a5f39c57fb1af58b804235e83d921817" + "'", str6, "4fef59c6a5f39c57fb1af58b804235e83d921817");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("cf1bd2c202ddf2f8696c5caa578caa96");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7361e79c960ce939a73ad8d99bb2ed008942e078" + "'", str1, "7361e79c960ce939a73ad8d99bb2ed008942e078");
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md5Hex("f4b1bcd96256e2dc14bb08fdf60fb975");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "78394e05c6e4f9b5867f6199a819cb53" + "'", str1, "78394e05c6e4f9b5867f6199a819cb53");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getDigest("$apr1$rules$dCQ1l15gg/wUMAOsZCrfS1", messageDigest3);
        org.apache.commons.codec.digest.DigestUtils digestUtils5 = new org.apache.commons.codec.digest.DigestUtils(messageDigest3);
        org.apache.commons.codec.digest.XXHash32 xXHash32_7 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_7.reset();
        org.apache.commons.codec.binary.Hex hex9 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest10 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer12 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest10, byteBuffer12);
        char[] charArray15 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer12, true);
        byte[] byteArray16 = hex9.decode(byteBuffer12);
        xXHash32_7.update(byteBuffer12);
        java.lang.String str18 = digestUtils5.digestAsHex(byteBuffer12);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512("");
        byte[] byteArray21 = digestUtils5.digest(byteArray20);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest10);
        org.junit.Assert.assertEquals(messageDigest10.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e" + "'", str18, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-33, 80, -85, -23, -23, 113, -11, -46, 57, -96, 45, 74, -64, -8, 72, -41, -99, -95, 124, -43, 117, 116, 105, 65, 81, 98, -85, -65, 11, 36, 26, -118, -1, 53, -50, 123, 45, 102, 5, 4, 16, 14, 37, 116, 35, -25, 35, -92, 61, 49, 16, 66, -98, -4, 18, 18, 59, 114, 82, -67, -101, 32, 53, 89]");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.nio.ByteBuffer byteBuffer1 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray2 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer1);
        char[] charArray4 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer1, false);
        byte[] byteArray5 = org.apache.commons.codec.binary.Hex.decodeHex(charArray4);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        java.io.InputStream inputStream5 = java.io.InputStream.nullInputStream();
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream5);
        byte[] byteArray10 = inputStream5.readNBytes((int) ' ');
        org.apache.commons.codec.binary.Base64InputStream base64InputStream12 = new org.apache.commons.codec.binary.Base64InputStream(inputStream5, false);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex((java.io.InputStream) base64InputStream12);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str6, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str7, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str8, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str13, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.digest.HmacUtils hmacUtils21 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "0f0cf9286f065a2f38e3c4e4886578e35af4050c108e507998a05888c98667ea");
        java.security.MessageDigest messageDigest22 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream23 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest24 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest22, inputStream23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream23);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream23);
        java.io.InputStream inputStream27 = java.io.InputStream.nullInputStream();
        java.lang.String str28 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream27);
        byte[] byteArray29 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray26, inputStream27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        java.io.InputStream inputStream34 = java.io.InputStream.nullInputStream();
        java.lang.String str35 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray33, inputStream34);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream36 = new org.apache.commons.codec.binary.Base64InputStream(inputStream34);
        int int37 = base64InputStream36.available();
        byte[] byteArray38 = org.apache.commons.codec.digest.DigestUtils.sha3_224((java.io.InputStream) base64InputStream36);
        boolean boolean39 = base64InputStream36.markSupported();
        java.lang.String str40 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray26, (java.io.InputStream) base64InputStream36);
        org.apache.commons.codec.binary.Base32 base32_44 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy45 = base32_44.getCodecPolicy();
        org.apache.commons.codec.binary.Base16InputStream base16InputStream46 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream36, false, false, codecPolicy45);
        java.lang.String str47 = hmacUtils21.hmacHex((java.io.InputStream) base16InputStream46);
        java.security.MessageDigest messageDigest48 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream49 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest50 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest48, inputStream49);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream52 = new org.apache.commons.codec.binary.Base16InputStream(inputStream49, false);
        int int53 = base16InputStream52.available();
        java.lang.String str54 = hmacUtils21.hmacHex((java.io.InputStream) base16InputStream52);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str61 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray60);
        java.lang.String str63 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray60, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        java.lang.String str65 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray60);
        java.lang.String str66 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray60);
        byte[] byteArray68 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray68);
        java.io.InputStream inputStream70 = java.io.InputStream.nullInputStream();
        java.lang.String str71 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray69, inputStream70);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream72 = new org.apache.commons.codec.binary.Base64InputStream(inputStream70);
        int int73 = base64InputStream72.available();
        byte[] byteArray74 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray60, (java.io.InputStream) base64InputStream72);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream77 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream72, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream78 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream77);
        byte[] byteArray79 = hmacUtils21.hmac((java.io.InputStream) base16InputStream78);
        java.io.OutputStream outputStream80 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream81 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream80);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream83 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream81, true);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream84 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream81);
        long long85 = base16InputStream78.transferTo((java.io.OutputStream) base64OutputStream81);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(messageDigest22);
        org.junit.Assert.assertEquals(messageDigest22.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(messageDigest24);
        org.junit.Assert.assertEquals(messageDigest24.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str25, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str28, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[54, 1, -50, 89, 36, 42, 85, -97, 21, 43, 26, 65, -114, -41, 34, -122, 36, -30, 105, -40, 88, -37, -64, 39, 47, 32, -10, 55, -105, -111, -65, 41]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str35, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "18f760be30a13d2a4fe996bf5b70a8b193594ff037916dbc37b78de00c0ec8cc2fba936a6b72526a737988f605a33080" + "'", str40, "18f760be30a13d2a4fe996bf5b70a8b193594ff037916dbc37b78de00c0ec8cc2fba936a6b72526a737988f605a33080");
        org.junit.Assert.assertTrue("'" + codecPolicy45 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy45.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b" + "'", str47, "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b");
        org.junit.Assert.assertNotNull(messageDigest48);
        org.junit.Assert.assertEquals(messageDigest48.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(messageDigest50);
        org.junit.Assert.assertEquals(messageDigest50.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b" + "'", str54, "0f507adff7c95cfaec455ce0b0facf166ffa44d810f22013238bf84b");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str61, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str63, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "AAAAAAA" + "'", str64, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str65, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str66, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str71, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[15, 80, 122, -33, -9, -55, 92, -6, -20, 69, 92, -32, -80, -6, -49, 22, 111, -6, 68, -40, 16, -14, 32, 19, 35, -117, -8, 75]");
        org.junit.Assert.assertNotNull(outputStream80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha256("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-61, -40, -51, -11, -53, -84, 4, -80, -3, -32, 127, 111, -116, -79, -50, -22, -34, 20, -91, -92, 25, 12, 82, 126, 81, 109, 105, 29, -24, 107, 85, -97]");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.shaHex("$apr1$0Acd8L3u$xDzme7ba28RmNwAQkMJJO/");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "369085bbb0d796e98476098805cfa49374636d66" + "'", str1, "369085bbb0d796e98476098805cfa49374636d66");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512("kBAwnYFpJm7aQ");
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream3 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream2);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec7 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray13);
        java.lang.Object obj20 = quotedPrintableCodec7.decode((java.lang.Object) byteArray13);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream21 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream3, true, 1, byteArray13);
        base64OutputStream21.close();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream23 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream21);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha384("SHA-1");
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray27);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream30 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream23, false, (-1642666625), byteArray27);
        java.lang.String str31 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray1, byteArray27);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[91, 97, 72, -80, -44, 14, -26, 87, -78, 79, 111, 61, -52, -81, -85, 72, -104, 75, -64, -51, 33, -85, -68, -87, 102, -84, 45, -94, -97, -99, -53, -10, 12, 119, -2, -26, -76, 72, -102, -86, 56, -29, -90, -101, 24, 93, 27, -79, 20, 34, 84, -67, -72, 52, 117, -6, -78, 12, 96, 43, -105, 6, 112, -56]");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str19, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[94, -81, -34, -93, 111, 85, 21, -122, -91, 51, 5, 19, 65, 65, 60, -6, 74, 11, -111, -21, -81, -40, -24, -107, -32, 12, -76, -30, -114, -80, -20, 35, -13, 110, 45, -117, -35, 61, 121, 100, 114, -112, -92, 83, 8, 101, -14, 11]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[62, -94, 68, -91, 123, 82, -89, -2, 34, -45, -54, -41, 26, 25, -123, 67, 23, -107, -85, 115, 120, -97, -87, 66, -57, 63, -110, 111, -113, -4, -35, -62, 6, 54, -105, 34, 121, -55, 53, 74, -94, -42, 51, 18, 18, 23, 83, 94]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + ".qn5R7Welt6Jg" + "'", str29, ".qn5R7Welt6Jg");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "acc1a6c24307f4df0cd959782292234dbea3ca2da7b3d020dc6aab1621f7945911e96133926bb3c31eb43455c6b76c95" + "'", str31, "acc1a6c24307f4df0cd959782292234dbea3ca2da7b3d020dc6aab1621f7945911e96133926bb3c31eb43455c6b76c95");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        byte[] byteArray4 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream1.write(byteArray4);
        base64OutputStream1.write((int) '4');
        base64OutputStream1.close();
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream9 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.encode("4fd2bf2fda1ad3f6fd76d56314f9fa49");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "FTPF" + "'", str2, "FTPF");
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha256Hex((java.io.InputStream) base64InputStream5);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha512_256((java.io.InputStream) base64InputStream5);
        byte[] byteArray10 = null;
        java.lang.String str11 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray9, byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str8, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-58, 114, -72, -47, -17, 86, -19, 40, -85, -121, -61, 98, 44, 81, 20, 6, -101, -35, 58, -41, -72, -7, 115, 116, -104, -48, -64, 30, -50, -16, -106, 122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "66709816060fd34848470613e217b80dce9c1c301b5f37caf54b76cb73230d5ce7294045676cfd1553a73e44ab458140" + "'", str11, "66709816060fd34848470613e217b80dce9c1c301b5f37caf54b76cb73230d5ce7294045676cfd1553a73e44ab458140");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.util.BitSet bitSet0 = null;
        org.apache.commons.codec.net.URLCodec uRLCodec2 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet3 = null;
        byte[] byteArray5 = new byte[] { (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet3, byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray6);
        byte[] byteArray8 = uRLCodec2.encode(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray7);
        byte[] byteArray11 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray7, true);
        long long12 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[16, 7, -128, 127, 37, -48, -33, -71, 29, -42, -96, -117, 8, -80, -32, -61, 37, 9, 40, 65, 47, 81, -15, -124, 18, 47, 12, 90]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 5489048128933680757L + "'", long12 == 5489048128933680757L);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        byte[] byteArray7 = uRLCodec1.encode(byteArray6);
        javax.crypto.Mac mac8 = org.apache.commons.codec.digest.HmacUtils.getHmacSha1(byteArray6);
        javax.crypto.Mac mac10 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac8, "EF");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(mac8);
        org.junit.Assert.assertNotNull(mac10);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.codec.net.BCodec bCodec0 = new org.apache.commons.codec.net.BCodec();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = bCodec0.encode("2380d6beadfa549e13fa22c7639cf9f1", "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.US_ASCII;
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec2 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset0, false);
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec8 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        java.lang.Object obj21 = quotedPrintableCodec8.decode((java.lang.Object) byteArray14);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream22 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream4, true, 1, byteArray14);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str28 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray27);
        java.nio.charset.Charset charset30 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy33 = base64_32.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec34 = new org.apache.commons.codec.net.BCodec(charset30, codecPolicy33);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream35 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream4, true, (int) (short) 1, byteArray27, codecPolicy33);
        org.apache.commons.codec.net.BCodec bCodec36 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy33);
        java.nio.charset.Charset charset37 = bCodec36.getCharset();
        java.lang.String str39 = bCodec36.encode("b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\000\ufffd" + "'", str28, "\000\ufffd");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\377" + "'", str29, "\377");
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + codecPolicy33 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy33.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "=?US-ASCII?B?Yjg2YjFhOTY1ODI3ZTRhMzQzNWNmNTVjODA5NTIyNmYzYzBkYzU2ZWI3OWYwYTg3NmQ5M2VjMzM2Nzk3ZTUwNw==?=" + "'", str39, "=?US-ASCII?B?Yjg2YjFhOTY1ODI3ZTRhMzQzNWNmNTVjODA5NTIyNmYzYzBkYzU2ZWI3OWYwYTg3NmQ5M2VjMzM2Nzk3ZTUwNw==?=");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.util.BitSet bitSet0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet0, byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray2, (-2042891860), (int) ' ', (-2140710732));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -2042891860 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray5);
        byte[] byteArray8 = uRLCodec1.decode(byteArray5);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str21 = org.apache.commons.codec.digest.Crypt.crypt(byteArray14, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec23 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet24 = null;
        byte[] byteArray26 = new byte[] { (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet24, byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        byte[] byteArray29 = uRLCodec23.encode(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray14, byteArray28);
        byte[] byteArray31 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray8, byteArray31);
        java.lang.String str33 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str7, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0Acd8L3u4hVxI" + "'", str21, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str30, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-66, 88, 18, 57, -83, -91, -63, -2, 12, 29, 4, -12, -28, -58, -74, 4, 111, 110, 117, 102, 82, -15, -21, 61, -99, -80, 61, -110, -126, -107, -70, 27, -82, 67, 46, -126, 24, 92, -17, -88, 25, -14, 122, 53, -95, 12, -73, 76, 9, 117, 65, -77, -100, 51, -38, 112, 98, -92, -121, 18, 60, -1, 75, -105]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3c363836cf4e16666669a25da280a1865c2d2874" + "'", str33, "3c363836cf4e16666669a25da280a1865c2d2874");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86 incrementalHash32x86_0 = new org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32x86();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.md5("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        // The following exception was thrown during execution in test generation
        try {
            incrementalHash32x86_0.add(byteArray2, 1595328082, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1595328082 out of bounds for length 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-63, -43, 9, -48, -27, 77, -30, 7, -123, 13, 34, -108, 2, -113, -117, -83]");
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = new byte[] { (byte) 100 };
        byte[] byteArray5 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet2, byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray5);
        boolean boolean8 = base32_1.isInAlphabet(byteArray6, false);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.digest.DigestUtils.sha384(byteArray10);
        java.lang.String str13 = base32_1.encodeAsString(byteArray12);
        java.lang.String str14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiString(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.codec.digest.MurmurHash2.hash64(byteArray12, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===" + "'", str13, "HCYGBJ2RVSLDQTGZGJ7LDMPDNIQ73NYRCS7AOQ2MBTD36Y7W4HNCOTW6X7TW6ZP32UNNF4KITC4VW===");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000" + "'", str14, "010110111011100110011000010010001111000111010010000110101101010111111011011001010110111111100111101111111101111001001110001001111101101011100001111101100110001110111111110001110000110001001100010000110000011110111110000101000001000110110111111111010010000101101010111000111011000110110001011111100011001011011001010011000011100010010110101011000101000110100111011000001011000000111000");
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.codec.digest.PureJavaCrc32 pureJavaCrc32_0 = new org.apache.commons.codec.digest.PureJavaCrc32();
        pureJavaCrc32_0.update(1);
        pureJavaCrc32_0.update(64);
        pureJavaCrc32_0.reset();
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray5);
        java.lang.String str8 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray5, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        java.lang.String str10 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray5);
        java.lang.String str12 = org.apache.commons.codec.digest.Crypt.crypt(byteArray5, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec14 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet15 = null;
        byte[] byteArray17 = new byte[] { (byte) 100 };
        byte[] byteArray18 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet15, byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray18);
        byte[] byteArray20 = uRLCodec14.encode(byteArray19);
        java.lang.String str21 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray5, byteArray19);
        byte[] byteArray22 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray5);
        java.security.MessageDigest messageDigest23 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream24 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest25 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest23, inputStream24);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream24);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream24);
        java.io.InputStream inputStream28 = java.io.InputStream.nullInputStream();
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream28);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray27, inputStream28);
        java.lang.String str31 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray5, byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        java.io.InputStream inputStream35 = java.io.InputStream.nullInputStream();
        java.lang.String str36 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray34, inputStream35);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream37 = new org.apache.commons.codec.binary.Base64InputStream(inputStream35);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream38 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream37);
        java.lang.String str39 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray30, (java.io.InputStream) base16InputStream38);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str6, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str8, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AAAAAAA" + "'", str9, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str10, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0Acd8L3u4hVxI" + "'", str12, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str21, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(messageDigest23);
        org.junit.Assert.assertEquals(messageDigest23.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream24);
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str26, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str29, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "54d7107aa24bc36b8e80134b8e4ea34c0185bf226a305b9511a3711173b8f450e7494952770ec663d90fe5f906df8f27" + "'", str31, "54d7107aa24bc36b8e80134b8e4ea34c0185bf226a305b9511a3711173b8f450e7494952770ec663d90fe5f906df8f27");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str36, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7664e745c8ad41ed511436ff4483200e" + "'", str39, "7664e745c8ad41ed511436ff4483200e");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.md2Hex((java.io.InputStream) base64InputStream5);
        base64InputStream5.close();
        base64InputStream5.close();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray17);
        java.lang.String str20 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray17, false);
        byte[] byteArray21 = org.apache.commons.codec.digest.Blake3.hash(byteArray17);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray21);
        org.apache.commons.codec.CodecPolicy codecPolicy23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base32InputStream base32InputStream24 = new org.apache.commons.codec.binary.Base32InputStream((java.io.InputStream) base64InputStream5, false, (-1612190696), byteArray21, codecPolicy23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: codecPolicy");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str6, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8350e5a3e24c153df2275c9f80692773" + "'", str7, "8350e5a3e24c153df2275c9f80692773");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str18, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0A01640101" + "'", str20, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "41c1f4d55467abb3132b7842c05b7b61c7a88b7318e7e38f587f71bb" + "'", str22, "41c1f4d55467abb3132b7842c05b7b61c7a88b7318e7e38f587f71bb");
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.codec.digest.XXHash32 xXHash32_1 = new org.apache.commons.codec.digest.XXHash32(0);
        xXHash32_1.reset();
        org.apache.commons.codec.binary.Hex hex3 = new org.apache.commons.codec.binary.Hex();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer6 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest7 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest4, byteBuffer6);
        char[] charArray9 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, true);
        byte[] byteArray10 = hex3.decode(byteBuffer6);
        xXHash32_1.update(byteBuffer6);
        char[] charArray13 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer6, false);
        org.apache.commons.codec.language.Soundex soundex14 = new org.apache.commons.codec.language.Soundex(charArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Hex.decodeHex(charArray13);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(messageDigest7);
        org.junit.Assert.assertEquals(messageDigest7.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.QCodec qCodec1 = new org.apache.commons.codec.net.QCodec("517d4818c9f39a1b0c116f2f92e779215855f3e9919b72efa23357df");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 517d4818c9f39a1b0c116f2f92e779215855f3e9919b72efa23357df");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_384("6e57afa9a4816afe502bfa9a045f02ee2bab5660");
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest4 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, inputStream3);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream3);
        byte[] byteArray6 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream3);
        java.io.InputStream inputStream7 = java.io.InputStream.nullInputStream();
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream7);
        byte[] byteArray9 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray6, inputStream7);
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha3_256(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.codec.digest.Blake3.keyedHash(byteArray1, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Blake3 keys must be 32 bytes");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1, -84, -68, -45, 9, -116, 13, -126, 65, -6, 17, -111, -117, 81, 51, -52, 114, -72, -70, 102, -8, -98, -41, 80, -117, 68, -99, 38, -120, 18, -6, -51, 21, -53, -110, 20, -3, 89, -19, 61, 67, 33, 37, 99, -118, 117, -100, -29]");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertNotNull(messageDigest4);
        org.junit.Assert.assertEquals(messageDigest4.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str5, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str8, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, 100, -15, 51, -31, -18, -34, -36, -101, 51, -31, -73, 122, -54, 9, -28, -73, 38, 90, 47, -68, -87, 67, 31, 10, -122, 44, 117, 8, 55, -40, 27, -60, 49, -94, -4, -94, 73, 57, -46, -96, 116, -120, -18, -116, -42, 100, -88, -91, -101, -72, 67, -2, 99, 64, -28, -126, 16, -42, 55, 19, 15, -74, -54]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[54, 1, -50, 89, 36, 42, 85, -97, 21, 43, 26, 65, -114, -41, 34, -122, 36, -30, 105, -40, 88, -37, -64, 39, 47, 32, -10, 55, -105, -111, -65, 41]");
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray1);
        java.lang.String str4 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray1);
        java.lang.String str5 = org.apache.commons.codec.digest.DigestUtils.md5Hex(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\000h\000i\000!" + "'", str3, "\000h\000i\000!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000h\000i\000!" + "'", str4, "\000h\000i\000!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "652a34511e93c2874623a9e8a0852167" + "'", str5, "652a34511e93c2874623a9e8a0852167");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha512("1462864445134828448548348552636243541");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-103, -38, 118, -74, -40, 26, -38, 119, 109, -8, -116, 40, -64, 73, -89, -25, -2, -19, 42, -7, -9, -73, 23, 102, 8, 12, -54, -109, -42, 33, -72, -52, -116, 96, -4, 73, -121, 4, -125, 55, 15, 111, 122, 93, 118, 18, -114, 13, -47, -86, -101, 116, -8, -95, 37, 35, 17, -89, 72, -61, -80, -126, -48, -34]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.sha3_512Hex("5513a056208d06021ab0ccfa9fb6a5da98711cb09e23187e6f9f688ea05af398");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "bb6875e31f2b09245ec1e3ff1a562e49a8668de3748d59d677ed7ee064f4fe3ce174b7aaf6197b37162d95e60126a4abe268159347df0ea651de1bf2ac41fe9d" + "'", str1, "bb6875e31f2b09245ec1e3ff1a562e49a8668de3748d59d677ed7ee064f4fe3ce174b7aaf6197b37162d95e60126a4abe268159347df0ea651de1bf2ac41fe9d");
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType2 = org.apache.commons.codec.language.bm.NameType.SEPHARDIC;
        beiderMorseEncoder0.setNameType(nameType2);
        org.apache.commons.codec.StringEncoderComparator stringEncoderComparator4 = new org.apache.commons.codec.StringEncoderComparator((org.apache.commons.codec.StringEncoder) beiderMorseEncoder0);
        org.apache.commons.codec.language.bm.NameType nameType5 = beiderMorseEncoder0.getNameType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.SEPHARDIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.SEPHARDIC));
        org.junit.Assert.assertTrue("'" + nameType5 + "' != '" + org.apache.commons.codec.language.bm.NameType.SEPHARDIC + "'", nameType5.equals(org.apache.commons.codec.language.bm.NameType.SEPHARDIC));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.codec.language.bm.NameType nameType0 = null;
        org.apache.commons.codec.language.bm.RuleType ruleType1 = null;
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine4 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType0, ruleType1, false, (int) (byte) -1);
        org.apache.commons.codec.language.bm.RuleType ruleType5 = phoneticEngine4.getRuleType();
        boolean boolean6 = phoneticEngine4.isConcat();
        org.apache.commons.codec.language.bm.Lang lang7 = phoneticEngine4.getLang();
        boolean boolean8 = phoneticEngine4.isConcat();
        org.junit.Assert.assertNull(ruleType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(lang7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_2 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream4 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream0, (org.apache.commons.codec.binary.BaseNCodec) base16_2, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream5 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) baseNCodecOutputStream4);
        byte[] byteArray9 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.apache.commons.codec.binary.Base16 base16_11 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str14 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray13);
        byte[] byteArray15 = base16_11.encode(byteArray13);
        org.apache.commons.codec.CodecPolicy codecPolicy16 = base16_11.getCodecPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64OutputStream base64OutputStream17 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream5, true, 100, byteArray9, codecPolicy16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeparator must not contain base64 characters: [?B??*???3?a???m??6?O??6?\"<[]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str14, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy16 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy16.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("HmacMD5");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[30, 102, -100, 48, 62]");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str14 = org.apache.commons.codec.digest.Crypt.crypt(byteArray7, "0A01640101");
        byte[] byteArray15 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        java.lang.String str16 = base32_1.encodeToString(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray15, 1745848163, 1757052779);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1745848163 out of bounds for length 64");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0Acd8L3u4hVxI" + "'", str14, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-67, -87, 98, 52, 15, 99, 110, 55, -23, -119, 3, -107, 57, 68, -49, -30, 45, -113, 30, -10, -75, 100, -27, -66, -92, 74, 87, 95, 37, 0, 100, -113, 53, -30, -122, -9, -90, -37, -69, 38, -27, 34, 70, 21, 26, 108, -48, 85, -19, 115, 112, 23, 58, 41, 39, -87, 104, 63, 37, 20, 56, 68, -1, -88]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=" + "'", str16, "XWUWENAPMNXDP2MJAOKTSRGP4IWY6HXWWVSOLPVEJJLV6JIAMSHTLYUG66TNXOZG4UREMFI2NTIFL3LTOALTUKJHVFUD6JIUHBCP7KA=");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.lang.String str15 = quotedPrintableCodec1.getDefaultCharset();
        java.nio.charset.Charset charset16 = quotedPrintableCodec1.getCharset();
        java.lang.String str18 = quotedPrintableCodec1.decode("P242");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF-8" + "'", str15, "UTF-8");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "P242" + "'", str18, "P242");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("4b45176926ef09c8cd36b5e3818a60e5869d5d0d5ade316fd2ce8d3f53f4c006");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[52, 98, 52, 53, 49, 55, 54, 57, 50, 54, 101, 102, 48, 57, 99, 56, 99, 100, 51, 54, 98, 53, 101, 51, 56, 49, 56, 97, 54, 48, 101, 53, 56, 54, 57, 100, 53, 100, 48, 100, 53, 97, 100, 101, 51, 49, 54, 102, 100, 50, 99, 101, 56, 100, 51, 102, 53, 51, 102, 52, 99, 48, 48, 54]");
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        java.nio.charset.Charset charset4 = null;
        java.nio.charset.Charset charset5 = org.apache.commons.codec.Charsets.toCharset(charset4);
        java.lang.String str6 = bCodec2.encode("SHA-224", charset5);
        boolean boolean7 = bCodec2.isStrictDecoding();
        java.lang.String str8 = bCodec2.getDefaultCharset();
        java.nio.charset.Charset charset10 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy11 = null;
        org.apache.commons.codec.net.BCodec bCodec12 = new org.apache.commons.codec.net.BCodec(charset10, codecPolicy11);
        org.apache.commons.codec.net.QCodec qCodec13 = new org.apache.commons.codec.net.QCodec(charset10);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec14 = new org.apache.commons.codec.net.QuotedPrintableCodec(charset10);
        org.apache.commons.codec.binary.Base32 base32_16 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet17 = null;
        byte[] byteArray19 = new byte[] { (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet17, byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray20);
        boolean boolean23 = base32_16.isInAlphabet(byteArray21, false);
        org.apache.commons.codec.CodecPolicy codecPolicy24 = base32_16.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec25 = new org.apache.commons.codec.net.BCodec(charset10, codecPolicy24);
        java.lang.String str26 = bCodec2.encode("", charset10);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "=?UTF-8?B?U0hBLTIyNA==?=" + "'", str6, "=?UTF-8?B?U0hBLTIyNA==?=");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF-8" + "'", str8, "UTF-8");
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy24 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy24.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "=?UTF-8?B??=" + "'", str26, "=?UTF-8?B??=");
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        org.apache.commons.codec.digest.HmacUtils hmacUtils8 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.io.InputStream inputStream9 = null;
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy14 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream15 = new org.apache.commons.codec.binary.Base32InputStream(inputStream9, true, (int) (byte) 0, byteArray13, codecPolicy14);
        char[] charArray16 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray13);
        java.lang.String str17 = hmacUtils8.hmacHex(byteArray13);
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream19 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest20 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest18, inputStream19);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream19);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream19);
        java.lang.String str23 = hmacUtils8.hmacHex(inputStream19);
        byte[] byteArray25 = hmacUtils8.hmac("f0960da20c9ad08441e24e9b4b4cd4a5");
        byte[] byteArray27 = hmacUtils8.hmac("\u1d74\u5560\u9deb\u2399\ue3a9\ue89d\uf686\uef20\u8b69\u2d45\ube17\ud2e2\u8c21\ufffd\u8d2e");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy14 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy14.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9" + "'", str17, "0a6d29eb22c9644a6d6249b9176f081698d55ed3adcb124d0f5171d9");
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream19);
        org.junit.Assert.assertNotNull(messageDigest20);
        org.junit.Assert.assertEquals(messageDigest20.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str21, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9" + "'", str23, "9bdec7ace9b4db8d43579cadbd09ea608a15ed697eee96158b19ccc9");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-32, -20, 12, -86, -123, 94, -15, -79, -7, -32, 63, 79, -52, 85, -108, -45, 99, 11, -87, -8, -99, -101, -114, 55, -122, 67, -92, -82]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[116, 125, -48, 25, 99, -80, 114, -25, 92, 8, -27, 31, 57, 102, 74, -121, 124, -5, 108, -29, -51, -127, -103, 39, 60, 35, 88, -113]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (short) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy2 = base32_1.getCodecPolicy();
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray8, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray8);
        java.lang.String str15 = org.apache.commons.codec.digest.Crypt.crypt(byteArray8, "0A01640101");
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(byteArray8);
        java.lang.Object obj17 = base32_1.encode((java.lang.Object) byteArray8);
        org.junit.Assert.assertTrue("'" + codecPolicy2 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy2.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str11, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AAAAAAA" + "'", str12, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str13, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0Acd8L3u4hVxI" + "'", str15, "0Acd8L3u4hVxI");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c" + "'", str16, "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c");
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.codec.language.ColognePhonetic colognePhonetic0 = new org.apache.commons.codec.language.ColognePhonetic();
        java.lang.String str2 = colognePhonetic0.colognePhonetic("079564");
        java.lang.String str4 = colognePhonetic0.colognePhonetic("\u4668\u8976\u82cc\ud2b1\uee0c\uae8d\uc559\u4729\u1f81\u9cc5\u9ee1\u26f5\ubd24\u3b18\u5257\u7414\u413a\ueed5\u780b\u5fb1\u1090\u0387\u15be\ued1b\u4a15\ub31c\u8d96\u74fb\ufffd\u191c");
        java.lang.String str6 = colognePhonetic0.encode("$1$R3.5of0S$M7WoGc.xSqd9c0i/foPQj.");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7386348428314" + "'", str6, "7386348428314");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        long long1 = xXHash32_0.getValue();
        long long2 = xXHash32_0.getValue();
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        xXHash32_0.update(byteBuffer4);
        java.lang.String str7 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer4, true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 46947589L + "'", long1 == 46947589L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 46947589L + "'", long2 == 46947589L);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        java.lang.String str14 = org.apache.commons.codec.digest.Crypt.crypt(byteArray2, "2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952");
        java.lang.String str16 = org.apache.commons.codec.digest.UnixCrypt.crypt(byteArray2, "04757d4fa902aaf10b68a038a265fedc637220bdc9a751747bbb6e3882f24078");
        long[] longArray20 = org.apache.commons.codec.digest.MurmurHash3.hash128(byteArray2, (int) (short) 10, 0, 1650246903);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "21rlBaSszAatQ" + "'", str14, "21rlBaSszAatQ");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "04KqMlApbUYFs" + "'", str16, "04KqMlApbUYFs");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-6003662506232470900, -1051630556782543762]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[53, 113, 102, 57, 102, 65, 78, 70, 98, 74, 53, 86, 48, 120, 119, 107, 108, 51, 104, 87, 82, 66, 49, 70, 110, 119, 114, 47, 75, 52, 73, 43, 65, 108, 77, 114, 106, 85, 87, 116, 66, 68, 56, 61]");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        boolean boolean2 = org.apache.commons.codec.binary.StringUtils.equals((java.lang.CharSequence) "96dd4e7e704709544e2ff20a87f44da7dc5ebef6b0b5e59f2f680c7f8241d61a", (java.lang.CharSequence) "O4dEyLourO1vA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        int int1 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) 1137768543);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-757933106) + "'", int1 == (-757933106));
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str2 = beiderMorseEncoder0.encode("d41d8cd98f00b204e9800998ecf8427e");
        java.lang.String str4 = beiderMorseEncoder0.encode("SHA3-224");
        org.apache.commons.codec.language.bm.RuleType ruleType5 = beiderMorseEncoder0.getRuleType();
        java.lang.String str7 = beiderMorseEncoder0.encode("PFTPTKPKTP");
        beiderMorseEncoder0.setConcat(true);
        beiderMorseEncoder0.setConcat(true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi" + "'", str2, "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "sa|so" + "'", str4, "sa|so");
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ftptkpktp|pftptkpktp|ptptkpktp" + "'", str7, "ftptkpktp|pftptkpktp|ptptkpktp");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        int int1 = org.apache.commons.codec.digest.MurmurHash3.hash32("2ad36d9d51748e827af1acab7568d5e2");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1235739843) + "'", int1 == (-1235739843));
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.codec.binary.BinaryCodec binaryCodec0 = new org.apache.commons.codec.binary.BinaryCodec();
        byte[] byteArray2 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        byte[] byteArray3 = org.apache.commons.codec.net.URLCodec.decodeUrl(byteArray2);
        java.lang.String str5 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray2, false);
        byte[] byteArray6 = binaryCodec0.encode(byteArray2);
        java.lang.Object obj8 = binaryCodec0.decode((java.lang.Object) "\000h\000i\000!");
        byte[] byteArray10 = binaryCodec0.toByteArray("\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c");
        java.security.MessageDigest messageDigest11 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream12 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest11, inputStream12);
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream12);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha512_224Hex(inputStream12);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha512("$6$zee4hKQx$0mA45X5.jHNcBnBF4WWnf3n0EPvoyZOe/8w32HLGpxK5M5lsIQ1wpDTlLLCZid.2hCKZPTuzPcaBSg/r50DAt1");
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        org.apache.commons.codec.CodecPolicy codecPolicy29 = base32_21.getCodecPolicy();
        org.apache.commons.codec.binary.Base32InputStream base32InputStream30 = new org.apache.commons.codec.binary.Base32InputStream(inputStream12, false, (-965378730), byteArray19, codecPolicy29);
        char[] charArray31 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = binaryCodec0.encode((java.lang.Object) charArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: argument not a byte array");
        } catch (org.apache.commons.codec.EncoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92" + "'", str5, "B7D63E3D0BA4EC30D9B283700DE813CD11B60C189B67CB694A589D92");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[49, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 49, 48, 49, 48, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 49, 48, 49, 48, 48, 49, 49, 48, 49, 48, 48, 49, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 48, 49, 49, 48, 49, 49, 48, 48, 48, 49, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 49, 49, 49, 48, 48, 49, 49, 48, 49, 48, 48, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 48, 48, 48, 48, 48, 48, 48, 49, 49, 48, 49, 48, 49, 49, 49, 48, 48, 48, 48, 49, 48, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 49, 48, 49, 49, 48, 48, 49, 48, 48, 49, 49, 48, 48, 48, 48, 49, 49, 49, 48, 49, 49, 48, 48, 49, 48, 49, 48, 48, 49, 48, 48, 48, 48, 48, 48, 49, 48, 49, 49, 48, 48, 49, 49, 49, 49, 48, 49, 48, 48, 49, 49, 49, 49, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 48, 49, 49, 48, 49, 49, 49]");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0]");
        org.junit.Assert.assertNotNull(messageDigest11);
        org.junit.Assert.assertEquals(messageDigest11.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str14, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4" + "'", str15, "6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-23, -79, 11, -33, -89, -101, -39, -8, -117, -105, -106, -5, -21, -106, 50, -56, 21, 18, -61, -114, 105, 80, -19, -101, 10, -56, -40, -85, 92, -106, -81, -9, -50, -69, 98, -2, -85, -107, -112, -42, -17, -116, -95, 49, -86, 28, 11, -23, -119, -50, -86, -49, 59, 89, 81, 51, -52, -123, 46, -91, -69, 38, -16, -69]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy29 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy29.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "e9b10bdfa79bd9f88b9796fbeb9632c81512c38e6950ed9b0ac8d8ab5c96aff7cebb62feab9590d6ef8ca131aa1c0be989ceaacf3b595133cc852ea5bb26f0bb");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "e9b10bdfa79bd9f88b9796fbeb9632c81512c38e6950ed9b0ac8d8ab5c96aff7cebb62feab9590d6ef8ca131aa1c0be989ceaacf3b595133cc852ea5bb26f0bb");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[e, 9, b, 1, 0, b, d, f, a, 7, 9, b, d, 9, f, 8, 8, b, 9, 7, 9, 6, f, b, e, b, 9, 6, 3, 2, c, 8, 1, 5, 1, 2, c, 3, 8, e, 6, 9, 5, 0, e, d, 9, b, 0, a, c, 8, d, 8, a, b, 5, c, 9, 6, a, f, f, 7, c, e, b, b, 6, 2, f, e, a, b, 9, 5, 9, 0, d, 6, e, f, 8, c, a, 1, 3, 1, a, a, 1, c, 0, b, e, 9, 8, 9, c, e, a, a, c, f, 3, b, 5, 9, 5, 1, 3, 3, c, c, 8, 5, 2, e, a, 5, b, b, 2, 6, f, 0, b, b]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils1 = new org.apache.commons.codec.digest.DigestUtils(messageDigest0);
        java.io.OutputStream outputStream2 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(true);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream6 = new org.apache.commons.codec.binary.BaseNCodecOutputStream(outputStream2, (org.apache.commons.codec.binary.BaseNCodec) base16_4, false);
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) -1 };
        java.lang.String str10 = org.apache.commons.codec.binary.StringUtils.newStringUtf8(byteArray9);
        long long11 = base16_4.getEncodedLength(byteArray9);
        byte[] byteArray12 = digestUtils1.digest(byteArray9);
        java.security.MessageDigest messageDigest13 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        org.apache.commons.codec.digest.DigestUtils digestUtils14 = new org.apache.commons.codec.digest.DigestUtils(messageDigest13);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getMd2Digest();
        java.nio.ByteBuffer byteBuffer17 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        java.security.MessageDigest messageDigest18 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, byteBuffer17);
        char[] charArray20 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer17, true);
        java.lang.String str21 = digestUtils14.digestAsHex(byteBuffer17);
        byte[] byteArray22 = digestUtils1.digest(byteBuffer17);
        byte[] byteArray24 = digestUtils1.digest("");
        java.security.MessageDigest messageDigest25 = digestUtils1.getMessageDigest();
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(outputStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, -1]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\000\ufffd" + "'", str10, "\000\ufffd");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, 16, 18, -102, -37, -99, -101, 93, -121, -6, 112, 76, 20, -78, -89, -111, 104, -101, 56, 39, -120, -81, 72, -106, 82, 11, 76, 29, 47, -108, 35, -72, -58, -24, -103, 19, -66, 1, 77, -23, 89, -100, 93, 116, 115, 18, -91, -9]");
        org.junit.Assert.assertNotNull(messageDigest13);
        org.junit.Assert.assertEquals(messageDigest13.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertNotNull(messageDigest18);
        org.junit.Assert.assertEquals(messageDigest18.toString(), "MD2 Message Digest from SUN, <in progress>\n");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str21, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest25);
        org.junit.Assert.assertEquals(messageDigest25.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy3 = base64_2.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_4 = new org.apache.commons.codec.binary.Base16(false, codecPolicy3);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str11 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray10, false);
        byte[] byteArray14 = org.apache.commons.codec.digest.Blake3.hash(byteArray10);
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray10);
        long long16 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray10);
        javax.crypto.Mac mac17 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray10);
        java.lang.String str18 = base16_4.encodeAsString(byteArray10);
        java.util.BitSet bitSet19 = null;
        byte[] byteArray21 = org.apache.commons.codec.digest.DigestUtils.sha3_224("1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397");
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet19, byteArray21, true);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str30 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray29);
        java.lang.String str32 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray29, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        java.lang.String str34 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray29);
        java.lang.String str36 = org.apache.commons.codec.digest.Crypt.crypt(byteArray29, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec38 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet39 = null;
        byte[] byteArray41 = new byte[] { (byte) 100 };
        byte[] byteArray42 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet39, byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray42);
        byte[] byteArray44 = uRLCodec38.encode(byteArray43);
        java.lang.String str45 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray29, byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byteArray29);
        java.io.InputStream inputStream47 = java.io.InputStream.nullInputStream();
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.md5Hex(inputStream47);
        byte[] byteArray49 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray29, inputStream47);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.sha3_224(inputStream47);
        java.lang.String str51 = org.apache.commons.codec.digest.HmacUtils.hmacSha384Hex(byteArray23, inputStream47);
        org.apache.commons.codec.digest.Blake3 blake3_52 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray23);
        java.lang.String str53 = base16_4.encodeAsString(byteArray23);
        java.lang.String str54 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray23);
        org.junit.Assert.assertTrue("'" + codecPolicy3 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy3.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str11, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0A01640101" + "'", str13, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str15, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-7793026892456512543L) + "'", long16 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0A01640101" + "'", str18, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-126, 10, -21, -56, -47, -28, 44, -55, 21, -15, 0, 121, -124, -31, -41, -30, 23, 37, 17, 42, 61, -45, 71, 4, -44, -99, -55, -72]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[61, 56, 50, 61, 48, 65, 61, 69, 66, 61, 67, 56, 61, 68, 49, 61, 69, 52, 44, 61, 67, 57, 61, 49, 53, 61, 70, 49, 61, 48, 48, 121, 61, 56, 52, 61, 69, 49, 61, 68, 55, 61, 69, 50, 61, 49, 55, 37, 61, 49, 49, 42, 61, 51, 68, 61, 68, 51, 71, 61, 48, 52, 61, 68, 52, 61, 57, 68, 61, 67, 57, 61, 66, 56]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str30, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str32, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "AAAAAAA" + "'", str33, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str34, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0Acd8L3u4hVxI" + "'", str36, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str45, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(inputStream47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "d41d8cd98f00b204e9800998ecf8427e" + "'", str48, "d41d8cd98f00b204e9800998ecf8427e");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-74, 19, 103, -102, 8, 20, -39, -20, 119, 47, -107, -41, 120, -61, 95, -59, -1, 22, -105, -60, -109, 113, 86, 83, -58, -57, 18, 20, 66, -110, -59, -83]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[107, 78, 3, 66, 54, 103, -37, -73, 59, 110, 21, 69, 79, 14, -79, -85, -44, 89, 127, -102, 27, 7, -114, 63, 91, 90, 107, -57]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5" + "'", str51, "57f33d9ef78f27a3d8b3c4f7391b148a6037aa0dfdae6a7eb1bcdd008039bd18d360c50131fb81238b530791614369b5");
        org.junit.Assert.assertNotNull(blake3_52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "3D38323D30413D45423D43383D44313D45342C3D43393D31353D46313D3030793D38343D45313D44373D45323D3137253D31312A3D33443D4433473D30343D44343D39443D43393D4238" + "'", str53, "3D38323D30413D45423D43383D44313D45342C3D43393D31353D46313D3030793D38343D45313D44373D45323D3137253D31312A3D33443D4433473D30343D44343D39443D43393D4238");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "c39ad10bd4d561a873e4a9777e889c76787372feebab5dc40443881387500a1f" + "'", str54, "c39ad10bd4d561a873e4a9777e889c76787372feebab5dc40443881387500a1f");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        beiderMorseEncoder0.setConcat(true);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        java.lang.String str2 = doubleMetaphone0.doubleMetaphone("kBAwnYFpJm7aQ");
        org.apache.commons.codec.language.DoubleMetaphone.DoubleMetaphoneResult doubleMetaphoneResult4 = doubleMetaphone0.new DoubleMetaphoneResult(686869806);
        java.lang.String str5 = doubleMetaphoneResult4.getAlternate();
        doubleMetaphoneResult4.append('#', 'a');
        doubleMetaphoneResult4.append('-', '-');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KPNF" + "'", str2, "KPNF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType1 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder0.setRuleType(ruleType1);
        org.apache.commons.codec.language.bm.NameType nameType3 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder4 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType5 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder4.setRuleType(ruleType5);
        org.apache.commons.codec.language.bm.NameType nameType7 = beiderMorseEncoder4.getNameType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder8 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType9 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder8.setRuleType(ruleType9);
        org.apache.commons.codec.language.bm.RuleType ruleType11 = beiderMorseEncoder8.getRuleType();
        java.lang.String[] strArray50 = new java.lang.String[] { "ffffff", "663b90c899fa25a111067be0c22ffc64dcf581c2", "SHA-224", "0Acd8L3u4hVxI", "UTF-16LE", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "2ef0725975afd171e9cb76444b4969c3", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "ffffff", "6IiiRyxmjcARw", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "0A01640101", "2ef0725975afd171e9cb76444b4969c3", "663b90c899fa25a111067be0c22ffc64dcf581c2", "", "ffffff", "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", "c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", "6IiiRyxmjcARw", "663b90c899fa25a111067be0c22ffc64dcf581c2", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "MD2", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "99448658175a0534e08dbca1fe67b58231a53eec", "0A01640101", "0A01640101", "1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "SHA3-256", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "", "663b90c899fa25a111067be0c22ffc64dcf581c2", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet53 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet51);
        boolean boolean54 = languageSet53.isSingleton();
        org.apache.commons.codec.language.bm.NameType nameType55 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang56 = org.apache.commons.codec.language.bm.Lang.instance(nameType55);
        org.apache.commons.codec.language.bm.Languages languages57 = org.apache.commons.codec.language.bm.Languages.getInstance(nameType55);
        org.apache.commons.codec.language.bm.RuleType ruleType58 = org.apache.commons.codec.language.bm.RuleType.RULES;
        org.apache.commons.codec.language.bm.NameType nameType59 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.Lang lang60 = org.apache.commons.codec.language.bm.Lang.instance(nameType59);
        org.apache.commons.codec.language.bm.NameType nameType61 = org.apache.commons.codec.language.bm.NameType.ASHKENAZI;
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder62 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        org.apache.commons.codec.language.bm.RuleType ruleType63 = org.apache.commons.codec.language.bm.RuleType.EXACT;
        beiderMorseEncoder62.setRuleType(ruleType63);
        org.apache.commons.codec.language.bm.NameType nameType65 = beiderMorseEncoder62.getNameType();
        org.apache.commons.codec.language.bm.RuleType ruleType66 = beiderMorseEncoder62.getRuleType();
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet67 = org.apache.commons.codec.language.bm.Languages.NO_LANGUAGES;
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap68 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType61, ruleType66, languageSet67);
        org.apache.commons.codec.language.bm.NameType nameType69 = org.apache.commons.codec.language.bm.NameType.GENERIC;
        org.apache.commons.codec.language.bm.Lang lang70 = org.apache.commons.codec.language.bm.Lang.instance(nameType69);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet72 = lang70.guessLanguages("bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet74 = lang70.guessLanguages("da39a3ee5e6b4b0d3255bfef95601890afd80709");
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap75 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType59, ruleType66, languageSet74);
        java.util.Map<java.lang.String, java.util.List<org.apache.commons.codec.language.bm.Rule>> strMap76 = org.apache.commons.codec.language.bm.Rule.getInstanceMap(nameType55, ruleType58, languageSet74);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet77 = languageSet53.restrictTo(languageSet74);
        java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList78 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType7, ruleType11, languageSet53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.commons.codec.language.bm.Rule> ruleList80 = org.apache.commons.codec.language.bm.Rule.getInstance(nameType3, ruleType11, "A3d2");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No rules found for gen, exact, A3d2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + ruleType1 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType1.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType3 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType3.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType5 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType5.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType7 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType7.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType9 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType9.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + ruleType11 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType11.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(languageSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + nameType55 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType55.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang56);
        org.junit.Assert.assertNotNull(languages57);
        org.junit.Assert.assertTrue("'" + ruleType58 + "' != '" + org.apache.commons.codec.language.bm.RuleType.RULES + "'", ruleType58.equals(org.apache.commons.codec.language.bm.RuleType.RULES));
        org.junit.Assert.assertTrue("'" + nameType59 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType59.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertNotNull(lang60);
        org.junit.Assert.assertTrue("'" + nameType61 + "' != '" + org.apache.commons.codec.language.bm.NameType.ASHKENAZI + "'", nameType61.equals(org.apache.commons.codec.language.bm.NameType.ASHKENAZI));
        org.junit.Assert.assertTrue("'" + ruleType63 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType63.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertTrue("'" + nameType65 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType65.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertTrue("'" + ruleType66 + "' != '" + org.apache.commons.codec.language.bm.RuleType.EXACT + "'", ruleType66.equals(org.apache.commons.codec.language.bm.RuleType.EXACT));
        org.junit.Assert.assertNotNull(languageSet67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + nameType69 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType69.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertNotNull(lang70);
        org.junit.Assert.assertNotNull(languageSet72);
        org.junit.Assert.assertNotNull(languageSet74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(languageSet77);
        org.junit.Assert.assertNotNull(ruleList78);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator0 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator1 = phonemeComparator0.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator2 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator3 = phonemeComparator2.reversed();
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator4 = phonemeComparator0.thenComparing(phonemeComparator2);
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator5 = org.apache.commons.codec.language.bm.Rule.Phoneme.COMPARATOR;
        java.util.Comparator<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeComparator6 = phonemeComparator4.thenComparing(phonemeComparator5);
        org.junit.Assert.assertNotNull(phonemeComparator0);
        org.junit.Assert.assertNotNull(phonemeComparator1);
        org.junit.Assert.assertNotNull(phonemeComparator2);
        org.junit.Assert.assertNotNull(phonemeComparator3);
        org.junit.Assert.assertNotNull(phonemeComparator4);
        org.junit.Assert.assertNotNull(phonemeComparator5);
        org.junit.Assert.assertNotNull(phonemeComparator6);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.codec.digest.PureJavaCrc32C pureJavaCrc32C0 = new org.apache.commons.codec.digest.PureJavaCrc32C();
        pureJavaCrc32C0.reset();
        java.util.BitSet bitSet2 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray5 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet2, byteArray4);
        java.lang.String str6 = org.apache.commons.codec.digest.DigestUtils.sha3_224Hex(byteArray4);
        pureJavaCrc32C0.update(byteArray4, (-690116322), (-1612190696));
        byte[] byteArray11 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        pureJavaCrc32C0.update(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray19);
        java.lang.String str22 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray19, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray11, byteArray19);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("");
        byte[] byteArray28 = org.apache.commons.codec.net.URLCodec.encodeUrl(bitSet25, byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.HmacUtils.hmacSha512(byteArray11, byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) '4');
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream36 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest37 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest35, inputStream36);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream39 = new org.apache.commons.codec.binary.Base16InputStream(inputStream36, false);
        int int40 = base16InputStream39.available();
        byte[] byteArray41 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray34, (java.io.InputStream) base16InputStream39);
        byte[] byteArray44 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        long[] longArray48 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray44, 1164493051, 0, (int) '4');
        javax.crypto.Mac mac49 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray44);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        int int51 = base16InputStream39.read(byteArray50);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" + "'", str6, "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str20, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str22, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AAAAAAA" + "'", str23, "AAAAAAA");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[44, 25, 81, 48, 24, -86, -111, -40, 44, -103, -115, 18, -39, 13, 31, -4, 55, -9, 40, 4, 100, -72, 12, -2, -68, 111, -122, -91, 123, -78, -42, 39, -106, -105, 87, -15, -32, 60, 52, -87, 78, 32, 122, 96, 104, 91, 55, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str29, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 47, 34, -10, 1, 61, 18, 22, 38, -97, -55, -115, 61, -75, 58, -117, -128, -125, 0, 106, 79, 53, 123, 29, -33, -113, -3, 11, 77, -35, 82, -15, 94, 30, -57, 56, 70, -51, -30, 45, 25, 88, 74, -92, -32, -76, 109, -49, -73, -74, 71, -87, -65, 110, 78, -75, -56, -89, 14, 51, -22, -30, 65, -78]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 103, 65, 97, 81, 65, 104]");
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(messageDigest37);
        org.junit.Assert.assertEquals(messageDigest37.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-86, -106, -9, 110, 7, -73, -117, -111, -79, -105, -49, 62, -102, 87, -44, 34]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-2824814558701066679, -4809301050055417955]");
        org.junit.Assert.assertNotNull(mac49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[57, 89, 110, 72, 51, 56, 57, 119, 82, 52, 114, 98, 72, 71, 107, 89, 43, 76, 121, 116, 106, 100, 82, 119, 75, 84, 80, 88, 108, 116, 55, 79, 69, 47, 78, 120, 98, 69, 122, 54, 102, 100, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.nio.ByteBuffer byteBuffer4 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest2, byteBuffer4);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec8 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str15 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray14);
        java.lang.String str17 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray14, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        java.lang.String str19 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray14);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray14);
        java.lang.Object obj21 = quotedPrintableCodec8.decode((java.lang.Object) byteArray14);
        java.lang.String str22 = quotedPrintableCodec8.getDefaultCharset();
        java.lang.String str23 = quotedPrintableCodec8.getDefaultCharset();
        java.lang.String str25 = quotedPrintableCodec8.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec27 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet28 = null;
        byte[] byteArray30 = new byte[] { (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet28, byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray31);
        byte[] byteArray33 = uRLCodec27.encode(byteArray32);
        int int34 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray32);
        byte[] byteArray35 = quotedPrintableCodec8.encode(byteArray32);
        org.apache.commons.codec.binary.Base32 base32_38 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray35, true, (byte) -1);
        byte[] byteArray39 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest2, byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str15, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str17, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AAAAAAA" + "'", str18, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str19, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str20, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTF-8" + "'", str22, "UTF-8");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTF-8" + "'", str23, "UTF-8");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str25, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-690116322) + "'", int34 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[45, -106, 66, -51, -118, -63, -37, 64, -2, -50, 28, 99, -100, -74, 21, -36, -9, 105, -109, 23, -59, 63, -79, 76, 34, 20, 72, 2, -16, -126, 97, -37, 106, 98, -37, 54, -115, 49, -25, 57, -86, -56, -82, 108, -65, -21, -21, -73, -85, 41, -60, -3, 10, 16, -128, 81, -70, 60, 89, 1, 87, 77, 98, 116]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[76, 90, 90, 67, 122, 89, 114, 66, 50, 48, 68, 43, 122, 104, 120, 106, 110, 76, 89, 86, 51, 80, 100, 112, 107, 120, 102, 70, 80, 55, 70, 77, 73, 104, 82, 73, 65, 118, 67, 67, 89, 100, 116, 113, 89, 116, 115, 50, 106, 84, 72, 110, 79, 97, 114, 73, 114, 109, 121, 47, 54, 43, 117, 51, 113, 121, 110, 69, 47, 81, 111, 81, 103, 70, 71, 54, 80, 70, 107, 66, 86, 48, 49, 105, 100, 65, 61, 61]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 0 };
        org.apache.commons.codec.binary.Base32 base32_13 = new org.apache.commons.codec.binary.Base32((int) (byte) 0, byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac6, byteArray12);
        java.security.MessageDigest messageDigest15 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest17 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest15, inputStream16);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream16);
        javax.crypto.Mac mac20 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac14, inputStream16);
        org.apache.commons.codec.binary.Base32InputStream base32InputStream21 = new org.apache.commons.codec.binary.Base32InputStream(inputStream16);
        java.lang.String str22 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex((java.io.InputStream) base32InputStream21);
        byte[] byteArray23 = org.apache.commons.codec.digest.DigestUtils.md5((java.io.InputStream) base32InputStream21);
        java.lang.String str24 = org.apache.commons.codec.digest.Crypt.crypt(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = org.apache.commons.codec.digest.Sha2Crypt.sha512Crypt(byteArray23, "659f68d28b815b89f9f28ae0ad2798e5a63293e6a6955e14dd071e66ef7441b5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid salt value: 659f68d28b815b89f9f28ae0ad2798e5a63293e6a6955e14dd071e66ef7441b5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 10, 10, 0]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(messageDigest15);
        org.junit.Assert.assertEquals(messageDigest15.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertNotNull(messageDigest17);
        org.junit.Assert.assertEquals(messageDigest17.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str18, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(mac20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004" + "'", str22, "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "$6$vWm8VqYL$x8j610LeBPH4l3D6BfBvTxdW3bwBkIs0uh/M3VXTRgJsP5h0sR60qHUq70iYhw94JmZ.Gj45wFdoStqbFguK80" + "'", str24, "$6$vWm8VqYL$x8j610LeBPH4l3D6BfBvTxdW3bwBkIs0uh/M3VXTRgJsP5h0sR60qHUq70iYhw94JmZ.Gj45wFdoStqbFguK80");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesIso8859_1("49cc629c009ebf210ec037a1d501b7d18ef85694aff9075313e5dcdd8c010d0f0a0c65181b753ef1df7b2588062775b9b6c188c9c63e5205f4634ab4678b0df6");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[52, 57, 99, 99, 54, 50, 57, 99, 48, 48, 57, 101, 98, 102, 50, 49, 48, 101, 99, 48, 51, 55, 97, 49, 100, 53, 48, 49, 98, 55, 100, 49, 56, 101, 102, 56, 53, 54, 57, 52, 97, 102, 102, 57, 48, 55, 53, 51, 49, 51, 101, 53, 100, 99, 100, 100, 56, 99, 48, 49, 48, 100, 48, 102, 48, 97, 48, 99, 54, 53, 49, 56, 49, 98, 55, 53, 51, 101, 102, 49, 100, 102, 55, 98, 50, 53, 56, 56, 48, 54, 50, 55, 55, 53, 98, 57, 98, 54, 99, 49, 56, 56, 99, 57, 99, 54, 51, 101, 53, 50, 48, 53, 102, 52, 54, 51, 52, 97, 98, 52, 54, 55, 56, 98, 48, 100, 102, 54]");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha384Digest();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.getDigest("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", messageDigest1);
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms3 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet4 = null;
        byte[] byteArray6 = new byte[] { (byte) 100 };
        byte[] byteArray7 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet4, byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray7);
        javax.crypto.Mac mac9 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray8);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        javax.crypto.Mac mac22 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms3, byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        org.apache.commons.codec.digest.HmacUtils hmacUtils35 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms3, byteArray33);
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest2, byteArray33);
        org.apache.commons.codec.digest.DigestUtils digestUtils37 = new org.apache.commons.codec.digest.DigestUtils(messageDigest36);
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream39 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest40 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest38, inputStream39);
        java.nio.ByteBuffer byteBuffer42 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.digest(messageDigest40, byteBuffer42);
        java.lang.String str44 = digestUtils37.digestAsHex(byteBuffer42);
        org.apache.commons.codec.digest.XXHash32 xXHash32_45 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet46 = null;
        byte[] byteArray48 = new byte[] { (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet46, byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray49);
        xXHash32_45.update(byteArray51, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec56 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str63 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray62);
        java.lang.String str65 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray62, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str66 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray62);
        java.lang.String str67 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray62);
        java.lang.String str68 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray62);
        java.lang.Object obj69 = quotedPrintableCodec56.decode((java.lang.Object) byteArray62);
        java.lang.String str70 = quotedPrintableCodec56.getDefaultCharset();
        java.lang.String str71 = quotedPrintableCodec56.getDefaultCharset();
        java.lang.String str73 = quotedPrintableCodec56.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec75 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet76 = null;
        byte[] byteArray78 = new byte[] { (byte) 100 };
        byte[] byteArray79 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet76, byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray79);
        byte[] byteArray81 = uRLCodec75.encode(byteArray80);
        int int82 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray80);
        byte[] byteArray83 = quotedPrintableCodec56.encode(byteArray80);
        java.lang.String str84 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray51, byteArray83);
        byte[] byteArray85 = digestUtils37.digest(byteArray83);
        byte[] byteArray87 = digestUtils37.digest("afa3adc02e73c4b0b8223f1fcc03e1cd");
        java.security.MessageDigest messageDigest88 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream89 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest90 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest88, inputStream89);
        java.lang.String str91 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream89);
        byte[] byteArray92 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream89);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream93 = new org.apache.commons.codec.binary.Base16InputStream(inputStream89);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream94 = new org.apache.commons.codec.binary.Base64InputStream(inputStream89);
        byte[] byteArray95 = org.apache.commons.codec.digest.DigestUtils.sha3_512(inputStream89);
        byte[] byteArray96 = digestUtils37.digest(inputStream89);
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms3 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms3.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(messageDigest40);
        org.junit.Assert.assertEquals(messageDigest40.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[95, 64, -81, 13, 25, -127, -108, 67, 56, -44, -88, -75, -99, -26, -30, 113, 23, 21, 27, -41, 118, 105, 115, 47, 101, 11, 38, -60, 92, 74, -64, -41, 6, 12, 32, 127, -27, 36, 65, -15, -87, -50, -127, 34, -41, -17, 116, -114, -90, -124, -31, -3, -42, -50, 73, 70, -5, 101, -75, -58, -79, 57, -126, 119]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe" + "'", str44, "01118df906a97646cfc8587e18c99189855dea2d3a76ecfbf9b9716d6bff07952c55e6320079cc7b6e353b0718c3effe");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str63, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str65, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AAAAAAA" + "'", str66, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str67, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str68, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTF-8" + "'", str70, "UTF-8");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "UTF-8" + "'", str71, "UTF-8");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str73, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[100]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-690116322) + "'", int82 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d" + "'", str84, "4c98f32a81be34128784b1e12b12b6d0067344e3e7697e56b3132f7a0ce68b473defef83edcaf80923730064ca2318078fbb9fa3444ce5ddcda20d72d173ac1d");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[64, 44, -14, -25, -5, 124, -64, 69, 19, -50, 27, -65, 78, -31, 39, 80, -17, 92, -2, -19, -99, 80, 90, 95, -45, -94, -121, 90, 123, -68, -14, -80, -52, -21, 18, -20, 102, 30, 104, 47, 17, 24, -67, 72, -39, 125, 27, 94]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-104, 88, -79, -103, 15, -18, -40, -2, 25, -57, 37, 118, -68, -123, -3, -17, -42, 26, -116, -9, 50, -52, -69, 41, 121, 83, -60, 61, -69, 21, -102, -51, -61, 14, -47, -39, -22, 45, 65, 122, -51, -39, -62, 19, 50, -96, 58, -101]");
        org.junit.Assert.assertNotNull(messageDigest88);
        org.junit.Assert.assertEquals(messageDigest88.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream89);
        org.junit.Assert.assertNotNull(messageDigest90);
        org.junit.Assert.assertEquals(messageDigest90.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str91, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-90, -97, 115, -52, -94, 58, -102, -59, -56, -75, 103, -36, 24, 90, 117, 110, -105, -55, -126, 22, 79, -30, 88, 89, -32, -47, -36, -63, 71, 92, -128, -90, 21, -78, 18, 58, -15, -11, -7, 76, 17, -29, -23, 64, 44, 58, -59, 88, -11, 0, 25, -99, -107, -74, -45, -29, 1, 117, -123, -122, 40, 29, -51, 38]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.codec.binary.Base32 base32_1 = new org.apache.commons.codec.binary.Base32((int) (short) 100);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        byte[] byteArray15 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray15);
        java.io.InputStream inputStream17 = java.io.InputStream.nullInputStream();
        java.lang.String str18 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray16, inputStream17);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream19 = new org.apache.commons.codec.binary.Base64InputStream(inputStream17);
        int int20 = base64InputStream19.available();
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha1(byteArray7, (java.io.InputStream) base64InputStream19);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream24 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream19, false, true);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream25 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream24);
        boolean boolean26 = base16InputStream24.isStrictDecoding();
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha((java.io.InputStream) base16InputStream24);
        java.lang.String str28 = base32_1.encodeAsString(byteArray27);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str18, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-5, -37, 29, 27, 24, -86, 108, 8, 50, 75, 125, 100, -73, 31, -73, 99, 112, 105, 14, 29]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-38, 57, -93, -18, 94, 107, 75, 13, 50, 85, -65, -17, -107, 96, 24, -112, -81, -40, 7, 9]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3I42H3S6NNFQ2MSVX7XZKYAYSCX5QBYJ\r\n" + "'", str28, "3I42H3S6NNFQ2MSVX7XZKYAYSCX5QBYJ\r\n");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        int int3 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (byte) 0, 46947589L, 436110042);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2057402559 + "'", int3 == 2057402559);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha("$6$YBcl1v8D$gMs7wb0MztJwDjR4F6msVk2Gd6AJXpO1Ho2yyaSWyenySCOFTI3DGRXG5jhHuuJYmBcRk1UKI3g1fwQSdjTES1");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[48, 119, -95, 2, 71, -60, -27, 39, 56, 100, -53, 13, 12, 70, 29, 88, -61, -102, -28, 5]");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA-512/224");
        java.lang.String str2 = org.apache.commons.codec.binary.StringUtils.newStringUtf16Be(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.net.PercentCodec percentCodec4 = new org.apache.commons.codec.net.PercentCodec(byteArray1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[50, 89, -31, 82, 74, 57, -37, -119, -106, 59, -26, 43, 116, 109, -120, -62, -89, -100, 107, -68, -100, 87, -101, 58, -9, 4, -48, 92]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c" + "'", str2, "\u3259\ue152\u4a39\ufffd\ue62b\u746d\u88c2\ua79c\u6bbc\u9c57\u9b3a\uf704\ud05c");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.Charsets.UTF_16;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy3 = base64_2.getCodecPolicy();
        org.apache.commons.codec.net.BCodec bCodec4 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = bCodec4.decode("BFFB");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: RFC 1522 violation: malformed encoded content");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + codecPolicy3 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy3.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        int int6 = base64InputStream5.available();
        int int7 = base64InputStream5.read();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray15);
        java.lang.String str18 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray15, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray15);
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray15);
        java.lang.String str22 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray15);
        org.apache.commons.codec.binary.Base32 base32_24 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        boolean boolean31 = base32_24.isInAlphabet(byteArray29, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str34 = base32_24.encodeAsString(byteArray33);
        java.security.MessageDigest messageDigest35 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest36 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream37 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest38 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest36, inputStream37);
        java.lang.String str39 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream37);
        byte[] byteArray40 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream37);
        java.security.MessageDigest messageDigest41 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest35, inputStream37);
        java.lang.String str42 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray33, inputStream37);
        byte[] byteArray43 = org.apache.commons.codec.digest.DigestUtils.md2(inputStream37);
        java.lang.String str44 = org.apache.commons.codec.digest.HmacUtils.hmacSha1Hex(byteArray15, inputStream37);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream45 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base64InputStream5, false, 4, byteArray15);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str16, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str18, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AAAAAAA" + "'", str19, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str20, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str21, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\000\000\000\000\000" + "'", str22, "\000\000\000\000\000");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ABUAA2IAEE======" + "'", str34, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(messageDigest35);
        org.junit.Assert.assertEquals(messageDigest35.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest36);
        org.junit.Assert.assertEquals(messageDigest36.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream37);
        org.junit.Assert.assertNotNull(messageDigest38);
        org.junit.Assert.assertEquals(messageDigest38.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str39, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest41);
        org.junit.Assert.assertEquals(messageDigest41.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ad1cae68ff9c689626df1f53ac8960047f9bd8ff" + "'", str42, "ad1cae68ff9c689626df1f53ac8960047f9bd8ff");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-125, 80, -27, -93, -30, 76, 21, 61, -14, 39, 92, -97, -128, 105, 39, 115]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d" + "'", str44, "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 99, 111, 100, 101, 99, 46, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str9 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray8);
        java.lang.String str11 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray8, false);
        java.lang.String str12 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, byteArray8);
        byte[] byteArray14 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        java.io.InputStream inputStream16 = java.io.InputStream.nullInputStream();
        java.lang.String str17 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray15, inputStream16);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream18 = new org.apache.commons.codec.binary.Base64InputStream(inputStream16);
        byte[] byteArray19 = org.apache.commons.codec.digest.HmacUtils.hmacSha384(byteArray8, (java.io.InputStream) base64InputStream18);
        char[] charArray20 = org.apache.commons.codec.binary.Hex.encodeHex(byteArray19);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str9, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0A01640101" + "'", str11, "0A01640101");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98" + "'", str12, "e99328fd4b731be5c58dfd1970f71befba650156cfbfb21a507db1d93bc0e24eedc1e81cf47e0bd76833b179fd1ed55b4433dec4c7ee53c687472646eb96fb98");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str17, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[2, 34, -90, -86, 24, -114, 46, 116, -89, 122, -11, -103, 109, 29, -113, 57, -115, -50, -121, -67, 99, -35, 44, 88, -108, 52, 45, 68, -1, -123, 62, -43, 37, -26, -55, -24, 47, -94, 118, -68, 91, -39, 125, -89, 38, -102, -107, 112]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "0222a6aa188e2e74a77af5996d1d8f398dce87bd63dd2c5894342d44ff853ed525e6c9e82fa276bc5bd97da7269a9570");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "0222a6aa188e2e74a77af5996d1d8f398dce87bd63dd2c5894342d44ff853ed525e6c9e82fa276bc5bd97da7269a9570");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[0, 2, 2, 2, a, 6, a, a, 1, 8, 8, e, 2, e, 7, 4, a, 7, 7, a, f, 5, 9, 9, 6, d, 1, d, 8, f, 3, 9, 8, d, c, e, 8, 7, b, d, 6, 3, d, d, 2, c, 5, 8, 9, 4, 3, 4, 2, d, 4, 4, f, f, 8, 5, 3, e, d, 5, 2, 5, e, 6, c, 9, e, 8, 2, f, a, 2, 7, 6, b, c, 5, b, d, 9, 7, d, a, 7, 2, 6, 9, a, 9, 5, 7, 0]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.NameType nameType2 = beiderMorseEncoder0.getNameType();
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder3 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        java.lang.String str5 = beiderMorseEncoder3.encode("d41d8cd98f00b204e9800998ecf8427e");
        java.lang.String str7 = beiderMorseEncoder3.encode("SHA3-224");
        org.apache.commons.codec.language.bm.RuleType ruleType8 = beiderMorseEncoder3.getRuleType();
        org.apache.commons.codec.language.bm.PhoneticEngine phoneticEngine11 = new org.apache.commons.codec.language.bm.PhoneticEngine(nameType2, ruleType8, true, (-755363659));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = phoneticEngine11.encode("$1$UYtF..0A$qlvzexZps/99jmTbfJRm11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal initial capacity: -755363659");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + nameType2 + "' != '" + org.apache.commons.codec.language.bm.NameType.GENERIC + "'", nameType2.equals(org.apache.commons.codec.language.bm.NameType.GENERIC));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi" + "'", str5, "tgtfbikf|tgtfbikfi|tgtfbitsfi|tgtfbizfi|tgtfbkf|tgtfbkfi|tgtfbtsfi|tgtfbzfi|tgtfvikfi|tgtfvkfi|tstfbikfi|tstfbitsfi|tstfbkfi|tstfbtsfi|ztfbikfi|ztfbizfi|ztfbkfi|ztfbzfi");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "sa|so" + "'", str7, "sa|so");
        org.junit.Assert.assertTrue("'" + ruleType8 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType8.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.lang.String str1 = org.apache.commons.codec.digest.DigestUtils.md2Hex("6ed0dd02806fa89e25de060c19d3ac86cabb87d6a0ddd05c333b84f4");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "7d85ed30cf6ec72b424b2bba03e94dc9" + "'", str1, "7d85ed30cf6ec72b424b2bba03e94dc9");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_224("c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff");
        org.apache.commons.codec.CodecPolicy codecPolicy5 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base32InputStream base32InputStream6 = new org.apache.commons.codec.binary.Base32InputStream(inputStream0, true, (int) (byte) 0, byteArray4, codecPolicy5);
        char[] charArray7 = org.apache.commons.codec.binary.BinaryCodec.toAsciiChars(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.StringUtils.getBytesUsAscii("A3d2");
        byte[] byteArray10 = org.apache.commons.codec.digest.HmacUtils.hmacMd5(byteArray4, byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-35, 14, 76, 94, -81, -89, -15, 18, 26, 25, 5, -125, -122, 8, 20, -94, 121, -91, 126, 110, -27, -48, -29, 38, -71, 85, 39, -78]");
        org.junit.Assert.assertTrue("'" + codecPolicy5 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy5.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "10110010001001110101010110111001001001101110001111010000111001010110111001111110101001010111100110100010000101000000100010000110100000110000010100011001000110100001001011110001101001111010111101011110010011000000111011011101");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 51, 100, 50]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[22, -83, 111, -15, 107, 22, -127, 18, -45, 8, -115, 72, 101, -111, -86, -65]");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        boolean boolean3 = doubleMetaphone0.isDoubleMetaphoneEqual("2165db20acc1d22d51a2f5bca7f209b5b91f769c0d308cfb7a2a99decb9eee2089892bbbb00c17c39df479ed8a7396de6f6d3448da7850231eab0c9c871b6952", "7664fbe062101db016383ccc7d71037a073342cb0a161828f86315b6b9b06ed4053486c8d4f60dd3eb5eefa806facff24d12a98529fe15a02e986cca332ce518");
        java.lang.String str5 = doubleMetaphone0.doubleMetaphone("ash");
        doubleMetaphone0.setMaxCodeLen((-237789309));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = doubleMetaphone0.doubleMetaphone("0000000000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -237789309");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AX" + "'", str5, "AX");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.io.InputStream inputStream0 = java.io.InputStream.nullInputStream();
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream3 = new org.apache.commons.codec.binary.Base64InputStream(inputStream0, false);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha384(inputStream0);
        org.junit.Assert.assertNotNull(inputStream0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, -80, 96, -89, 81, -84, -106, 56, 76, -39, 50, 126, -79, -79, -29, 106, 33, -3, -73, 17, 20, -66, 7, 67, 76, 12, -57, -65, 99, -10, -31, -38, 39, 78, -34, -65, -25, 111, 101, -5, -43, 26, -46, -15, 72, -104, -71, 91]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        java.io.OutputStream outputStream0 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream1 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream0);
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream3 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream5 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base64OutputStream1, true);
        org.apache.commons.codec.digest.XXHash32 xXHash32_8 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray12);
        xXHash32_8.update(byteArray14, (int) (byte) 10, (-690116322));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream18 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream1, true, 760066800, byteArray14);
        org.apache.commons.codec.binary.Base32 base32_22 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        boolean boolean29 = base32_22.isInAlphabet(byteArray27, false);
        org.apache.commons.codec.CodecPolicy codecPolicy30 = base32_22.getCodecPolicy();
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream31 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, true, true, codecPolicy30);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream34 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base64OutputStream1, false, false);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream37 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base16OutputStream34, true, false);
        org.junit.Assert.assertNotNull(outputStream0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + codecPolicy30 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy30.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms0 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        javax.crypto.Mac mac6 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray5);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray12);
        java.lang.String str15 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray12, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str16 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray12);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray12);
        javax.crypto.Mac mac19 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms0, byteArray12);
        org.apache.commons.codec.binary.Base32 base32_21 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet22 = null;
        byte[] byteArray24 = new byte[] { (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet22, byteArray24);
        byte[] byteArray26 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray25);
        boolean boolean28 = base32_21.isInAlphabet(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str31 = base32_21.encodeAsString(byteArray30);
        org.apache.commons.codec.digest.HmacUtils hmacUtils32 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms0, byteArray30);
        java.nio.ByteBuffer byteBuffer34 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray35 = hmacUtils32.hmac(byteBuffer34);
        byte[] byteArray37 = org.apache.commons.codec.digest.DigestUtils.sha512_224("$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        java.lang.String str38 = hmacUtils32.hmacHex(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray40);
        java.io.InputStream inputStream42 = java.io.InputStream.nullInputStream();
        java.lang.String str43 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray41, inputStream42);
        java.io.InputStream inputStream44 = java.io.InputStream.nullInputStream();
        java.lang.String str45 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(inputStream44);
        java.lang.String str46 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(inputStream44);
        java.lang.String str47 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray41, inputStream44);
        byte[] byteArray48 = hmacUtils32.hmac(inputStream44);
        java.lang.String str50 = hmacUtils32.hmacHex("approx");
        java.nio.ByteBuffer byteBuffer52 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("ABUAA2IAEE======");
        java.lang.String str54 = org.apache.commons.codec.binary.Hex.encodeHexString(byteBuffer52, true);
        java.lang.String str55 = hmacUtils32.hmacHex(byteBuffer52);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms0 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms0.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str13, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str15, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AAAAAAA" + "'", str16, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str17, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str18, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ABUAA2IAEE======" + "'", str31, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-7, 66, -110, 8, 42, -107, -82, -73, 51, -90, 97, -114, -116, -15, 109, -48, -41, -117, 54, 3, 79, 6, -51, 54, -56, 34, 60, 91]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4" + "'", str38, "52106e5d8bc7f95a39ebd909f7d0eb90ab9753c8c85815e28328dff4");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str43, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(inputStream44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b" + "'", str45, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a" + "'", str46, "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str47, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-13, 19, -33, -19, 6, -82, 25, -120, 30, -114, -29, -18, -46, -2, -20, 15, -105, -5, 108, -32, -16, 17, 67, -116, 127, -123, 74, 95]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "e7f5829bb7e6810105b5f25a0ff35702463313ae91ea64d1f632712b" + "'", str50, "e7f5829bb7e6810105b5f25a0ff35702463313ae91ea64d1f632712b");
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "414255414132494145453d3d3d3d3d3d" + "'", str54, "414255414132494145453d3d3d3d3d3d");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str55, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.md2("AB//8M1zppHNA");
        org.apache.commons.codec.digest.Blake3 blake3_2 = org.apache.commons.codec.digest.Blake3.initKeyDerivationFunction(byteArray1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec5 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray11);
        java.lang.String str14 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray11, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        java.lang.String str16 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray11);
        java.lang.String str17 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray11);
        java.lang.Object obj18 = quotedPrintableCodec5.decode((java.lang.Object) byteArray11);
        java.lang.String str19 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str20 = quotedPrintableCodec5.getDefaultCharset();
        java.lang.String str22 = quotedPrintableCodec5.decode("8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.apache.commons.codec.net.URLCodec uRLCodec24 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet25 = null;
        byte[] byteArray27 = new byte[] { (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet25, byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray28);
        byte[] byteArray30 = uRLCodec24.encode(byteArray29);
        int int31 = org.apache.commons.codec.digest.MurmurHash3.hash32x86(byteArray29);
        byte[] byteArray32 = quotedPrintableCodec5.encode(byteArray29);
        org.apache.commons.codec.binary.Base32 base32_35 = new org.apache.commons.codec.binary.Base32((-2042891860), byteArray32, true, (byte) -1);
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec37 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str44 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray43);
        java.lang.String str46 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray43, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray43);
        java.lang.String str49 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray43);
        java.lang.Object obj50 = quotedPrintableCodec37.decode((java.lang.Object) byteArray43);
        byte[] byteArray51 = org.apache.commons.codec.digest.Blake3.hash(byteArray43);
        byte[] byteArray52 = base32_35.decode(byteArray51);
        blake3_2.doFinalize(byteArray51);
        blake3_2.reset();
        java.nio.charset.Charset charset55 = null;
        java.nio.charset.Charset charset56 = org.apache.commons.codec.Charsets.toCharset(charset55);
        org.apache.commons.codec.binary.Hex hex57 = new org.apache.commons.codec.binary.Hex(charset56);
        java.lang.String str58 = hex57.toString();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms59 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet60 = null;
        byte[] byteArray62 = new byte[] { (byte) 100 };
        byte[] byteArray63 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet60, byteArray62);
        byte[] byteArray64 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray63);
        javax.crypto.Mac mac65 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms59, byteArray64);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str72 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray71);
        java.lang.String str74 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray71, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray71);
        java.lang.String str76 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray71);
        java.lang.String str77 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray71);
        javax.crypto.Mac mac78 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms59, byteArray71);
        org.apache.commons.codec.binary.Base32 base32_80 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet81 = null;
        byte[] byteArray83 = new byte[] { (byte) 100 };
        byte[] byteArray84 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet81, byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray84);
        boolean boolean87 = base32_80.isInAlphabet(byteArray85, false);
        byte[] byteArray89 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str90 = base32_80.encodeAsString(byteArray89);
        org.apache.commons.codec.digest.HmacUtils hmacUtils91 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms59, byteArray89);
        java.nio.ByteBuffer byteBuffer93 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        char[] charArray94 = org.apache.commons.codec.binary.Hex.encodeHex(byteBuffer93);
        java.lang.String str95 = hmacUtils91.hmacHex(byteBuffer93);
        byte[] byteArray96 = hex57.decode(byteBuffer93);
        // The following exception was thrown during execution in test generation
        try {
            blake3_2.doFinalize(byteArray96, 2057402559, (-557514842));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Length must be non-negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[87, 90, 95, 78, -90, 89, -37, -42, 54, -102, 15, 23, -102, 44, 81, 124]");
        org.junit.Assert.assertNotNull(blake3_2);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str12, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str14, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AAAAAAA" + "'", str15, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str16, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str17, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTF-8" + "'", str19, "UTF-8");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF-8" + "'", str20, "UTF-8");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str22, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-690116322) + "'", int31 == (-690116322));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str44, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str46, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AAAAAAA" + "'", str47, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str48, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str49, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 26, 57, -81, -124, 36, -20, 31, 99, 59, 97, -34, 126, -14, -95, -116, -41, -44, 23, -49, 59, 67, -30, 92, -53, 58, 114, -19, 28, -28, 68, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, -67, -41, -113, 95]");
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + hmacAlgorithms59 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms59.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str72, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str74, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "AAAAAAA" + "'", str75, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str76, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str77, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac78);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[100]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[100]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ABUAA2IAEE======" + "'", str90, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "5348412d3531322f323536");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[5, 3, 4, 8, 4, 1, 2, d, 3, 5, 3, 1, 3, 2, 2, f, 3, 2, 3, 5, 3, 6]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f" + "'", str95, "f313dfed06ae19881e8ee3eed2feec0f97fb6ce0f011438c7f854a5f");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.codec.language.bm.BeiderMorseEncoder beiderMorseEncoder0 = new org.apache.commons.codec.language.bm.BeiderMorseEncoder();
        boolean boolean1 = beiderMorseEncoder0.isConcat();
        org.apache.commons.codec.language.bm.RuleType ruleType2 = beiderMorseEncoder0.getRuleType();
        java.lang.String str3 = ruleType2.getName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + ruleType2 + "' != '" + org.apache.commons.codec.language.bm.RuleType.APPROX + "'", ruleType2.equals(org.apache.commons.codec.language.bm.RuleType.APPROX));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "approx" + "'", str3, "approx");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        byte[] byteArray2 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("2ef0725975afd171e9cb76444b4969c3", "16fd67a8bb44f961f07f53972686acb3");
        long[] longArray6 = org.apache.commons.codec.digest.MurmurHash3.hash128x64(byteArray2, 1164493051, 0, (int) '4');
        javax.crypto.Mac mac7 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray2);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str14 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray13);
        java.lang.String str16 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray13, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str17 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str18 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray13);
        java.lang.String str20 = org.apache.commons.codec.digest.Crypt.crypt(byteArray13, "0A01640101");
        org.apache.commons.codec.net.URLCodec uRLCodec22 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet23 = null;
        byte[] byteArray25 = new byte[] { (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet23, byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray26);
        byte[] byteArray28 = uRLCodec22.encode(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.digest.HmacUtils.hmacMd5Hex(byteArray13, byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray27);
        javax.crypto.Mac mac31 = org.apache.commons.codec.digest.HmacUtils.updateHmac(mac7, byteArray27);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-11, -119, -57, -33, -49, 112, 71, -118, -37, 28, 105, 24, -8, -68, -83, -115, -44, 112, 41, 51, -41, -106, -34, -50, 19, -13, 113, 108, 76, -6, 125, -47]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-2824814558701066679, -4809301050055417955]");
        org.junit.Assert.assertNotNull(mac7);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str14, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str16, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AAAAAAA" + "'", str17, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str18, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0Acd8L3u4hVxI" + "'", str20, "0Acd8L3u4hVxI");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "d2789eba1651444e3ee6cb80db8900fa" + "'", str29, "d2789eba1651444e3ee6cb80db8900fa");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[33, 101, -37, 32, -84, -63, -46, 45, 81, -94, -11, -68, -89, -14, 9, -75, -71, 31, 118, -100, 13, 48, -116, -5, 122, 42, -103, -34, -53, -98, -18, 32, -119, -119, 43, -69, -80, 12, 23, -61, -99, -12, 121, -19, -118, 115, -106, -34, 111, 109, 52, 72, -38, 120, 80, 35, 30, -85, 12, -100, -121, 27, 105, 82]");
        org.junit.Assert.assertNotNull(mac31);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.io.OutputStream outputStream0 = null;
        java.io.OutputStream outputStream3 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream4 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream3);
        byte[] byteArray7 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream4.write(byteArray7);
        base64OutputStream4.write((int) '4');
        base64OutputStream4.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream13 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream4);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str23 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray22);
        java.lang.String str25 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray22, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray22);
        java.io.InputStream inputStream28 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream31 = new org.apache.commons.codec.binary.Base16InputStream(inputStream28, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy34 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream35 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream31, false, false, codecPolicy34);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray22, true, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream37 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream13, true, false, codecPolicy34);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream38 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream0, false, true, codecPolicy34);
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream40 = new org.apache.commons.codec.binary.Base64OutputStream((java.io.OutputStream) base16OutputStream38, false);
        org.apache.commons.codec.binary.Base16 base16_42 = new org.apache.commons.codec.binary.Base16(true);
        byte[] byteArray44 = org.apache.commons.codec.digest.DigestUtils.sha3_224("SHA3-256");
        java.lang.String str45 = org.apache.commons.codec.binary.StringUtils.newStringUsAscii(byteArray44);
        byte[] byteArray46 = base16_42.encode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.CodecPolicy codecPolicy50 = base64_49.getCodecPolicy();
        org.apache.commons.codec.binary.Base16 base16_51 = new org.apache.commons.codec.binary.Base16(false, codecPolicy50);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str58 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray57);
        java.lang.String str60 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray57, false);
        byte[] byteArray61 = org.apache.commons.codec.digest.Blake3.hash(byteArray57);
        java.lang.String str62 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray57);
        long long63 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray57);
        javax.crypto.Mac mac64 = org.apache.commons.codec.digest.HmacUtils.getHmacSha384(byteArray57);
        java.lang.String str65 = base16_51.encodeAsString(byteArray57);
        java.lang.String str66 = base16_42.encodeAsString(byteArray57);
        org.apache.commons.codec.binary.BaseNCodecOutputStream baseNCodecOutputStream68 = new org.apache.commons.codec.binary.BaseNCodecOutputStream((java.io.OutputStream) base16OutputStream38, (org.apache.commons.codec.binary.BaseNCodec) base16_42, true);
        org.junit.Assert.assertNotNull(outputStream3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str23, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str25, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AAAAAAA" + "'", str26, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy34 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy34.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-73, -42, 62, 61, 11, -92, -20, 48, -39, -78, -125, 112, 13, -24, 19, -51, 17, -74, 12, 24, -101, 103, -53, 105, 74, 88, -99, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" + "'", str45, "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[98, 55, 100, 54, 51, 101, 51, 100, 48, 98, 97, 52, 101, 99, 51, 48, 100, 57, 98, 50, 56, 51, 55, 48, 48, 100, 101, 56, 49, 51, 99, 100, 49, 49, 98, 54, 48, 99, 49, 56, 57, 98, 54, 55, 99, 98, 54, 57, 52, 97, 53, 56, 57, 100, 57, 50]");
        org.junit.Assert.assertTrue("'" + codecPolicy50 + "' != '" + org.apache.commons.codec.CodecPolicy.LENIENT + "'", codecPolicy50.equals(org.apache.commons.codec.CodecPolicy.LENIENT));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 1, 100, 1, 1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str58, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0A01640101" + "'", str60, "0A01640101");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[61, 83, -68, -68, 23, 2, 87, 22, 22, 55, 33, -82, -49, -72, -59, 12, -111, 72, -103, 70, 79, -94, 84, -99, -108, -54, -25, -116, 35, -100, 80, 104]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62" + "'", str62, "8533a802948d8ce1ce687919d20604f3febe15bdebbbcf17f93ba065ec99e1f77ffe7e9a5bc5b384bed96d11ba7a08b17c65ed993ee794d9decdd739fdcfca62");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-7793026892456512543L) + "'", long63 == (-7793026892456512543L));
        org.junit.Assert.assertNotNull(mac64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0A01640101" + "'", str65, "0A01640101");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0a01640101" + "'", str66, "0a01640101");
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.lang.String[] strArray39 = new java.lang.String[] { "ffffff", "663b90c899fa25a111067be0c22ffc64dcf581c2", "SHA-224", "0Acd8L3u4hVxI", "UTF-16LE", "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "2ef0725975afd171e9cb76444b4969c3", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "ffffff", "6IiiRyxmjcARw", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "0A01640101", "2ef0725975afd171e9cb76444b4969c3", "663b90c899fa25a111067be0c22ffc64dcf581c2", "", "ffffff", "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a", "84828217db05e0f40c432335572a49b77b653fc2183733677e4c111c", "c2e00ba4220a62726f41d382082bd4fef0d9da61a66105d3fabc8aff", "6IiiRyxmjcARw", "663b90c899fa25a111067be0c22ffc64dcf581c2", "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb", "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "MD2", "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5", "99448658175a0534e08dbca1fe67b58231a53eec", "0A01640101", "0A01640101", "1842668b80dfd57151a4ee0eaafd2baa3bab8f776bddf680e1c29ef392dd9d9b2c003dc5d4b6c9d0a4f1ffc7a0aed397", "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7", "SHA3-256", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107", "", "663b90c899fa25a111067be0c22ffc64dcf581c2", "\ufffd\ufffd>=\013\ufffd\ufffd\ufffd\ufffd\ufffdp\r\ufffd\023\ufffd\021\ufffd\f\030\ufffd\ufffd\ufffd\ufffd" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet42 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet40);
        org.apache.commons.codec.language.bm.Languages.LanguageSet languageSet43 = org.apache.commons.codec.language.bm.Languages.LanguageSet.from((java.util.Set<java.lang.String>) strSet40);
        boolean boolean44 = languageSet43.isEmpty();
        org.apache.commons.codec.language.bm.Rule.Phoneme phoneme45 = new org.apache.commons.codec.language.bm.Rule.Phoneme((java.lang.CharSequence) "$apr1$9ytn96Ff$vExEAsdC02Rc6lBFC2pHx/", languageSet43);
        org.apache.commons.codec.language.bm.Rule.Phoneme[] phonemeArray46 = new org.apache.commons.codec.language.bm.Rule.Phoneme[] { phoneme45 };
        java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme> phonemeList47 = new java.util.ArrayList<org.apache.commons.codec.language.bm.Rule.Phoneme>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList47, phonemeArray46);
        org.apache.commons.codec.language.bm.Rule.PhonemeList phonemeList49 = new org.apache.commons.codec.language.bm.Rule.PhonemeList((java.util.List<org.apache.commons.codec.language.bm.Rule.Phoneme>) phonemeList47);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageSet42);
        org.junit.Assert.assertNotNull(languageSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(phonemeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray1);
        java.io.InputStream inputStream3 = java.io.InputStream.nullInputStream();
        java.lang.String str4 = org.apache.commons.codec.digest.HmacUtils.hmacSha512Hex(byteArray2, inputStream3);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream5 = new org.apache.commons.codec.binary.Base64InputStream(inputStream3);
        long long7 = base64InputStream5.skip((long) 0);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream9 = new org.apache.commons.codec.binary.Base64InputStream((java.io.InputStream) base64InputStream5, false);
        byte[] byteArray11 = base64InputStream9.readNBytes(3527094);
        java.io.OutputStream outputStream14 = null;
        java.io.OutputStream outputStream17 = java.io.OutputStream.nullOutputStream();
        org.apache.commons.codec.binary.Base64OutputStream base64OutputStream18 = new org.apache.commons.codec.binary.Base64OutputStream(outputStream17);
        byte[] byteArray21 = org.apache.commons.codec.digest.HmacUtils.hmacSha256("d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a", "d7d2532589ac162c9cc0fc563c6dfe373336dc7e80c96b4c7ec66b2a5cff6107");
        base64OutputStream18.write(byteArray21);
        base64OutputStream18.write((int) '4');
        base64OutputStream18.write((-1877720325));
        org.apache.commons.codec.binary.Base32OutputStream base32OutputStream27 = new org.apache.commons.codec.binary.Base32OutputStream((java.io.OutputStream) base64OutputStream18);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str37 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray36);
        java.lang.String str39 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray36, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        java.io.InputStream inputStream42 = null;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream45 = new org.apache.commons.codec.binary.Base16InputStream(inputStream42, true, true);
        org.apache.commons.codec.CodecPolicy codecPolicy48 = org.apache.commons.codec.CodecPolicy.STRICT;
        org.apache.commons.codec.binary.Base16InputStream base16InputStream49 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base16InputStream45, false, false, codecPolicy48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray36, true, codecPolicy48);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream51 = new org.apache.commons.codec.binary.Base16OutputStream((java.io.OutputStream) base32OutputStream27, true, false, codecPolicy48);
        org.apache.commons.codec.binary.Base16OutputStream base16OutputStream52 = new org.apache.commons.codec.binary.Base16OutputStream(outputStream14, false, true, codecPolicy48);
        org.apache.commons.codec.binary.Base16InputStream base16InputStream53 = new org.apache.commons.codec.binary.Base16InputStream((java.io.InputStream) base64InputStream9, true, false, codecPolicy48);
        boolean boolean54 = base64InputStream9.markSupported();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[65, 71, 103, 65, 97, 81, 65, 104, 13, 10]");
        org.junit.Assert.assertNotNull(inputStream3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb" + "'", str4, "bd6f809cc5d8ae032b62e695f8355ccc38149e1ea8e860b08873da4ceb3457b34addf059b2b00517c285edc79b0a24b606d631b1b8a3e1963c248b0a355845cb");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(outputStream17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-26, -89, -3, 124, 3, 69, 108, -98, 85, -45, 28, 36, -105, 120, 86, 68, 29, 69, -97, 10, -1, 43, -126, 62, 2, 83, 43, -115, 69, -83, 4, 63]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str37, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str39, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AAAAAAA" + "'", str40, "AAAAAAA");
        org.junit.Assert.assertTrue("'" + codecPolicy48 + "' != '" + org.apache.commons.codec.CodecPolicy.STRICT + "'", codecPolicy48.equals(org.apache.commons.codec.CodecPolicy.STRICT));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha3_384Digest();
        java.security.MessageDigest messageDigest1 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream2 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest3 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest1, inputStream2);
        java.lang.String str4 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream2);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream2);
        java.security.MessageDigest messageDigest6 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream2);
        java.lang.String str7 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(messageDigest1);
        org.junit.Assert.assertEquals(messageDigest1.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream2);
        org.junit.Assert.assertNotNull(messageDigest3);
        org.junit.Assert.assertEquals(messageDigest3.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str4, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(messageDigest6);
        org.junit.Assert.assertEquals(messageDigest6.toString(), "SHA3-384 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "da39a3ee5e6b4b0d3255bfef95601890afd80709" + "'", str7, "da39a3ee5e6b4b0d3255bfef95601890afd80709");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16("TFK");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-2, -1, 0, 84, 0, 70, 0, 75]");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.codec.language.DoubleMetaphone doubleMetaphone0 = new org.apache.commons.codec.language.DoubleMetaphone();
        doubleMetaphone0.setMaxCodeLen((int) (byte) 100);
        java.lang.String str4 = doubleMetaphone0.doubleMetaphone("I6ae");
        java.lang.String str6 = doubleMetaphone0.encode("UTF-16LE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "A" + "'", str4, "A");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ATFL" + "'", str6, "ATFL");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.nio.charset.Charset charset0 = null;
        java.nio.charset.Charset charset1 = org.apache.commons.codec.Charsets.toCharset(charset0);
        org.apache.commons.codec.binary.Hex hex2 = new org.apache.commons.codec.binary.Hex(charset1);
        java.lang.String str3 = hex2.getCharsetName();
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha1("6brp3ObrccRZI");
        java.lang.Object obj6 = hex2.encode((java.lang.Object) byteArray5);
        java.lang.String str7 = hex2.getCharsetName();
        org.apache.commons.codec.digest.HmacAlgorithms hmacAlgorithms8 = org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224;
        java.util.BitSet bitSet9 = null;
        byte[] byteArray11 = new byte[] { (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet9, byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray12);
        javax.crypto.Mac mac14 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray13);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str21 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray20);
        java.lang.String str23 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray20, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray20);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray20);
        java.lang.String str26 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray20);
        javax.crypto.Mac mac27 = org.apache.commons.codec.digest.HmacUtils.getInitializedMac(hmacAlgorithms8, byteArray20);
        org.apache.commons.codec.binary.Base32 base32_29 = new org.apache.commons.codec.binary.Base32((int) (byte) 1);
        java.util.BitSet bitSet30 = null;
        byte[] byteArray32 = new byte[] { (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet30, byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray33);
        boolean boolean36 = base32_29.isInAlphabet(byteArray34, false);
        byte[] byteArray38 = org.apache.commons.codec.binary.StringUtils.getBytesUtf16Be("hi!");
        java.lang.String str39 = base32_29.encodeAsString(byteArray38);
        org.apache.commons.codec.digest.HmacUtils hmacUtils40 = new org.apache.commons.codec.digest.HmacUtils(hmacAlgorithms8, byteArray38);
        java.nio.ByteBuffer byteBuffer42 = org.apache.commons.codec.binary.StringUtils.getByteBufferUtf8("SHA-512/256");
        byte[] byteArray43 = hmacUtils40.hmac(byteBuffer42);
        byte[] byteArray44 = hex2.decode(byteBuffer42);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF-8" + "'", str3, "UTF-8");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-9, 84, 34, 7, 122, 34, 10, -86, -42, 81, -86, 18, -122, 11, -20, 15, -85, 77, -48, -13]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF-8" + "'", str7, "UTF-8");
        org.junit.Assert.assertTrue("'" + hmacAlgorithms8 + "' != '" + org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224 + "'", hmacAlgorithms8.equals(org.apache.commons.codec.digest.HmacAlgorithms.HMAC_SHA_224));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(mac14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str21, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str23, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AAAAAAA" + "'", str24, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str25, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str26, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(mac27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 104, 0, 105, 0, 33]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ABUAA2IAEE======" + "'", str39, "ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-56, -6, 38, 92, -40, -35, -88, -80, -32, 55, -47, -60, -40, 18, -70, 57, -127, -91, 121, -38, -55, 108, 76, -109, -12, 40, 123, -90]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.codec.net.URLCodec uRLCodec1 = new org.apache.commons.codec.net.URLCodec("a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        java.lang.String str2 = uRLCodec1.getEncoding();
        java.lang.String str3 = uRLCodec1.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = uRLCodec1.decode("6e57afa9a4816afe502bfa9a045f02ee2bab5660");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        } catch (org.apache.commons.codec.DecoderException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str2, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3" + "'", str3, "a59cab7fb64de2a07534170f78cb8de9905aee3d1569c3a7d5af9807eb64ccd3bd0de663c5e4d736336dd1980a1113c8b7292cdf5daef562518abb81377401f3");
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        long[] longArray1 = org.apache.commons.codec.digest.MurmurHash3.hash128("ABUAA2IAEE======");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[1724096053808027366, -4639371099502596198]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.nio.charset.Charset charset0 = org.apache.commons.codec.binary.Hex.DEFAULT_CHARSET;
        org.apache.commons.codec.CodecPolicy codecPolicy1 = null;
        org.apache.commons.codec.net.BCodec bCodec2 = new org.apache.commons.codec.net.BCodec(charset0, codecPolicy1);
        org.apache.commons.codec.net.QCodec qCodec3 = new org.apache.commons.codec.net.QCodec(charset0);
        java.nio.charset.Charset charset4 = qCodec3.getCharset();
        java.lang.String str5 = qCodec3.getDefaultCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = qCodec3.encode("AWrLOQlxe3HJg", "=?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: =?UTF-16?B?/v8AUABGAFQAUABUAEsAUABLAFQAUA==?=");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF-8" + "'", str5, "UTF-8");
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.codec.language.Caverphone caverphone0 = new org.apache.commons.codec.language.Caverphone();
        java.lang.String str2 = caverphone0.encode("1nualuGt.TbmU");
        boolean boolean5 = caverphone0.isCaverphoneEqual("$apr1$01360240$Sqo94M8QGdmC4Br9KQCWS/", "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a");
        boolean boolean8 = caverphone0.isCaverphoneEqual("SA11111111", "b3fab8d26023752d081c315d7cf8c228");
        boolean boolean11 = caverphone0.isCaverphoneEqual("78fdcba5ae892b088edbc0748cc2e854ff72cc2a6ea008870b1da380", "\u4c82\u5d0d\u7890\u46d6\u6e5e\u9534\uc248\u8f23\u5616\u6c3b\ue3cb\ubde9\ue001\u02cd\u8e6d\ued79\u0467\u9e29\ub558\u3015\u1acc\ubd9c\u2d4c\ud4fc");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NLKTPMA111" + "'", str2, "NLKTPMA111");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        int int2 = org.apache.commons.codec.digest.MurmurHash3.hash32((long) (-1464809304), (-7793026892456512543L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-842762067) + "'", int2 == (-842762067));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        org.apache.commons.codec.net.QuotedPrintableCodec quotedPrintableCodec1 = new org.apache.commons.codec.net.QuotedPrintableCodec(true);
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str8 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray7);
        java.lang.String str10 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray7, "99448658175a0534e08dbca1fe67b58231a53eec");
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        java.lang.String str12 = org.apache.commons.codec.digest.DigestUtils.sha384Hex(byteArray7);
        java.lang.String str13 = org.apache.commons.codec.digest.DigestUtils.sha3_384Hex(byteArray7);
        java.lang.Object obj14 = quotedPrintableCodec1.decode((java.lang.Object) byteArray7);
        java.nio.charset.Charset charset16 = org.apache.commons.codec.Charsets.UTF_8;
        java.lang.String str17 = quotedPrintableCodec1.decode("663b90c899fa25a111067be0c22ffc64dcf581c2", charset16);
        org.apache.commons.codec.net.URLCodec uRLCodec19 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet20 = null;
        byte[] byteArray22 = new byte[] { (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet20, byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray23);
        java.lang.String str25 = org.apache.commons.codec.digest.DigestUtils.sha512Hex(byteArray23);
        byte[] byteArray26 = uRLCodec19.decode(byteArray23);
        byte[] byteArray27 = null;
        byte[] byteArray28 = uRLCodec19.decode(byteArray27);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 1, (byte) 100, (byte) 1, (byte) 1 };
        java.lang.String str35 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray34);
        java.lang.String str37 = org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byteArray34, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.apache.commons.codec.binary.Base16 base16_38 = new org.apache.commons.codec.binary.Base16();
        boolean boolean40 = base16_38.isInAlphabet("AAAAAAA");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        java.lang.String str46 = org.apache.commons.codec.binary.Hex.encodeHexString(byteArray44, true);
        java.lang.String str47 = org.apache.commons.codec.digest.DigestUtils.sha512_256Hex(byteArray44);
        boolean boolean49 = base16_38.isInAlphabet(byteArray44, true);
        byte[] byteArray50 = org.apache.commons.codec.digest.HmacUtils.hmacSha256(byteArray34, byteArray44);
        byte[] byteArray51 = uRLCodec19.encode(byteArray50);
        byte[] byteArray52 = quotedPrintableCodec1.decode(byteArray51);
        java.lang.String str53 = org.apache.commons.codec.digest.DigestUtils.sha1Hex(byteArray52);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str8, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str10, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AAAAAAA" + "'", str11, "AAAAAAA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950" + "'", str12, "8e8d9847b6bd198bb1980db334659e96a1bf3dbb5c56368c6fabe6f6b561232790e3b40c1d4fb50a19c349b10bdc6950");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a" + "'", str13, "d3a7234b5e7f1b8bd658026eabe4e3279063f939cfdc54a83dc4cd3c55f3530441aa886cfb962ef041537e285a3dde7a");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "663b90c899fa25a111067be0c22ffc64dcf581c2" + "'", str17, "663b90c899fa25a111067be0c22ffc64dcf581c2");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5" + "'", str25, "48fb10b15f3d44a09dc82d02b06581e0c0c69478c9fd2cf8f9093659019a1687baecdbb38c9e72b12169dc4148690f87467f9154f5931c5df665c6496cbfd5f5");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100]");
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "99448658175a0534e08dbca1fe67b58231a53eec" + "'", str35, "99448658175a0534e08dbca1fe67b58231a53eec");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1" + "'", str37, "$apr1$99448658$NHoRW3CDu86V0JLzN7aGT1");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ffffff" + "'", str46, "ffffff");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a" + "'", str47, "75da6acc5a886d76f42a7ce5fb5fe2026f6a9a9ce95e706aed25eccbe70d635a");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[29, 116, 85, 96, -99, -21, 35, -103, -29, -87, -24, -99, -10, -122, -17, 32, -117, 105, 45, 69, -66, 23, -46, -30, -116, 33, -38, 110, -120, -24, -115, 46]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[37, 49, 68, 116, 85, 37, 54, 48, 37, 57, 68, 37, 69, 66, 37, 50, 51, 37, 57, 57, 37, 69, 51, 37, 65, 57, 37, 69, 56, 37, 57, 68, 37, 70, 54, 37, 56, 54, 37, 69, 70, 43, 37, 56, 66, 105, 45, 69, 37, 66, 69, 37, 49, 55, 37, 68, 50, 37, 69, 50, 37, 56, 67, 37, 50, 49, 37, 68, 65, 110, 37, 56, 56, 37, 69, 56, 37, 56, 68, 46]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "8945d47ef633144f5fc1e3073c4e15632a49524f" + "'", str53, "8945d47ef633144f5fc1e3073c4e15632a49524f");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        byte[] byteArray1 = org.apache.commons.codec.digest.DigestUtils.sha1("b86b1a965827e4a3435cf55c8095226f3c0dc56eb79f0a876d93ec336797e507");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[95, 25, -44, -126, -91, 98, -58, 92, -8, -79, 112, -116, -26, -34, 19, 98, 122, -15, 28, -118]");
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.codec.digest.XXHash32 xXHash32_0 = new org.apache.commons.codec.digest.XXHash32();
        java.util.BitSet bitSet1 = null;
        byte[] byteArray3 = new byte[] { (byte) 100 };
        byte[] byteArray4 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet1, byteArray3);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.BinaryCodec.toAsciiBytes(byteArray4);
        xXHash32_0.update(byteArray6, (int) (byte) 10, (-690116322));
        byte[] byteArray10 = org.apache.commons.codec.digest.DigestUtils.sha512_256(byteArray6);
        org.apache.commons.codec.net.PercentCodec percentCodec12 = new org.apache.commons.codec.net.PercentCodec(byteArray6, false);
        java.util.BitSet bitSet13 = null;
        org.apache.commons.codec.net.URLCodec uRLCodec15 = new org.apache.commons.codec.net.URLCodec("hi!");
        java.util.BitSet bitSet16 = null;
        byte[] byteArray18 = new byte[] { (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet16, byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.digest.DigestUtils.sha3_512(byteArray19);
        byte[] byteArray21 = uRLCodec15.encode(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.digest.DigestUtils.sha3_224(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(bitSet13, byteArray20, true);
        byte[] byteArray25 = percentCodec12.decode(byteArray20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[48, 49, 49, 48, 48, 49, 48, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, 58, 108, -60, 23, -121, 77, -3, 127, -30, -36, 64, -9, 119, 6, -49, 25, 62, -50, -58, 83, 123, -61, -47, -58, 26, -34, -5, -74, -87, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 104, 37, 56, 57, 118, 37, 56, 50, 37, 67, 67, 37, 68, 50, 37, 66, 49, 37, 69, 69, 37, 48, 67, 37, 65, 69, 37, 56, 68, 37, 67, 53, 89, 71, 37, 50, 57, 37, 49, 70, 37, 56, 49, 37, 57, 67, 37, 67, 53, 37, 57, 69, 37, 69, 49, 37, 50, 54, 37, 70, 53, 37, 66, 68, 37, 50, 52, 37, 51, 66, 37, 49, 56, 82, 87, 116, 37, 49, 52, 65, 37, 51, 65, 37, 69, 69, 37, 68, 53, 120, 37, 48, 66, 95, 37, 66, 49, 37, 49, 48, 37, 57, 48, 37, 48, 51, 37, 56, 55, 37, 49, 53, 37, 66, 69, 37, 69, 68, 37, 49, 66, 37, 48, 48, 113, 74, 37, 49, 53, 37, 66, 51, 37, 49, 67, 37, 56, 68, 37, 57, 54, 116, 37, 70, 66, 37, 68, 66, 37, 68, 70, 37, 55, 70, 37, 68, 52, 37, 49, 57, 37, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[16, 7, -128, 127, 37, -48, -33, -71, 29, -42, -96, -117, 8, -80, -32, -61, 37, 9, 40, 65, 47, 81, -15, -124, 18, 47, 12, 90]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[70, 104, 61, 56, 57, 118, 61, 56, 50, 61, 67, 67, 61, 68, 50, 61, 66, 49, 61, 69, 69, 61, 48, 67, 61, 65, 69, 61, 56, 68, 61, 67, 53, 89, 71, 41, 61, 49, 70, 61, 56, 49, 61, 57, 67, 61, 67, 53, 61, 57, 69, 61, 69, 49, 38, 61, 70, 53, 61, 66, 68, 36, 59, 61, 49, 56, 82, 87, 116, 61, 49, 52, 65, 61, 13, 10, 58, 61, 69, 69, 61, 68, 53, 120, 61, 48, 66, 95, 61, 66, 49, 61, 49, 48, 61, 57, 48, 61, 48, 51, 61, 56, 55, 61, 49, 53, 61, 66, 69, 61, 69, 68, 61, 49, 66, 61, 48, 48, 113, 74, 61, 49, 53, 61, 66, 51, 61, 49, 67, 61, 56, 68, 61, 57, 54, 116, 61, 70, 66, 61, 68, 66, 61, 68, 70, 61, 55, 70, 61, 68, 52, 61, 13, 10, 61, 49, 57, 61, 49, 67]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 104, -119, 118, -126, -52, -46, -79, -18, 12, -82, -115, -59, 89, 71, 41, 31, -127, -100, -59, -98, -31, 38, -11, -67, 36, 59, 24, 82, 87, 116, 20, 65, 58, -18, -43, 120, 11, 95, -79, 16, -112, 3, -121, 21, -66, -19, 27, 0, 113, 74, 21, -77, 28, -115, -106, 116, -5, -37, -33, 127, -44, 25, 28]");
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, false);
        byte[] byteArray8 = base64InputStream7.readAllBytes();
        java.lang.String str9 = org.apache.commons.codec.digest.Sha2Crypt.sha256Crypt(byteArray8);
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$5$.SSNTq4W$hykgMgn4G/Gq9c8VPCsaEWmqYcP9Q946rAUHl4rLje3" + "'", str9, "$5$.SSNTq4W$hykgMgn4G/Gq9c8VPCsaEWmqYcP9Q946rAUHl4rLje3");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.security.MessageDigest messageDigest0 = org.apache.commons.codec.digest.DigestUtils.getSha512Digest();
        java.io.InputStream inputStream1 = java.io.InputStream.nullInputStream();
        java.security.MessageDigest messageDigest2 = org.apache.commons.codec.digest.DigestUtils.updateDigest(messageDigest0, inputStream1);
        java.lang.String str3 = org.apache.commons.codec.digest.DigestUtils.sha256Hex(inputStream1);
        byte[] byteArray4 = org.apache.commons.codec.digest.DigestUtils.sha3_384(inputStream1);
        byte[] byteArray5 = org.apache.commons.codec.digest.DigestUtils.md5(inputStream1);
        org.apache.commons.codec.binary.Base64InputStream base64InputStream7 = new org.apache.commons.codec.binary.Base64InputStream(inputStream1, false);
        byte[] byteArray8 = base64InputStream7.readAllBytes();
        java.lang.String str9 = org.apache.commons.codec.binary.StringUtils.newStringIso8859_1(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.codec.digest.MurmurHash3.hash64(byteArray8, 821153611, (-1235739843), 2057402559);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index -414586233 out of bounds for length 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(messageDigest0);
        org.junit.Assert.assertEquals(messageDigest0.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertNotNull(inputStream1);
        org.junit.Assert.assertNotNull(messageDigest2);
        org.junit.Assert.assertEquals(messageDigest2.toString(), "SHA-512 Message Digest from SUN, <initialized>\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" + "'", str3, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[12, 99, -89, 91, -124, 94, 79, 125, 1, 16, 125, -123, 46, 76, 36, -123, -59, 26, 80, -86, -86, -108, -4, 97, -103, 94, 113, -69, -18, -104, 58, 42, -61, 113, 56, 49, 38, 74, -37, 71, -5, 107, -47, -32, 88, -43, -16, 4]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-44, 29, -116, -39, -113, 0, -78, 4, -23, -128, 9, -104, -20, -8, 66, 126]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        byte[] byteArray1 = org.apache.commons.codec.binary.StringUtils.getBytesUtf8("0931291c985a15d86bf406276121461af7e4553d");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[48, 57, 51, 49, 50, 57, 49, 99, 57, 56, 53, 97, 49, 53, 100, 56, 54, 98, 102, 52, 48, 54, 50, 55, 54, 49, 50, 49, 52, 54, 49, 97, 102, 55, 101, 52, 53, 53, 51, 100]");
    }
}
